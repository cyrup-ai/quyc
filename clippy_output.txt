warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/builder/fluent.rs:266:37
    |
266 |                 let bytes_written = self.bytes_written as f64;
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss
note: the lint level is defined here
   --> packages/client/src/lib.rs:26:9
    |
 26 | #![warn(clippy::pedantic)]
    |         ^^^^^^^^^^^^^^^^
    = note: `#[warn(clippy::cast_precision_loss)]` implied by `#[warn(clippy::pedantic)]`

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/builder/fluent.rs:267:34
    |
267 |                 let total_size = total as f64;
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: very complex type used. Consider factoring parts into `type` definitions
  --> packages/client/src/builder/streaming.rs:87:20
   |
87 |     chunk_handler: Option<Box<dyn Fn(Result<T, HttpError>) -> T + Send + Sync>>,
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity
note: the lint level is defined here
  --> packages/client/src/lib.rs:25:9
   |
25 | #![warn(clippy::all)]
   |         ^^^^^^^^^^^
   = note: `#[warn(clippy::type_complexity)]` implied by `#[warn(clippy::all)]`

warning: casting `u64` to `i64` may wrap around the value
   --> packages/client/src/cache/http_date.rs:101:50
    |
101 |         let dt = DateTime::<Utc>::from_timestamp(duration.as_secs() as i64, 0).unwrap_or_default();
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap
    = note: `#[warn(clippy::cast_possible_wrap)]` implied by `#[warn(clippy::pedantic)]`

warning: binding to `_` prefixed variable with no side-effect
  --> packages/client/src/cache/response_cache/operations.rs:54:13
   |
54 |         let _version = entry.version;
   |             ^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding
   = note: `#[warn(clippy::no_effect_underscore_binding)]` implied by `#[warn(clippy::pedantic)]`

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
   --> packages/client/src/cache/response_cache/operations.rs:129:31
    |
129 |           let current_entries = match usize::try_from(current_entries_u64) {
    |  _______________________________^
130 | |             Ok(entries) => entries,
131 | |             Err(_) => {
...   |
143 | |         };
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
    = note: `#[warn(clippy::single_match_else)]` implied by `#[warn(clippy::pedantic)]`
help: try
    |
129 ~         let current_entries = if let Ok(entries) = usize::try_from(current_entries_u64) { entries } else {
130 +             // u64 value is too large for usize on this platform
131 +             // This can only happen if we have more than 2^32-1 entries on 32-bit platforms
132 +             tracing::warn!(
133 +                 target: "quyc::cache",
134 +                 current_entries_u64 = current_entries_u64,
135 +                 max_usize = usize::MAX,
136 +                 "Entry count exceeds platform usize limits, using max_entries for comparison"
137 +             );
138 +             // Use max_entries as a safe fallback to trigger eviction
139 +             self.config.max_entries
140 ~         };
    |

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/client/core.rs:205:20
    |
205 |         let hits = self.stats.cache_hits.load(Ordering::Relaxed) as f64;
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/client/core.rs:206:22
    |
206 |         let misses = self.stats.cache_misses.load(Ordering::Relaxed) as f64;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/client/core.rs:215:26
    |
215 |         let successful = self.stats.successful_requests.load(Ordering::Relaxed) as f64;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/client/core.rs:216:22
    |
216 |         let failed = self.stats.failed_requests.load(Ordering::Relaxed) as f64;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/client/stats.rs:100:13
    |
100 |             successful as f64 / total as f64
    |             ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/client/stats.rs:100:33
    |
100 |             successful as f64 / total as f64
    |                                 ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: more than 3 bools in a struct
   --> packages/client/src/config/core/types.rs:15:1
    |
 15 | / pub struct HttpConfig {
 16 | |     /// Maximum number of idle connections per host
 17 | |     pub pool_max_idle_per_host: usize,
...   |
177 | |     pub deflate_level: Option<u32>,
178 | | }
    | |_^
    |
    = help: consider using a state machine or refactoring bools into two-variant enums
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools
    = note: `#[warn(clippy::struct_excessive_bools)]` implied by `#[warn(clippy::pedantic)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/builder/tls.rs:19:5
   |
19 | /     pub fn new_rustls_tls(
20 | |         http: HttpConnector,
21 | |         config: rustls::ClientConfig,
22 | |         proxies: arrayvec::ArrayVec<crate::proxy::Proxy, 4>,
...  |
39 | |         tls_info: bool,
40 | |     ) -> Result<Self, BoxError> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc
   = note: `#[warn(clippy::missing_errors_doc)]` implied by `#[warn(clippy::pedantic)]`

warning: this function has too many arguments (8/7)
  --> packages/client/src/connect/builder/tls.rs:19:5
   |
19 | /     pub fn new_rustls_tls(
20 | |         http: HttpConnector,
21 | |         config: rustls::ClientConfig,
22 | |         proxies: arrayvec::ArrayVec<crate::proxy::Proxy, 4>,
...  |
39 | |         tls_info: bool,
40 | |     ) -> Result<Self, BoxError> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments
   = note: `#[warn(clippy::too_many_arguments)]` implied by `#[warn(clippy::all)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/builder/tls.rs:61:5
   |
61 | /     pub fn from_built_rustls_tls(
62 | |         http: HttpConnector,
63 | |         config: rustls::ClientConfig,
64 | |         proxies: arrayvec::ArrayVec<crate::proxy::Proxy, 4>,
...  |
81 | |         tls_info: bool,
82 | |     ) -> Result<Self, BoxError> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function has too many arguments (8/7)
  --> packages/client/src/connect/builder/tls.rs:61:5
   |
61 | /     pub fn from_built_rustls_tls(
62 | |         http: HttpConnector,
63 | |         config: rustls::ClientConfig,
64 | |         proxies: arrayvec::ArrayVec<crate::proxy::Proxy, 4>,
...  |
81 | |         tls_info: bool,
82 | |     ) -> Result<Self, BoxError> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/connect/builder/types.rs:62:5
   |
62 | /     pub fn timeout(mut self, timeout: Duration) -> Self {
63 | |         self.connect_timeout = Some(timeout);
64 | |         self
65 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use
   = note: `#[warn(clippy::return_self_not_must_use)]` implied by `#[warn(clippy::pedantic)]`

warning: this could be rewritten as `let...else`
  --> packages/client/src/connect/proxy/bypass.rs:50:9
   |
50 | /         let host = match uri.host() {
51 | |             Some(h) => h,
52 | |             None => return false,
53 | |         };
   | |__________^ help: consider writing: `let Some(host) = uri.host() else { return false };`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
   = note: `#[warn(clippy::manual_let_else)]` implied by `#[warn(clippy::pedantic)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/proxy/intercepted.rs:33:5
   |
33 | /     pub fn from_proxies(
34 | |         proxies: arrayvec::ArrayVec<crate::proxy::Proxy, 4>,
35 | |     ) -> Result<Self, BoxError> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/service/core.rs:38:5
   |
38 | /     pub fn new(
39 | |         http: HttpConnector,
40 | |         #[cfg(feature = "__rustls")] rustls_config: Option<rustls::ClientConfig>,
41 | |         proxies: arrayvec::ArrayVec<crate::proxy::Proxy, 4>,
...  |
48 | |         tls_info: bool,
49 | |     ) -> Result<Self, BoxError> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function has too many arguments (10/7)
  --> packages/client/src/connect/service/core.rs:38:5
   |
38 | /     pub fn new(
39 | |         http: HttpConnector,
40 | |         #[cfg(feature = "__rustls")] rustls_config: Option<rustls::ClientConfig>,
41 | |         proxies: arrayvec::ArrayVec<crate::proxy::Proxy, 4>,
...  |
48 | |         tls_info: bool,
49 | |     ) -> Result<Self, BoxError> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments

warning: this could be rewritten as `let...else`
  --> packages/client/src/connect/service/direct.rs:70:17
   |
70 | /                 let host = if let Some(h) = destination.host() { h } else {
71 | |                     let () = emit!(
72 | |                         sender,
73 | |                         TcpConnectionChunk::bad_chunk("URI missing host".to_string())
74 | |                     );
75 | |                     return;
76 | |                 };
   | |__________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
   |
70 ~                 let Some(host) = destination.host() else {
71 +                     let () = emit!(
72 +                         sender,
73 +                         TcpConnectionChunk::bad_chunk("URI missing host".to_string())
74 +                     );
75 +                     return;
76 +                 };
   |

warning: these match arms have identical bodies
  --> packages/client/src/connect/service/direct.rs:83:29
   |
83 | ...                   Some("http") => 80,
   |                       ^^^^^^^^^^^^^^^^^^
84 | ...                   _ => 80,
   |                       ^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
   = note: `#[warn(clippy::match_same_arms)]` implied by `#[warn(clippy::pedantic)]`
help: otherwise remove the non-wildcard arm
   |
83 -                             Some("http") => 80,
   |

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/connect/service/proxy.rs:17:42
   |
17 |     pub fn connect_via_proxy(&self, dst: Uri, proxy_scheme: &str) -> AsyncStream<TcpConnectionChunk, 1024> {
   |                                          ^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
   = note: `#[warn(clippy::needless_pass_by_value)]` implied by `#[warn(clippy::pedantic)]`
help: consider taking a reference instead
   |
17 |     pub fn connect_via_proxy(&self, dst: &Uri, proxy_scheme: &str) -> AsyncStream<TcpConnectionChunk, 1024> {
   |                                          +

warning: this could be rewritten as `let...else`
  --> packages/client/src/connect/service/proxy.rs:24:17
   |
24 | /                 let proxy_config = if let Some(config) = connector_service.intercepted.first_proxy() { config } else {
25 | |                     emit!(
26 | |                         sender,
27 | |                         TcpConnectionChunk::bad_chunk(
...  |
31 | |                     return;
32 | |                 };
   | |__________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
   |
24 ~                 let Some(proxy_config) = connector_service.intercepted.first_proxy() else {
25 +                     emit!(
26 +                         sender,
27 +                         TcpConnectionChunk::bad_chunk(
28 +                             "No proxy configuration available".to_string()
29 +                         )
30 +                     );
31 +                     return;
32 +                 };
   |

warning: this could be rewritten as `let...else`
  --> packages/client/src/connect/service/proxy.rs:35:17
   |
35 | /                 let proxy_host = if let Some(h) = proxy_uri.host() { h } else {
36 | |                     emit!(
37 | |                         sender,
38 | |                         TcpConnectionChunk::bad_chunk("Proxy URI missing host".to_string())
39 | |                     );
40 | |                     return;
41 | |                 };
   | |__________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
   |
35 ~                 let Some(proxy_host) = proxy_uri.host() else {
36 +                     emit!(
37 +                         sender,
38 +                         TcpConnectionChunk::bad_chunk("Proxy URI missing host".to_string())
39 +                     );
40 +                     return;
41 +                 };
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/tcp/basic_connection.rs:10:1
   |
10 | / pub fn connect_to_address_list(
11 | |     addrs: &[SocketAddr],
12 | |     timeout: Option<Duration>,
13 | | ) -> Result<TcpStream, String> {
   | |______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/tcp/dns_resolution.rs:10:1
   |
10 | pub fn resolve_host_sync(host: &str, port: u16) -> Result<Vec<SocketAddr>, String> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/tcp/happy_eyeballs.rs:12:1
   |
12 | / pub fn happy_eyeballs_connect(
13 | |     ipv6_addrs: &[SocketAddr],
14 | |     ipv4_addrs: &[SocketAddr],
15 | |     delay: Duration,
16 | |     timeout: Option<Duration>,
17 | | ) -> Result<std::net::TcpStream, String> {
   | |________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/tcp/http_connect.rs:12:1
   |
12 | / pub fn establish_connect_tunnel(
13 | |     mut proxy_stream: TcpStream,
14 | |     target_uri: &Uri,
15 | |     auth: Option<&str>,
16 | | ) -> Result<TcpStream, String> {
   | |______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/tcp/socket_config.rs:10:1
   |
10 | / pub fn configure_tcp_socket(
11 | |     stream: &mut TcpStream,
12 | |     nodelay: bool,
13 | |     keepalive: Option<Duration>,
14 | | ) -> Result<(), String> {
   | |_______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/tcp/socket_config.rs:35:1
   |
35 | pub fn configure_tcp_socket_inline(stream: &TcpStream, nodelay: bool) -> Result<(), String> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: you have declared `#[inline(always)]` on `configure_tcp_socket_inline`. This is usually a bad idea
  --> packages/client/src/connect/tcp/socket_config.rs:34:1
   |
34 | #[inline(always)]
   | ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always
   = note: `#[warn(clippy::inline_always)]` implied by `#[warn(clippy::pedantic)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/tcp/socks_protocol.rs:11:1
   |
11 | / pub fn socks_handshake(
12 | |     stream: TcpStream,
13 | |     target_host: &str,
14 | |     target_port: u16,
15 | |     version: super::super::proxy::SocksVersion,
16 | | ) -> Result<TcpStream, String> {
   | |______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/tcp/socks_protocol.rs:24:1
   |
24 | / pub fn socks4_handshake(
25 | |     mut stream: TcpStream,
26 | |     target_host: &str,
27 | |     target_port: u16,
28 | | ) -> Result<TcpStream, String> {
   | |______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/tcp/socks_protocol.rs:67:1
   |
67 | / pub fn socks5_handshake(
68 | |     mut stream: TcpStream,
69 | |     target_host: &str,
70 | |     target_port: u16,
71 | | ) -> Result<TcpStream, String> {
   | |______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this could be rewritten as `let...else`
   --> packages/client/src/connect/tcp/socks_protocol.rs:105:9
    |
105 | /         let hostname_len = match u8::try_from(target_host.len()) {
106 | |             Ok(len) => len,
107 | |             Err(_) => {
108 | |                 return Err(format!(
...   |
113 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
105 ~         let Ok(hostname_len) = u8::try_from(target_host.len()) else {
106 +                 return Err(format!(
107 +                     "SOCKS5 hostname too long: {} bytes (max 255)",
108 +                     target_host.len()
109 +                 ));
110 +             };
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/tcp/tls_connections.rs:17:1
   |
17 | / pub fn establish_http_connection(
18 | |     _connector: &hyper_util::client::legacy::connect::HttpConnector,
19 | |     uri: &Uri,
20 | |     timeout: Option<Duration>,
21 | | ) -> Result<TcpStream, String> {
   | |______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
  --> packages/client/src/connect/tcp/tls_connections.rs:25:9
   |
25 |         Some("http") => 80,
   |         ^^^^^^^^^^^^^^^^^^
26 |         _ => 80,
   |         ^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
25 -         Some("http") => 80,
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/tcp/tls_connections.rs:37:1
   |
37 | / pub fn establish_rustls_connection(
38 | |     stream: TcpStream,
39 | |     host: String,
40 | |     config: std::sync::Arc<rustls::ClientConfig>,
41 | | ) -> Result<rustls::StreamOwned<rustls::ClientConnection, TcpStream>, String> {
   | |_____________________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/connect/tcp/tls_connections.rs:39:11
   |
39 |     host: String,
   |           ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider changing the type to
   |
39 -     host: String,
39 +     host: &str,
   |
help: change `host.clone()` to
   |
42 -     let server_name = match rustls::pki_types::DnsName::try_from(host.clone()) {
42 +     let server_name = match rustls::pki_types::DnsName::try_from(host.to_string()) {
   |

warning: manual `Debug` impl does not include all fields
  --> packages/client/src/connect/types/connection.rs:19:1
   |
19 | / impl std::fmt::Debug for Conn {
20 | |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
21 | |         f.debug_struct("Conn")
22 | |             .field("is_proxy", &self.is_proxy)
...  |
26 | | }
   | |_^
   |
note: this field is unused
  --> packages/client/src/connect/types/connection.rs:14:5
   |
14 |     pub(super) inner: Box<dyn ConnectionTrait + Send + Sync>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider including all fields in this `Debug` impl
   = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug
   = note: `#[warn(clippy::missing_fields_in_debug)]` implied by `#[warn(clippy::pedantic)]`

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/connect/types/connection.rs:179:5
    |
179 |     fn peer_addr(&self) -> std::io::Result<SocketAddr>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/connect/types/connection.rs:180:5
    |
180 |     fn local_addr(&self) -> std::io::Result<SocketAddr>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
   --> packages/client/src/connect/types/connector.rs:143:13
    |
143 | /             match ConnectorService::new(
144 | |                 http,
145 | |  // tls
146 | |                 #[cfg(feature = "__rustls")] None, // rustls_config
...   |
184 | |             }
    | |_____________^
    |
    = note: you might want to preserve the comments from inside the `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try
    |
143 ~             if let Ok(service) = ConnectorService::new(
144 +                 http,
145 +  // tls
146 +                 #[cfg(feature = "__rustls")] None, // rustls_config
147 +                 proxies,
148 +                 None, // user_agent
149 +                 None, // local_address
150 +                 None, // interface
151 +                 true, // nodelay
152 +                 Some(std::time::Duration::from_secs(30)), // connect_timeout
153 +                 Some(std::time::Duration::from_millis(300)), // happy_eyeballs_timeout
154 +                 false, // tls_info
155 +             ) { Self::BuiltHttp(service) } else {
156 +                        // Create minimal fallback connector with default configuration
157 +                        let http = hyper_util::client::legacy::connect::HttpConnector::new();
158 +                        let proxies = arrayvec::ArrayVec::new();
159 +                        
160 +                        match ConnectorService::new(
161 +                            http,
162 +             // tls
163 +                            #[cfg(feature = "__rustls")] None, // rustls_config
164 +                            proxies,
165 +                            None,
166 +                            None,
167 +                            None,
168 +                            true,
169 +                            Some(std::time::Duration::from_secs(10)),
170 +                            Some(std::time::Duration::from_millis(100)),
171 +                            false,
172 +                        ) {
173 +                            Ok(service) => Self::BuiltHttp(service),
174 +                            Err(e) => {
175 +                                log::error!("Critical: Fallback HTTP connector creation failed: {e}");
176 +                                log::error!("System configuration prevents creation of basic HTTP connectors");
177 +                                // Create error-marked connector for graceful degradation instead of panic
178 +                                Self::create_error_marker_connector()
179 +                            }
180 +                        }
181 +                    }
    |

warning: these match arms have identical bodies
   --> packages/client/src/connect/types/tcp_impl.rs:181:13
    |
181 |             Ok(_) => false, // Connection is still valid
    |             ^^^^^^^^^^^^^^
182 |             Err(ref e) if e.kind() == std::io::ErrorKind::NotConnected => true,
183 |             Err(_) => false, // Other errors don't necessarily mean closed
    |             ^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
181 ~             // Connection is still valid
182 |             Err(ref e) if e.kind() == std::io::ErrorKind::NotConnected => true,
183 ~             Ok(_) | Err(_) => false, // Other errors don't necessarily mean closed
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/connect/types/tls_connection.rs:45:5
   |
45 | /     pub async fn create_with_manager(
46 | |         tls_manager: &TlsManager,
47 | |         host: &str,
48 | |         port: u16,
49 | |     ) -> Result<Self, TlsError> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/connect/types/tls_connection.rs:106:13
    |
106 |             Ok(_) => false, // Connection is still valid
    |             ^^^^^^^^^^^^^^
107 |             Err(ref e) if e.kind() == std::io::ErrorKind::NotConnected => true,
108 |             Err(_) => false, // Other errors don't necessarily mean closed
    |             ^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
106 ~             // Connection is still valid
107 |             Err(ref e) if e.kind() == std::io::ErrorKind::NotConnected => true,
108 ~             Ok(_) | Err(_) => false, // Other errors don't necessarily mean closed
    |

warning: this lifetime isn't used in the impl
   --> packages/client/src/cookie/core.rs:168:6
    |
168 | impl<'a> fmt::Debug for CookieParseError {
    |      ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes
    = note: `#[warn(clippy::extra_unused_lifetimes)]` implied by `#[warn(clippy::all)]`

warning: this lifetime isn't used in the impl
   --> packages/client/src/cookie/core.rs:174:6
    |
174 | impl<'a> fmt::Display for CookieParseError {
    |      ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes

warning: parameter of type `HashMap` should be generalized over different hashers
  --> packages/client/src/cookie/utils.rs:20:32
   |
20 | pub fn format_cookie(cookies: &HashMap<String, String>) -> String {
   |                                ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher
   = note: `#[warn(clippy::implicit_hasher)]` implied by `#[warn(clippy::pedantic)]`
help: add a type parameter for `BuildHasher`
   |
20 | pub fn format_cookie<S: ::std::hash::BuildHasher>(cookies: &HashMap<String, String, S>) -> String {
   |                     +++++++++++++++++++++++++++++                                 +++

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/cookie/utils.rs:46:1
   |
46 | pub fn validate_cookie(name: &str, value: &str) -> Result<(), String> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/error/types.rs:58:5
   |
58 | /     pub fn with<E: Into<Box<dyn StdError + Send + Sync>>>(mut self, source: E) -> Error {
59 | |         self.inner.source = Some(source.into());
60 | |         self
61 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/compression.rs:211:1
    |
211 | / pub fn compress_bytes(
212 | |     data: &[u8], 
213 | |     algorithm: CompressionAlgorithm, 
214 | |     level: Option<u32>
215 | | ) -> Result<Vec<u8>, HttpError> {
    | |_______________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/compression.rs:224:1
    |
224 | / pub fn compress_bytes_with_metrics(
225 | |     data: &[u8], 
226 | |     algorithm: CompressionAlgorithm, 
227 | |     level: Option<u32>,
228 | |     stats: Option<&crate::client::core::ClientStats>
229 | | ) -> Result<Vec<u8>, HttpError> {
    | |_______________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/http/compression.rs:270:25
    |
270 |             let ratio = data.len() as f64 / compressed.len() as f64;
    |                         ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/http/compression.rs:270:45
    |
270 |             let ratio = data.len() as f64 / compressed.len() as f64;
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casts from `u64` to `u128` can be expressed infallibly using `From`
   --> packages/client/src/http/compression.rs:277:74
    |
277 |                     let compression_micros_u64 = if compression_micros > u64::MAX as u128 {
    |                                                                          ^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
    = note: `#[warn(clippy::cast_lossless)]` implied by `#[warn(clippy::pedantic)]`
help: use `u128::from` instead
    |
277 -                     let compression_micros_u64 = if compression_micros > u64::MAX as u128 {
277 +                     let compression_micros_u64 = if compression_micros > u128::from(u64::MAX) {
    |

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/http/compression.rs:286:25
    |
286 |                         compression_micros as u64
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
    = note: `#[warn(clippy::cast_possible_truncation)]` implied by `#[warn(clippy::pedantic)]`
help: ... or use `try_from` and handle the error accordingly
    |
286 -                         compression_micros as u64
286 +                         u64::try_from(compression_micros)
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/compression.rs:345:1
    |
345 | pub fn decompress_bytes(data: &[u8], algorithm: CompressionAlgorithm) -> Result<Vec<u8>, HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/compression.rs:354:1
    |
354 | / pub fn decompress_bytes_with_metrics(
355 | |     data: &[u8], 
356 | |     algorithm: CompressionAlgorithm,
357 | |     stats: Option<&crate::client::core::ClientStats>
358 | | ) -> Result<Vec<u8>, HttpError> {
    | |_______________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casts from `u64` to `u128` can be expressed infallibly using `From`
   --> packages/client/src/http/compression.rs:395:74
    |
395 |                 let decompression_micros_u64 = if decompression_micros > u64::MAX as u128 {
    |                                                                          ^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u128::from` instead
    |
395 -                 let decompression_micros_u64 = if decompression_micros > u64::MAX as u128 {
395 +                 let decompression_micros_u64 = if decompression_micros > u128::from(u64::MAX) {
    |

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/http/compression.rs:404:21
    |
404 |                     decompression_micros as u64
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
404 -                     decompression_micros as u64
404 +                     u64::try_from(decompression_micros)
    |

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/http/compression.rs:489:5
    |
489 |     const READ_LIMIT: usize = 64 * 1024 * 1024; // 64MB limit
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements
    = note: `#[warn(clippy::items_after_statements)]` implied by `#[warn(clippy::pedantic)]`

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/http/compression.rs:530:5
    |
530 |     const READ_LIMIT: usize = 64 * 1024 * 1024; // 64MB limit
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: casting `u32` to `i32` may wrap around the value
   --> packages/client/src/http/compression.rs:571:18
    |
571 |         quality: level.min(11) as i32,
    |                  ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/http/compression.rs:605:5
    |
605 |     const READ_LIMIT: usize = 64 * 1024 * 1024; // 64MB limit
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/http/compression.rs:833:5
    |
833 | /     static UNCOMPRESSIBLE_TYPES: &[&str] = &[
834 | |         // Images
835 | |         "image/jpeg", "image/png", "image/gif", "image/webp", "image/avif", "image/bmp",
...   |
846 | |         "application/x-br", "application/x-deflate",
847 | |     ];
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/conversions.rs:22:1
   |
22 | pub fn from_bytes<T: TryFrom<Vec<u8>>>(bytes: Bytes) -> Result<T, T::Error> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/http/conversions.rs:22:47
   |
22 | pub fn from_bytes<T: TryFrom<Vec<u8>>>(bytes: Bytes) -> Result<T, T::Error> {
   |                                               ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
22 | pub fn from_bytes<T: TryFrom<Vec<u8>>>(bytes: &Bytes) -> Result<T, T::Error> {
   |                                               +

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/http/conversions.rs:28:38
   |
28 | pub fn to_string<T: ToString>(value: T) -> String {
   |                                      ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
28 | pub fn to_string<T: ToString>(value: &T) -> String {
   |                                      +

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/conversions.rs:41:1
   |
41 | pub fn bytes_to_string(bytes: Bytes) -> Result<String, crate::error::HttpError> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/http/conversions.rs:41:31
   |
41 | pub fn bytes_to_string(bytes: Bytes) -> Result<String, crate::error::HttpError> {
   |                               ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
41 | pub fn bytes_to_string(bytes: &Bytes) -> Result<String, crate::error::HttpError> {
   |                               +

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/http/conversions.rs:61:28
   |
61 | pub fn bytes_to_vec(bytes: Bytes) -> Vec<u8> {
   |                            ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
61 | pub fn bytes_to_vec(bytes: &Bytes) -> Vec<u8> {
   |                            +

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/conversions.rs:74:1
   |
74 | pub fn bytes_to_str(bytes: &Bytes) -> Result<&str, crate::error::HttpError> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/conversions.rs:91:1
   |
91 | / pub fn bytes_to_string_secure(
92 | |     bytes: Bytes, 
93 | |     mode: SecurityMode
94 | | ) -> Result<String, crate::error::HttpError> {
   | |____________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/http/conversions.rs:92:12
   |
92 |     bytes: Bytes, 
   |            ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
92 |     bytes: &Bytes, 
   |            +

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/conversions.rs:145:1
    |
145 | pub fn validate_strict_utf8(bytes: &[u8]) -> Result<(), crate::error::HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/conversions.rs:197:1
    |
197 | pub fn detect_bidirectional_attacks(text: &str) -> Result<(), crate::error::HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/conversions.rs:281:1
    |
281 | pub fn scan_for_malicious_patterns(data: &[u8]) -> Result<(), crate::error::HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/conversions.rs:335:1
    |
335 | / pub fn convert<T, U>(value: T) -> Result<U, crate::error::HttpError>
336 | | where
337 | |     T: TryInto<U>,
338 | |     T::Error: std::fmt::Display,
    | |________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/escape.rs:35:1
   |
35 | pub fn url_decode(input: &str) -> Result<String, std::fmt::Error> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/http/headers.rs:26:5
   |
26 | /     pub fn set(mut self, key: HeaderName, value: HeaderValue) -> Self {
27 | |         // If there's already an error, preserve it
28 | |         if self.error.is_some() {
29 | |             return self;
...  |
32 | |         self
33 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/http/headers.rs:36:5
   |
36 | /     pub fn content_type(self, content_type: &str) -> Self {
37 | |         match HeaderValue::from_str(content_type) {
38 | |             Ok(value) => self.set(header::CONTENT_TYPE, value),
39 | |             Err(e) => Self {
...  |
44 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/http/headers.rs:47:5
   |
47 | /     pub fn bearer_token(self, token: &str) -> Self {
48 | |         let auth_header = format!("Bearer {token}");
49 | |         match HeaderValue::from_str(&auth_header) {
50 | |             Ok(value) => self.set(header::AUTHORIZATION, value),
...  |
56 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/http/headers.rs:59:5
   |
59 | /     pub fn basic_auth(self, user: &str, pass: Option<&str>) -> Self {
60 | |         let credentials = format!("{}:{}", user, pass.unwrap_or_default());
61 | |         let encoded = general_purpose::STANDARD.encode(credentials);
62 | |         let auth_header = format!("Basic {encoded}");
...  |
70 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/headers.rs:114:1
    |
114 | pub fn parse_headers(header_str: &str) -> Result<HeaderMap, crate::error::HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/headers.rs:157:1
    |
157 | pub fn validate_header(name: &str, value: &str) -> Result<(), crate::error::HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/headers.rs:165:1
    |
165 | pub fn create_header_value(value: &str) -> Result<HeaderValue, crate::error::HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/headers.rs:172:1
    |
172 | pub fn create_header_name(name: &str) -> Result<HeaderName, crate::error::HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/into_url.rs:32:5
   |
32 |     fn into_url(self) -> std::result::Result<Url, crate::HttpError>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: more than 3 bools in a struct
  --> packages/client/src/http/request.rs:23:1
   |
23 | / pub struct HttpRequest {
24 | |     method: Method,
25 | |     url: Url,
26 | |     headers: HeaderMap,
...  |
57 | |     error: Option<String>,
58 | | }
   | |_^
   |
   = help: consider using a state machine or refactoring bools into two-variant enums
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/http/request.rs:232:37
    |
232 |     pub fn method(mut self, method: Method) -> Self {
    |                                     ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
232 |     pub fn method(mut self, method: &Method) -> Self {
    |                                     +

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:232:5
    |
232 | /     pub fn method(mut self, method: Method) -> Self {
233 | |         self.method = match method {
234 | |             Method::GET => HttpMethod::Get,
235 | |             Method::POST => HttpMethod::Post,
...   |
245 | |         self
246 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: these match arms have identical bodies
   --> packages/client/src/http/request.rs:234:13
    |
234 |             Method::GET => HttpMethod::Get,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
243 |             _ => HttpMethod::Get, // Default fallback
    |             ^^^^^^^^^^^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
234 -             Method::GET => HttpMethod::Get,
    |

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:249:5
    |
249 | /     pub fn uri<U: Into<String>>(mut self, uri: U) -> Self {
250 | |         self.uri = Some(uri.into());
251 | |         self
252 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:255:5
    |
255 | /     pub fn headers(mut self, headers: HeaderMap) -> Self {
256 | |         self.headers = headers;
257 | |         self
258 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: docs for function which may panic missing `# Panics` section
   --> packages/client/src/http/request.rs:261:5
    |
261 |     pub fn build(self) -> HttpRequest {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> packages/client/src/http/request.rs:270:21
    |
270 |                     url::Url::parse("http://localhost/").expect("localhost URL must parse")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc
    = note: `#[warn(clippy::missing_panics_doc)]` implied by `#[warn(clippy::pedantic)]`

warning: docs for function which may panic missing `# Panics` section
   --> packages/client/src/http/request.rs:348:5
    |
348 |     pub fn get<U: TryInto<Url>>(url: U) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> packages/client/src/http/request.rs:354:17
    |
354 |                 url::Url::parse("http://localhost/").expect("localhost URL must parse")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> packages/client/src/http/request.rs:364:5
    |
364 |     pub fn post<U: TryInto<Url>>(url: U) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> packages/client/src/http/request.rs:369:17
    |
369 |                 url::Url::parse("http://localhost/").expect("localhost URL must parse")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> packages/client/src/http/request.rs:379:5
    |
379 |     pub fn put<U: TryInto<Url>>(url: U) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> packages/client/src/http/request.rs:384:17
    |
384 |                 url::Url::parse("http://localhost/").expect("localhost URL must parse")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> packages/client/src/http/request.rs:394:5
    |
394 |     pub fn delete<U: TryInto<Url>>(url: U) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> packages/client/src/http/request.rs:399:17
    |
399 |                 url::Url::parse("http://localhost/").expect("localhost URL must parse")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> packages/client/src/http/request.rs:409:5
    |
409 |     pub fn patch<U: TryInto<Url>>(url: U) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> packages/client/src/http/request.rs:414:17
    |
414 |                 url::Url::parse("http://localhost/").expect("localhost URL must parse")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> packages/client/src/http/request.rs:424:5
    |
424 |     pub fn head<U: TryInto<Url>>(url: U) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> packages/client/src/http/request.rs:429:17
    |
429 |                 url::Url::parse("http://localhost/").expect("localhost URL must parse")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> packages/client/src/http/request.rs:439:5
    |
439 |     pub fn options<U: TryInto<Url>>(url: U) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> packages/client/src/http/request.rs:444:17
    |
444 |                 url::Url::parse("http://localhost/").expect("localhost URL must parse")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:498:5
    |
498 | /     pub fn with_stream_id(mut self, stream_id: u64) -> Self {
499 | |         self.stream_id = Some(stream_id);
500 | |         self
501 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:581:5
    |
581 | /     pub fn json<T: serde::Serialize>(mut self, json: &T) -> Self {
582 | |         match serde_json::to_value(json) {
583 | |             Ok(value) => {
584 | |                 self.body = Some(RequestBody::Json(value));
...   |
596 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:600:5
    |
600 | /     pub fn form(mut self, form: HashMap<String, String>) -> Self {
601 | |         self.body = Some(RequestBody::Form(form));
602 | |         self.headers.insert(
603 | |             http::header::CONTENT_TYPE,
...   |
606 | |         self
607 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:611:5
    |
611 | /     pub fn multipart(mut self, fields: Vec<MultipartField>) -> Self {
612 | |         self.body = Some(RequestBody::Multipart(fields));
613 | |         // Content-Type with boundary will be set during serialization
614 | |         self
615 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:619:5
    |
619 | /     pub fn body_stream(mut self, stream: AsyncStream<HttpChunk, 1024>) -> Self {
620 | |         self.body = Some(RequestBody::Stream(stream));
621 | |         self
622 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:626:5
    |
626 | /     pub fn with_timeout(mut self, timeout: Duration) -> Self {
627 | |         self.timeout = Some(timeout);
628 | |         self
629 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:633:5
    |
633 | /     pub fn with_retry_attempts(mut self, attempts: u32) -> Self {
634 | |         self.retry_attempts = Some(attempts);
635 | |         self
636 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:640:5
    |
640 | /     pub fn cors(mut self, enable: bool) -> Self {
641 | |         self.cors = enable;
642 | |         self
643 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:647:5
    |
647 | /     pub fn follow_redirects(mut self, follow: bool) -> Self {
648 | |         self.follow_redirects = follow;
649 | |         self
650 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:654:5
    |
654 | /     pub fn max_redirects(mut self, max: u32) -> Self {
655 | |         self.max_redirects = max;
656 | |         self
657 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:661:5
    |
661 | /     pub fn compress(mut self, enable: bool) -> Self {
662 | |         self.compress = enable;
663 | |         self
664 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:668:5
    |
668 | /     pub fn basic_auth<U, P>(mut self, username: U, password: P) -> Self
669 | |     where
670 | |         U: Into<String>,
671 | |         P: Into<String>,
...   |
677 | |         self
678 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:682:5
    |
682 | /     pub fn bearer_auth<T: Into<String>>(mut self, token: T) -> Self {
683 | |         self.auth = Some(RequestAuth::Bearer(token.into()));
684 | |         self
685 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:689:5
    |
689 | /     pub fn api_key<K, V>(mut self, key: K, value: V) -> Self
690 | |     where
691 | |         K: Into<String>,
692 | |         V: Into<String>,
...   |
698 | |         self
699 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:703:5
    |
703 | /     pub fn custom_auth(mut self, headers: HeaderMap) -> Self {
704 | |         self.auth = Some(RequestAuth::Custom(headers));
705 | |         self
706 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:710:5
    |
710 | /     pub fn user_agent<S: Into<String>>(mut self, user_agent: S) -> Self {
711 | |         self.user_agent = Some(user_agent.into());
712 | |         self
713 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:717:5
    |
717 | /     pub fn referer<S: Into<String>>(mut self, referer: S) -> Self {
718 | |         self.referer = Some(referer.into());
719 | |         self
720 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:724:5
    |
724 | /     pub fn query<K, V>(mut self, params: &[(K, V)]) -> Self
725 | |     where
726 | |         K: AsRef<str>,
727 | |         V: AsRef<str>,
...   |
734 | |         self
735 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:739:5
    |
739 | /     pub fn with_query_params<K, V>(self, params: &[(K, V)]) -> Self
740 | |     where
741 | |         K: AsRef<str>,
742 | |         V: AsRef<str>,
743 | |     {
744 | |         self.query(params)
745 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:749:5
    |
749 | /     pub fn h2_prior_knowledge(mut self, enable: bool) -> Self {
750 | |         self.h2_prior_knowledge = enable;
751 | |         self
752 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/http/request.rs:756:5
    |
756 | /     pub fn h3_alt_svc(mut self, enable: bool) -> Self {
757 | |         self.h3_alt_svc = enable;
758 | |         self
759 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/http/resolver/cache.rs:83:31
   |
83 |     pub fn insert(&self, key: String, entry: DnsCacheEntry) {
   |                               ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider changing the type to
   |
83 -     pub fn insert(&self, key: String, entry: DnsCacheEntry) {
83 +     pub fn insert(&self, key: &str, entry: DnsCacheEntry) {
   |
help: change `key.clone()` to
   |
93 -         self.cache.insert(key.clone(), entry);
93 +         self.cache.insert(key.to_string(), entry);
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/resolver/engine.rs:27:5
   |
27 | /     pub fn resolve_with_timeout_and_retry(
28 | |         &self,
29 | |         hostname: &str,
30 | |         port: u16,
31 | |         timeout: Duration,
32 | |         ipv6_preference: bool,
33 | |     ) -> Result<Vec<SocketAddr>, ResolverError> {
   | |_______________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/resolver/rate_limiter.rs:48:5
   |
48 |     pub fn check_rate_limit(&self, hostname: &str, query_type: &str) -> Result<(), String> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
   --> packages/client/src/http/resolver/rate_limiter.rs:100:36
    |
100 |               let current_requests = match u32::try_from(state.timestamps.len()) {
    |  ____________________________________^
101 | |                 Ok(count) => count,
102 | |                 Err(_) => {
103 | |                     tracing::warn!(
...   |
111 | |             };
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try
    |
100 ~             let current_requests = if let Ok(count) = u32::try_from(state.timestamps.len()) { count } else {
101 +                 tracing::warn!(
102 +                     target: "quyc::rate_limiter",
103 +                     timestamps_len = state.timestamps.len(),
104 +                     max_u32 = u32::MAX,
105 +                     "Timestamp count exceeds u32 limits, clamping to max"
106 +                 );
107 +                 u32::MAX
108 ~             };
    |

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/http/resolver/stats.rs:40:14
   |
40 |             (self.success_count as f64 / total as f64) * 100.0
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/http/resolver/stats.rs:40:42
   |
40 |             (self.success_count as f64 / total as f64) * 100.0
   |                                          ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: docs for function returning `Result` missing `# Errors` section
 --> packages/client/src/http/resolver/validation.rs:6:1
  |
6 | pub fn validate_hostname(hostname: &str) -> Result<(), String> {
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/http/response.rs:253:13
    |
253 |             HttpDownloadChunk::Data { downloaded, total_size, .. } => Some((*downloaded, *total_size)),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
254 |             HttpDownloadChunk::Progress { downloaded, total_size } => Some((*downloaded, *total_size)),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
253 -             HttpDownloadChunk::Data { downloaded, total_size, .. } => Some((*downloaded, *total_size)),
254 -             HttpDownloadChunk::Progress { downloaded, total_size } => Some((*downloaded, *total_size)),
253 +             HttpDownloadChunk::Data { downloaded, total_size, .. } | HttpDownloadChunk::Progress { downloaded, total_size } => Some((*downloaded, *total_size)),
    |

warning: you have declared `#[inline(always)]` on `status`. This is usually a bad idea
   --> packages/client/src/http/response.rs:291:5
    |
291 |     #[inline(always)]
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `status_code`. This is usually a bad idea
   --> packages/client/src/http/response.rs:297:5
    |
297 |     #[inline(always)]
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `set_status`. This is usually a bad idea
   --> packages/client/src/http/response.rs:306:5
    |
306 |     #[inline(always)]
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `version`. This is usually a bad idea
   --> packages/client/src/http/response.rs:312:5
    |
312 |     #[inline(always)]
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `is_success`. This is usually a bad idea
   --> packages/client/src/http/response.rs:318:5
    |
318 |     #[inline(always)]
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `is_error`. This is usually a bad idea
   --> packages/client/src/http/response.rs:323:5
    |
323 |     #[inline(always)]
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `is_redirect`. This is usually a bad idea
   --> packages/client/src/http/response.rs:328:5
    |
328 |     #[inline(always)]
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/response.rs:394:5
    |
394 |     pub fn body_json<T: serde::de::DeserializeOwned>(&self) -> Result<T, serde_json::Error> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/http/response.rs:504:18
    |
504 |         headers: HeaderMap,
    |                  ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
504 |         headers: &HeaderMap,
    |                  +

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/http/response.rs:541:18
    |
541 |         headers: HeaderMap,
    |                  ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
541 |         headers: &HeaderMap,
    |                  +

warning: docs for function returning `Result` missing `# Errors` section
 --> packages/client/src/http/url.rs:7:1
  |
7 | pub fn validate_url(url_str: &str) -> Result<(), crate::error::HttpError> {
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/url.rs:22:1
   |
22 | pub fn normalize_url(url_str: &str) -> Result<String, crate::error::HttpError> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/url.rs:53:1
   |
53 | pub fn parse_url(url_str: &str) -> Result<Url, crate::error::HttpError> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
  --> packages/client/src/http/url.rs:86:9
   |
86 |         "http" | "ws" => 80,
   |         ^^^^^^^^^^^^^^^^^^^
87 |         _ => 80,
   |         ^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
86 -         "http" | "ws" => 80,
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/url.rs:93:1
   |
93 | / pub fn build_url(
94 | |     base: &str,
95 | |     path: &str,
96 | |     params: &[(&str, &str)],
97 | | ) -> Result<String, crate::error::HttpError> {
   | |____________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/jsonpath/buffer/capacity.rs:47:33
   |
47 |             let growth_target = current_capacity as f64 * self.growth_factor;
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/jsonpath/buffer/capacity.rs:48:58
   |
48 |             let growth_target_usize = if growth_target > usize::MAX as f64 {
   |                                                          ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `f64` to `usize` may truncate the value
  --> packages/client/src/jsonpath/buffer/capacity.rs:59:17
   |
59 |                 growth_target as usize
   |                 ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `f64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/buffer/capacity.rs:59:17
   |
59 |                 growth_target as usize
   |                 ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss
   = note: `#[warn(clippy::cast_sign_loss)]` implied by `#[warn(clippy::pedantic)]`

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/jsonpath/buffer/capacity.rs:76:27
   |
76 |         let utilization = size as f64 / capacity as f64;
   |                           ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/jsonpath/buffer/capacity.rs:76:41
   |
76 |         let utilization = size as f64 / capacity as f64;
   |                                         ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/jsonpath/buffer/capacity.rs:95:33
   |
95 |             let shrink_target = size as f64 / self.shrink_threshold;
   |                                 ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/jsonpath/buffer/capacity.rs:96:58
   |
96 |             let shrink_target_usize = if shrink_target > usize::MAX as f64 {
   |                                                          ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `f64` to `usize` may truncate the value
   --> packages/client/src/jsonpath/buffer/capacity.rs:107:17
    |
107 |                 shrink_target as usize
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `f64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/buffer/capacity.rs:107:17
    |
107 |                 shrink_target as usize
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/buffer/core.rs:64:43
   |
64 |     pub fn append_chunk(&mut self, chunk: Bytes) {
   |                                           ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
64 |     pub fn append_chunk(&mut self, chunk: &Bytes) {
   |                                           +

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/buffer/mod.rs:147:32
    |
147 |             utilization_ratio: self.buffer.len() as f64 / self.buffer.capacity() as f64,
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/buffer/mod.rs:147:59
    |
147 |             utilization_ratio: self.buffer.len() as f64 / self.buffer.capacity() as f64,
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:16:5
   |
16 |     pub fn apply_index(arr: &[Value], index: i64, from_end: bool) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this could be rewritten as `let...else`
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:21:13
   |
21 | /             let abs_index = match usize::try_from(-index) {
22 | |                 Ok(idx) => idx,
23 | |                 Err(_) => return Ok(results), // Index too large for usize
24 | |             };
   | |______________^ help: consider writing: `let Ok(abs_index) = usize::try_from(-index) else { return Ok(results) };`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:32:13
   |
32 | /             let index_usize = match usize::try_from(index) {
33 | |                 Ok(idx) => idx,
34 | |                 Err(_) => return Ok(results), // Index too large for usize
35 | |             };
   | |______________^ help: consider writing: `let Ok(index_usize) = usize::try_from(index) else { return Ok(results) };`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:43:13
   |
43 |             index as usize
   |             ^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
43 -             index as usize
43 +             usize::try_from(index)
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:43:13
   |
43 |             index as usize
   |             ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:54:5
   |
54 | /     pub fn apply_slice(
55 | |         arr: &[Value],
56 | |         start: Option<i64>,
57 | |         end: Option<i64>,
58 | |         step: i64,
59 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:66:19
   |
66 |         let len = arr.len() as i64;
   |                   ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:78:38
   |
78 |                     results.push(arr[i as usize].clone());
   |                                      ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
78 -                     results.push(arr[i as usize].clone());
78 +                     results.push(arr[usize::try_from(i)].clone());
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:78:38
   |
78 |                     results.push(arr[i as usize].clone());
   |                                      ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:87:38
   |
87 |                     results.push(arr[i as usize].clone());
   |                                      ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
87 -                     results.push(arr[i as usize].clone());
87 +                     results.push(arr[usize::try_from(i)].clone());
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:87:38
   |
87 |                     results.push(arr[i as usize].clone());
   |                                      ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:120:29
    |
120 |             let abs_index = (-index) as usize;
    |                             ^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
120 -             let abs_index = (-index) as usize;
120 +             let abs_index = usize::try_from((-index));
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:120:29
    |
120 |             let abs_index = (-index) as usize;
    |                             ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:123:13
    |
123 |             (index as usize) <= arr.len()
    |             ^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
123 -             (index as usize) <= arr.len()
123 +             usize::try_from(index) <= arr.len()
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:123:13
    |
123 |             (index as usize) <= arr.len()
    |             ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:125:27
    |
125 |             index >= 0 && (index as usize) < arr.len()
    |                           ^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
125 -             index >= 0 && (index as usize) < arr.len()
125 +             index >= 0 && usize::try_from(index) < arr.len()
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:125:27
    |
125 |             index >= 0 && (index as usize) < arr.len()
    |                           ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:151:5
    |
151 |     pub fn apply_multiple_indices(arr: &[Value], indices: &[i64]) -> JsonPathResult<Vec<Value>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:155:30
    |
155 |             if index >= 0 && (index as usize) < arr.len() {
    |                              ^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
155 -             if index >= 0 && (index as usize) < arr.len() {
155 +             if index >= 0 && usize::try_from(index) < arr.len() {
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:155:30
    |
155 |             if index >= 0 && (index as usize) < arr.len() {
    |                              ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:156:34
    |
156 |                 results.push(arr[index as usize].clone());
    |                                  ^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
156 -                 results.push(arr[index as usize].clone());
156 +                 results.push(arr[usize::try_from(index)].clone());
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:156:34
    |
156 |                 results.push(arr[index as usize].clone());
    |                                  ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:164:5
    |
164 |     pub fn apply_range(arr: &[Value], start: i64, end: i64) -> JsonPathResult<Vec<Value>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:14:5
   |
14 |     pub fn evaluate_array_access(&self, json: &Value, expr: &str) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: stripping a prefix manually
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:26:74
   |
26 |                 let property_results = self.evaluate_property_path(json, &path[2..])?;
   |                                                                          ^^^^^^^^^^
   |
note: the prefix was tested here
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:25:20
   |
25 |             } else if path.starts_with("$.") {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip
   = note: `#[warn(clippy::manual_strip)]` implied by `#[warn(clippy::all)]`
help: try using the `strip_prefix` method
   |
25 ~             } else if let Some(<stripped>) = path.strip_prefix("$.") {
26 ~                 let property_results = self.evaluate_property_path(json, <stripped>)?;
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:67:5
   |
67 | /     pub fn apply_array_selector(
68 | |         &self,
69 | |         arr: &[Value],
70 | |         selector: &str,
71 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:79:33
   |
79 |                 let abs_index = (-index) as usize;
   |                                 ^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
79 -                 let abs_index = (-index) as usize;
79 +                 let abs_index = usize::try_from((-index));
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:79:33
   |
79 |                 let abs_index = (-index) as usize;
   |                                 ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:86:17
   |
86 |                 index as usize
   |                 ^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
86 -                 index as usize
86 +                 usize::try_from(index)
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:86:17
   |
86 |                 index as usize
   |                 ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:107:5
    |
107 | /     pub fn apply_slice_selector(
108 | |         &self,
109 | |         arr: &[Value],
110 | |         selector: &str,
111 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:123:13
    |
123 |             arr.len() as i64
    |             ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:125:47
    |
125 |             parts[1].parse::<i64>().unwrap_or(arr.len() as i64)
    |                                               ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:129:13
    |
129 |             (arr.len() as i64 + start).max(0) as usize
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
129 -             (arr.len() as i64 + start).max(0) as usize
129 +             usize::try_from((arr.len() as i64 + start).max(0))
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:129:13
    |
129 |             (arr.len() as i64 + start).max(0) as usize
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:129:14
    |
129 |             (arr.len() as i64 + start).max(0) as usize
    |              ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:131:13
    |
131 |             start as usize
    |             ^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
131 -             start as usize
131 +             usize::try_from(start)
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:131:13
    |
131 |             start as usize
    |             ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:134:13
    |
134 |             (arr.len() as i64 + end).max(0) as usize
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
134 -             (arr.len() as i64 + end).max(0) as usize
134 +             usize::try_from((arr.len() as i64 + end).max(0))
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:134:13
    |
134 |             (arr.len() as i64 + end).max(0) as usize
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:134:14
    |
134 |             (arr.len() as i64 + end).max(0) as usize
    |              ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:136:13
    |
136 |             (end as usize).min(arr.len())
    |             ^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
136 -             (end as usize).min(arr.len())
136 +             usize::try_from(end).min(arr.len())
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:136:13
    |
136 |             (end as usize).min(arr.len())
    |             ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:147:5
    |
147 | /     pub fn apply_union_selector(
148 | |         &self,
149 | |         arr: &[Value],
150 | |         selector: &str,
151 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:160:37
    |
160 |                     let abs_index = (-index) as usize;
    |                                     ^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
160 -                     let abs_index = (-index) as usize;
160 +                     let abs_index = usize::try_from((-index));
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:160:37
    |
160 |                     let abs_index = (-index) as usize;
    |                                     ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:167:21
    |
167 |                     index as usize
    |                     ^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
167 -                     index as usize
167 +                     usize::try_from(index)
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:167:21
    |
167 |                     index as usize
    |                     ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:180:5
    |
180 |     pub fn evaluate_wildcard(&self, json: &Value) -> JsonPathResult<Vec<Value>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: parameter is only used in recursion
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:197:42
    |
197 |     pub fn collect_all_values_recursive(&self, json: &Value, results: &mut Vec<Value>) {
    |                                          ^^^^
    |
note: parameter used here
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:202:21
    |
202 |                     self.collect_all_values_recursive(value, results);
    |                     ^^^^
...
208 |                     self.collect_all_values_recursive(value, results);
    |                     ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion
    = note: `#[warn(clippy::only_used_in_recursion)]` implied by `#[warn(clippy::all)]`

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:216:5
    |
216 | /     pub fn evaluate_property_with_array_wildcards(
217 | |         &self,
218 | |         json: &Value,
219 | |         expr: &str,
220 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: stripping a prefix manually
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:236:41
    |
236 |             let path_parts: Vec<&str> = before_wildcard[2..].split('.').collect();
    |                                         ^^^^^^^^^^^^^^^^^^^^
    |
note: the prefix was tested here
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:235:16
    |
235 |         } else if before_wildcard.starts_with("$.") {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip
help: try using the `strip_prefix` method
    |
235 ~         } else if let Some(<stripped>) = before_wildcard.strip_prefix("$.") {
236 ~             let path_parts: Vec<&str> = <stripped>.split('.').collect();
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/core.rs:43:5
   |
43 |     pub fn new(expression: &str) -> JsonPathResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/core.rs:55:5
   |
55 |     pub fn evaluate(&self, json: &Value) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/core.rs:73:5
   |
73 | /     pub fn evaluate_with_custom_timeout(
74 | |         &self,
75 | |         json: &Value,
76 | |         timeout_ms: u64,
77 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/engine.rs:25:5
   |
25 |     pub fn new(expression: &str) -> JsonPathResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/engine.rs:37:5
   |
37 |     pub fn evaluate(&self, json: &Value) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: parameter is only used in recursion
  --> packages/client/src/jsonpath/core_evaluator/descendant_operations.rs:19:34
   |
19 |     fn collect_descendants_impl(&self, json: &Value, descendants: &mut Vec<Value>) {
   |                                  ^^^^
   |
note: parameter used here
  --> packages/client/src/jsonpath/core_evaluator/descendant_operations.rs:27:21
   |
27 |                     self.collect_descendants_impl(value, descendants);
   |                     ^^^^
...
32 |                     self.collect_descendants_impl(value, descendants);
   |                     ^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/descendant_operations.rs:42:5
   |
42 | /     pub fn apply_selector_to_descendants(
43 | |         &self,
44 | |         json: &Value,
45 | |         selector: &JsonSelector,
46 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/descendant_operations.rs:59:5
   |
59 | /     pub fn apply_selectors_recursively(
60 | |         &self,
61 | |         json: &Value,
62 | |         selectors: &[JsonSelector],
63 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/core_types.rs:27:5
   |
27 |     pub fn new(expression: &str) -> JsonPathResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/core_evaluator/evaluator/descendant_operations/collection.rs:72:23
   |
72 |         current_path: String,
   |                       ^^^^^^ help: consider changing the type to: `&str`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/descendant_operations/core.rs:16:5
   |
16 | /     pub fn apply_descendant_segment_recursive(
17 | |         node: &Value,
18 | |         remaining_selectors: &[JsonSelector],
19 | |         results: &mut Vec<Value>,
20 | |     ) -> JsonPathResult<()> {
   | |___________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/evaluation_engine.rs:17:5
   |
17 | /     pub fn evaluate_expression(
18 | |         evaluator: &CoreJsonPathEvaluator,
19 | |         json: &Value,
20 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/evaluator/evaluation_engine.rs:99:5
    |
 99 | /     pub fn apply_selector_to_value(
100 | |         value: &Value,
101 | |         selector: &JsonSelector,
102 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/evaluator/evaluation_engine.rs:108:5
    |
108 | /     pub fn evaluate_multiple(
109 | |         expressions: &[&str],
110 | |         json: &Value,
111 | |     ) -> JsonPathResult<Vec<Vec<Value>>> {
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/property_operations/core.rs:14:5
   |
14 |     pub fn evaluate_property_path(json: &Value, path: &str) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/property_operations/extensions.rs:13:5
   |
13 |     pub fn evaluate_property_path(&self, json: &Value, path: &str) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:37:5
   |
37 | /     pub fn evaluate_with_timeout(
38 | |         evaluator: &CoreJsonPathEvaluator,
39 | |         json: &Value,
40 | |         config: Option<TimeoutConfig>,
41 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:130:23
    |
130 |         complexity += expression.matches("..").count() as u32 * 50; // Recursive descent
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
130 -         complexity += expression.matches("..").count() as u32 * 50; // Recursive descent
130 +         complexity += u32::try_from(expression.matches("..").count()) * 50; // Recursive descent
    |

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:131:23
    |
131 |         complexity += expression.matches('*').count() as u32 * 10; // Wildcard
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
131 -         complexity += expression.matches('*').count() as u32 * 10; // Wildcard
131 +         complexity += u32::try_from(expression.matches('*').count()) * 10; // Wildcard
    |

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:132:23
    |
132 |         complexity += expression.matches("[?").count() as u32 * 20; // Filters
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
132 -         complexity += expression.matches("[?").count() as u32 * 20; // Filters
132 +         complexity += u32::try_from(expression.matches("[?").count()) * 20; // Filters
    |

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:133:23
    |
133 |         complexity += expression.matches("[:").count() as u32 * 5; // Slices
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
133 -         complexity += expression.matches("[:").count() as u32 * 5; // Slices
133 +         complexity += u32::try_from(expression.matches("[:").count()) * 5; // Slices
    |

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:134:23
    |
134 |         complexity += expression.matches('[').count() as u32 * 2; // Array access
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
134 -         complexity += expression.matches('[').count() as u32 * 2; // Array access
134 +         complexity += u32::try_from(expression.matches('[').count()) * 2; // Array access
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/mod.rs:22:5
   |
22 |     pub fn evaluate(&self, json: &serde_json::Value) -> JsonPathResult<Vec<serde_json::Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/mod.rs:28:5
   |
28 | /     pub fn evaluate_with_config(
29 | |         &self,
30 | |         json: &serde_json::Value,
31 | |         config: TimeoutConfig,
32 | |     ) -> JsonPathResult<Vec<serde_json::Value>> {
   | |_______________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: unused `self` argument
  --> packages/client/src/jsonpath/core_evaluator/filter_evaluation.rs:42:9
   |
42 |         &self,
   |         ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self
   = note: `#[warn(clippy::unused_self)]` implied by `#[warn(clippy::pedantic)]`

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/core_evaluator/filter_evaluation.rs:41:5
   |
41 | /     fn evaluate_filter_on_item(
42 | |         &self,
43 | |         item: &Value,
44 | |         filter_expr: &str,
45 | |         _index: usize,
46 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
   = note: `#[warn(clippy::unnecessary_wraps)]` implied by `#[warn(clippy::pedantic)]`
help: remove `Result` from the return type...
   |
46 -     ) -> JsonPathResult<bool> {
46 +     ) -> bool {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
52 ~                 return obj.contains_key(property_name);
53 |             }
...
62 |                     // Compare entire item
63 ~                     return item.as_str() == Some(right);
64 |                 } else if left.starts_with("@.") {
...
68 |                         && let Some(prop_value) = obj.get(prop_name) {
69 ~                             return prop_value.as_str() == Some(right);
70 |                         }
...
75 |         // Default: no match
76 ~         false
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/property_operations.rs:11:5
   |
11 |     pub fn evaluate_property_path(&self, json: &Value, path: &str) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: parameter is only used in recursion
  --> packages/client/src/jsonpath/core_evaluator/property_operations.rs:42:38
   |
42 |     fn find_property_recursive_impl(&self, json: &Value, property: &str, results: &mut Vec<Value>) {
   |                                      ^^^^
   |
note: parameter used here
  --> packages/client/src/jsonpath/core_evaluator/property_operations.rs:51:21
   |
51 |                     self.find_property_recursive_impl(value, property, results);
   |                     ^^^^
...
57 |                     self.find_property_recursive_impl(value, property, results);
   |                     ^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/recursive_descent.rs:18:5
   |
18 | /     pub fn apply_recursive_descent(
19 | |         value: &Value,
20 | |         remaining_selectors: &[crate::jsonpath::ast::JsonSelector],
21 | |         max_depth: usize,
22 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:12:5
   |
12 | /     pub fn apply_selector_to_value(
13 | |         &self,
14 | |         value: &Value,
15 | |         selector: &JsonSelector,
16 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:39:35
   |
39 |                         let len = arr.len() as i64;
   |                                   ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:47:49
   |
47 |                         if actual_index >= 0 && (actual_index as usize) < arr.len() {
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
47 -                         if actual_index >= 0 && (actual_index as usize) < arr.len() {
47 +                         if actual_index >= 0 && usize::try_from(actual_index) < arr.len() {
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:47:49
   |
47 |                         if actual_index >= 0 && (actual_index as usize) < arr.len() {
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:48:41
   |
48 | ...                   Ok(vec![arr[actual_index as usize].clone()])
   |                                   ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
48 -                             Ok(vec![arr[actual_index as usize].clone()])
48 +                             Ok(vec![arr[usize::try_from(actual_index)].clone()])
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:48:41
   |
48 | ...                   Ok(vec![arr[actual_index as usize].clone()])
   |                                   ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:60:35
   |
60 |                         let len = arr.len() as i64;
   |                                   ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:80:48
   |
80 | ...                   if current >= 0 && (current as usize) < arr.len() {
   |                                          ^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
80 -                             if current >= 0 && (current as usize) < arr.len() {
80 +                             if current >= 0 && usize::try_from(current) < arr.len() {
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:80:48
   |
80 | ...                   if current >= 0 && (current as usize) < arr.len() {
   |                                          ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:81:50
   |
81 | ...                   results.push(arr[current as usize].clone());
   |                                        ^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
81 -                                 results.push(arr[current as usize].clone());
81 +                                 results.push(arr[usize::try_from(current)].clone());
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:81:50
   |
81 | ...                   results.push(arr[current as usize].clone());
   |                                        ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selector_engine.rs:21:5
   |
21 |     pub fn apply_selector(value: &Value, selector: &JsonSelector) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/selector_engine.rs:146:5
    |
146 | /     pub fn apply_selectors(
147 | |         initial_value: &Value,
148 | |         selectors: &[JsonSelector],
149 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: match expression looks like `matches!` macro
   --> packages/client/src/jsonpath/core_evaluator/selector_engine.rs:183:9
    |
183 | /         match selector {
184 | |             JsonSelector::RecursiveDescent => true,
185 | |             JsonSelector::Wildcard => true,
186 | |             JsonSelector::Filter { .. } => true,
...   |
189 | |             _ => false,
190 | |         }
    | |_________^ help: try: `matches!(selector, JsonSelector::RecursiveDescent | JsonSelector::Wildcard | JsonSelector::Filter { .. } | JsonSelector::Slice { .. } | JsonSelector::Union { .. })`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
    = note: `#[warn(clippy::match_like_matches_macro)]` implied by `#[warn(clippy::all)]`

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/core_evaluator/selector_engine.rs:197:13
    |
197 |             JsonSelector::Root => 1,
    |             ^^^^^^^^^^^^^^^^^^^^^^^
198 |             JsonSelector::Child { .. } => 1,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
199 |             JsonSelector::Index { .. } => 1,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
197 -             JsonSelector::Root => 1,
198 -             JsonSelector::Child { .. } => 1,
197 +             JsonSelector::Root | JsonSelector::Child { .. } | JsonSelector::Index { .. } => 1,
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:14:1
   |
14 | / pub fn apply_slice_to_array(
15 | |     array: &Value,
16 | |     start: Option<i64>,
17 | |     end: Option<i64>,
18 | |     step: Option<i64>,
19 | | ) -> JsonPathResult<Vec<Value>> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:22:23
   |
22 |             let len = arr.len() as i64;
   |                       ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:52:42
   |
52 |                         results.push(arr[i as usize].clone());
   |                                          ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
52 -                         results.push(arr[i as usize].clone());
52 +                         results.push(arr[usize::try_from(i)].clone());
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:52:42
   |
52 |                         results.push(arr[i as usize].clone());
   |                                          ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:60:42
   |
60 |                         results.push(arr[i as usize].clone());
   |                                          ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
60 -                         results.push(arr[i as usize].clone());
60 +                         results.push(arr[usize::try_from(i)].clone());
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:60:42
   |
60 |                         results.push(arr[i as usize].clone());
   |                                          ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:83:29
   |
83 |             let abs_index = (-index) as usize;
   |                             ^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
83 -             let abs_index = (-index) as usize;
83 +             let abs_index = usize::try_from((-index));
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:83:29
   |
83 |             let abs_index = (-index) as usize;
   |                             ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:91:16
   |
91 |             if (index as usize) <= arr.len() {
   |                ^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
91 -             if (index as usize) <= arr.len() {
91 +             if usize::try_from(index) <= arr.len() {
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:91:16
   |
91 |             if (index as usize) <= arr.len() {
   |                ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:92:29
   |
92 |                 arr.len() - (index as usize)
   |                             ^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
92 -                 arr.len() - (index as usize)
92 +                 arr.len() - usize::try_from(index)
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:92:29
   |
92 |                 arr.len() - (index as usize)
   |                             ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:98:13
   |
98 |             index as usize
   |             ^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
98 -             index as usize
98 +             usize::try_from(index)
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:98:13
   |
98 |             index as usize
   |             ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:109:5
    |
109 | /     pub fn apply_slice_to_array(
110 | |         &self,
111 | |         arr: &[Value],
112 | |         start: Option<i64>,
113 | |         end: Option<i64>,
114 | |         step: Option<i64>,
115 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:116:19
    |
116 |         let len = arr.len() as i64;
    |                   ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:143:30
    |
143 |                 if i >= 0 && (i as usize) < arr.len() {
    |                              ^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
143 -                 if i >= 0 && (i as usize) < arr.len() {
143 +                 if i >= 0 && usize::try_from(i) < arr.len() {
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:143:30
    |
143 |                 if i >= 0 && (i as usize) < arr.len() {
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:144:38
    |
144 |                     results.push(arr[i as usize].clone());
    |                                      ^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
144 -                     results.push(arr[i as usize].clone());
144 +                     results.push(arr[usize::try_from(i)].clone());
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:144:38
    |
144 |                     results.push(arr[i as usize].clone());
    |                                      ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:151:30
    |
151 |                 if i >= 0 && (i as usize) < arr.len() {
    |                              ^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
151 -                 if i >= 0 && (i as usize) < arr.len() {
151 +                 if i >= 0 && usize::try_from(i) < arr.len() {
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:151:30
    |
151 |                 if i >= 0 && (i as usize) < arr.len() {
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:152:38
    |
152 |                     results.push(arr[i as usize].clone());
    |                                      ^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
152 -                     results.push(arr[i as usize].clone());
152 +                     results.push(arr[usize::try_from(i)].clone());
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:152:38
    |
152 |                     results.push(arr[i as usize].clone());
    |                                      ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:172:33
    |
172 |                 let abs_index = (-index) as usize;
    |                                 ^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
172 -                 let abs_index = (-index) as usize;
172 +                 let abs_index = usize::try_from((-index));
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:172:33
    |
172 |                 let abs_index = (-index) as usize;
    |                                 ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:180:20
    |
180 |                 if (index as usize) <= arr.len() {
    |                    ^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
180 -                 if (index as usize) <= arr.len() {
180 +                 if usize::try_from(index) <= arr.len() {
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:180:20
    |
180 |                 if (index as usize) <= arr.len() {
    |                    ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:181:33
    |
181 |                     arr.len() - (index as usize)
    |                                 ^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
181 -                     arr.len() - (index as usize)
181 +                     arr.len() - usize::try_from(index)
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:181:33
    |
181 |                     arr.len() - (index as usize)
    |                                 ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:187:17
    |
187 |                 index as usize
    |                 ^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
187 -                 index as usize
187 +                 usize::try_from(index)
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:187:17
    |
187 |                 index as usize
    |                 ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:206:23
    |
206 |             let len = arr.len() as i64;
    |                       ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:231:34
    |
231 |                     if i >= 0 && (i as usize) < arr.len() {
    |                                  ^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
231 -                     if i >= 0 && (i as usize) < arr.len() {
231 +                     if i >= 0 && usize::try_from(i) < arr.len() {
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:231:34
    |
231 |                     if i >= 0 && (i as usize) < arr.len() {
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:232:43
    |
232 |                         results.push(&arr[i as usize]);
    |                                           ^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
232 -                         results.push(&arr[i as usize]);
232 +                         results.push(&arr[usize::try_from(i)]);
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:232:43
    |
232 |                         results.push(&arr[i as usize]);
    |                                           ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:239:34
    |
239 |                     if i >= 0 && (i as usize) < arr.len() {
    |                                  ^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
239 -                     if i >= 0 && (i as usize) < arr.len() {
239 +                     if i >= 0 && usize::try_from(i) < arr.len() {
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:239:34
    |
239 |                     if i >= 0 && (i as usize) < arr.len() {
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:240:43
    |
240 |                         results.push(&arr[i as usize]);
    |                                           ^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
240 -                         results.push(&arr[i as usize]);
240 +                         results.push(&arr[usize::try_from(i)]);
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:240:43
    |
240 |                         results.push(&arr[i as usize]);
    |                                           ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selectors/core.rs:16:5
   |
16 | /     pub fn apply_selector_to_value(
17 | |         &self,
18 | |         value: &Value,
19 | |         selector: &JsonSelector,
20 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: parameter is only used in recursion
  --> packages/client/src/jsonpath/core_evaluator/selectors/core.rs:70:43
   |
70 |     pub fn collect_all_descendants_owned(&self, node: &Value, results: &mut Vec<Value>) {
   |                                           ^^^^
   |
note: parameter used here
  --> packages/client/src/jsonpath/core_evaluator/selectors/core.rs:75:21
   |
75 |                     self.collect_all_descendants_owned(value, results);
   |                     ^^^^
...
81 |                     self.collect_all_descendants_owned(value, results);
   |                     ^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion

warning: parameter is only used in recursion
   --> packages/client/src/jsonpath/core_evaluator/selectors/core.rs:102:41
    |
102 |     pub fn collect_all_descendants<'a>(&self, node: &'a Value, results: &mut Vec<&'a Value>) {
    |                                         ^^^^
    |
note: parameter used here
   --> packages/client/src/jsonpath/core_evaluator/selectors/core.rs:107:21
    |
107 |                     self.collect_all_descendants(value, results);
    |                     ^^^^
...
113 |                     self.collect_all_descendants(value, results);
    |                     ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selectors/filters.rs:16:1
   |
16 | / pub fn apply_filter_selector_owned(
17 | |     evaluator: &CoreJsonPathEvaluator,
18 | |     node: &Value,
19 | |     expression: &FilterExpression,
20 | |     results: &mut Vec<Value>,
21 | | ) -> JsonPathResult<()> {
   | |_______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selectors/filters.rs:79:5
   |
79 | /     pub fn apply_filter_selector<'a>(
80 | |         &self,
81 | |         node: &'a Value,
82 | |         expression: &FilterExpression,
83 | |         results: &mut Vec<&'a Value>,
84 | |     ) -> JsonPathResult<()> {
   | |___________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/timeout_protection.rs:20:5
   |
20 |     pub fn evaluate_with_timeout(expression: &str, json: &Value) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/timeout_protection.rs:25:5
   |
25 | /     pub fn evaluate_with_custom_timeout(
26 | |         expression: &str,
27 | |         json: &Value,
28 | |         timeout_ms: u64,
29 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/byte_processor/trait_impl.rs:26:5
   |
26 |     fn read_next_byte(&mut self) -> JsonPathResult<Option<u8>>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/byte_processor/trait_impl.rs:27:5
   |
27 |     fn process_json_byte(&mut self, byte: u8) -> JsonPathResult<JsonProcessResult>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/byte_processor/trait_impl.rs:28:5
   |
28 |     fn skip_whitespace(&mut self) -> JsonPathResult<()>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/byte_processor/trait_impl.rs:29:5
   |
29 |     fn read_string(&mut self) -> JsonPathResult<String>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/byte_processor/trait_impl.rs:30:5
   |
30 |     fn read_number(&mut self) -> JsonPathResult<f64>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/core/byte_processing.rs:11:5
   |
11 |     pub fn read_next_byte(&mut self) -> crate::jsonpath::error::JsonPathResult<Option<u8>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/core/deserialization.rs:11:5
   |
11 | /     pub fn deserialize_current_object(
12 | |         &mut self,
13 | |     ) -> crate::jsonpath::error::JsonPathResult<Option<T>> {
   | |__________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/core/processing.rs:16:5
   |
16 | /     pub fn process_json_byte(
17 | |         &mut self,
18 | |         byte: u8,
19 | |     ) -> crate::jsonpath::error::JsonPathResult<super::super::processor::JsonProcessResult> {
   | |___________________________________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/deserializer/core/processing.rs:159:13
    |
159 |             b',' => Ok(super::super::processor::JsonProcessResult::Continue),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
160 |             _ => Ok(super::super::processor::JsonProcessResult::Continue),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
159 -             b',' => Ok(super::super::processor::JsonProcessResult::Continue),
    |

warning: this function's return value is unnecessarily wrapped by `Result`
   --> packages/client/src/jsonpath/deserializer/core/processing.rs:165:5
    |
165 | /     pub(super) fn process_array_byte(
166 | |         &mut self,
167 | |         byte: u8,
168 | |     ) -> crate::jsonpath::error::JsonPathResult<super::super::processor::JsonProcessResult> {
    | |___________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
168 -     ) -> crate::jsonpath::error::JsonPathResult<super::super::processor::JsonProcessResult> {
168 +     ) -> jsonpath::deserializer::processor::core::JsonProcessResult {
    |
help: ...and then remove the surrounding `Ok()` from returning expressions
    |
171 ~                 super::super::processor::JsonProcessResult::Continue
172 |             }
...
178 |                     self.object_nesting = 1;
179 ~                     super::super::processor::JsonProcessResult::Continue
180 |                 } else {
181 ~                     super::super::processor::JsonProcessResult::Continue
182 |                 }
...
188 |                 self.current_array_index = 0;
189 ~                 super::super::processor::JsonProcessResult::Continue
190 |             }
...
200 |                     }
201 ~                     return result;
202 |                 }
...
212 |                     self.transition_to_complete();
213 ~                     super::super::processor::JsonProcessResult::Complete
214 |                 } else {
215 ~                     super::super::processor::JsonProcessResult::Continue
216 |                 }
...
220 |                     // Don't add the comma to the object buffer - it's a separator, not part of the object
221 ~                     super::super::processor::JsonProcessResult::ObjectFound
222 |                 } else {
223 |                     self.current_array_index = self.current_array_index.saturating_add(1);
224 ~                     super::super::processor::JsonProcessResult::Continue
225 |                 }
...
230 |                 }
231 ~                 super::super::processor::JsonProcessResult::Continue
    |

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/deserializer/core/types.rs:241:26
    |
241 |         let match_rate = self.evaluation_stats.matches_found as f64 / self.evaluation_stats.nodes_processed as f64;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/deserializer/core/types.rs:241:71
    |
241 |         let match_rate = self.evaluation_stats.matches_found as f64 / self.evaluation_stats.nodes_processed as f64;
    |                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/deserializer/core/types.rs:243:20
    |
243 |             1.0 - (self.evaluation_stats.backtrack_operations as f64 / self.evaluation_stats.nodes_processed as f64)
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/deserializer/core/types.rs:243:72
    |
243 |             1.0 - (self.evaluation_stats.backtrack_operations as f64 / self.evaluation_stats.nodes_processed as f64)
    |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: clamp-like pattern without using clamp function
   --> packages/client/src/jsonpath/deserializer/core/types.rs:248:9
    |
248 |         (match_rate * backtrack_penalty).max(0.1).min(1.0)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `(match_rate * backtrack_penalty).clamp(0.1, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp
    = note: `#[warn(clippy::manual_clamp)]` implied by `#[warn(clippy::all)]`

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/deserializer/core/types.rs:262:5
    |
262 | /     pub fn enter_recursive_descent(
263 | |         &mut self, 
264 | |         origin_path: String, 
265 | |         triggering_selector: usize
266 | |     ) -> Result<(), JsonPathError> {
    | |__________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:336:47
    |
336 |                 PathSegment::Property(key) => path.push_str(&format!(".{key}")),
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string
    = note: `#[warn(clippy::format_push_string)]` implied by `#[warn(clippy::pedantic)]`

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:337:49
    |
337 |                 PathSegment::ArrayIndex(idx) => path.push_str(&format!("[{idx}]")),
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:340:53
    |
340 |                 PathSegment::FilterMatch(filter) => path.push_str(&format!("[?{filter}]")),
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:346:43
    |
346 |             PathSegment::Property(key) => path.push_str(&format!(".{key}")),
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:347:45
    |
347 |             PathSegment::ArrayIndex(idx) => path.push_str(&format!("[{idx}]")),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:350:49
    |
350 |             PathSegment::FilterMatch(filter) => path.push_str(&format!("[?{filter}]")),
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/deserializer/core/types.rs:433:5
    |
433 |     pub fn optimize_buffer_capacity(&mut self) -> Result<(), JsonPathError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/deserializer/core/types.rs:491:33
    |
491 |             buffer_utilization: self.buffer.len() as f64 / self.buffer.capacity() as f64,
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/deserializer/core/types.rs:491:60
    |
491 |             buffer_utilization: self.buffer.len() as f64 / self.buffer.capacity() as f64,
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/deserializer/core/types.rs:494:32
    |
494 |             selector_progress: self.streaming_state.current_selector_index as f64 / self.streaming_state.max_selector_count as f64,
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/deserializer/core/types.rs:494:85
    |
494 |             selector_progress: self.streaming_state.current_selector_index as f64 / self.streaming_state.max_selector_count as f64,
    |                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/jsonpath/deserializer/core/types.rs:789:56
    |
789 |     fn process_json_chunk_owned(&mut self, chunk_data: Vec<u8>) -> Result<ProcessingResult, JsonPathError> {
    |                                                        ^^^^^^^ help: consider changing the type to: `&[u8]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/jsonpath/deserializer/core/types.rs:873:51
    |
873 |     fn apply_processing_result(&mut self, result: ProcessingResult) {
    |                                                   ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
873 |     fn apply_processing_result(&mut self, result: &ProcessingResult) {
    |                                                   +

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/deserializer/core/types.rs:938:82
    |
938 |                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
    |                                                                                  ^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
938 -                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
938 +                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == usize::try_from(*index))
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/deserializer/core/types.rs:938:82
    |
938 |                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
    |                                                                                  ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1008:82
     |
1008 |                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
     |                                                                                  ^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1008 -                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
1008 +                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == usize::try_from(*index))
     |

warning: casting `i64` to `usize` may lose the sign of the value
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1008:82
     |
1008 |                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
     |                                                                                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: these match arms have identical bodies
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1041:17
     |
1041 | /                 crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
1042 | |                     // Successfully advanced to next selector
1043 | |                 }
     | |_________________^
1044 | /                 crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
1045 | |                     // Reached end of expression
1046 | |                 }
     | |_________________^
     |
     = help: if this is unintentional make the arms return different values
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
     |
1041 -                 crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
1042 -                     // Successfully advanced to next selector
1043 -                 }
1044 -                 crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
1041 +                 crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
     |

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1097:21
     |
1097 |                     array_index as i64 == *index
     |                     ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1129:82
     |
1129 |                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
     |                                                                                  ^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1129 -                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
1129 +                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == usize::try_from(*index))
     |

warning: casting `i64` to `usize` may lose the sign of the value
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1129:82
     |
1129 |                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
     |                                                                                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unused `self` argument
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1161:28
     |
1161 |     fn index_matches_slice(&self, index: usize, start: Option<i64>, end: Option<i64>, step: Option<i64>) -> bool {
     |                            ^^^^^
     |
     = help: consider refactoring to an associated function
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1162:20
     |
1162 |         let step = step.unwrap_or(1).max(1) as usize; // Ensure positive step
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1162 -         let step = step.unwrap_or(1).max(1) as usize; // Ensure positive step
1162 +         let step = usize::try_from(step.unwrap_or(1).max(1)); // Ensure positive step
     |

warning: casting `i64` to `usize` may lose the sign of the value
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1162:20
     |
1162 |         let step = step.unwrap_or(1).max(1) as usize; // Ensure positive step
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1163:21
     |
1163 |         let index = index as i64;
     |                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1179:13
     |
1179 |             ((index - start_bound) as usize).is_multiple_of(step)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1179 -             ((index - start_bound) as usize).is_multiple_of(step)
1179 +             usize::try_from(index - start_bound).is_multiple_of(step)
     |

warning: casting `i64` to `usize` may lose the sign of the value
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1179:13
     |
1179 |             ((index - start_bound) as usize).is_multiple_of(step)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be rewritten as `let...else`
  --> packages/client/src/jsonpath/deserializer/iterator.rs:74:13
   |
74 | /             let byte = match self.deserializer.read_next_byte()? {
75 | |                 Some(b) => b,
76 | |                 None => return Ok(None), // No more data available
77 | |             };
   | |______________^ help: consider writing: `let Some(byte) = self.deserializer.read_next_byte()? else { return Ok(None) };`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/deserializer/iterator.rs:91:17
   |
91 | /                 JsonProcessResult::NeedMoreData => {
92 | |                     // Need more bytes to complete parsing
93 | |                     return Ok(None);
94 | |                 }
   | |_________________^
95 | /                 JsonProcessResult::Complete => {
96 | |                     // Processing complete (end of stream)
97 | |                     return Ok(None);
98 | |                 }
   | |_________________^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
91 ~                 JsonProcessResult::NeedMoreData | JsonProcessResult::Complete => {
92 |                     // Need more bytes to complete parsing
93 |                     return Ok(None);
94 |                 }
95 ~                 }
   |

warning: match expression looks like `matches!` macro
  --> packages/client/src/jsonpath/deserializer/path_evaluator.rs:18:9
   |
18 | /         match self.deserializer.path_expression.root_selector() {
19 | |             Some(crate::jsonpath::parser::JsonSelector::Child { .. }) => true,
20 | |             Some(crate::jsonpath::parser::JsonSelector::Filter { .. }) => true,
21 | |             _ => false,
22 | |         }
   | |_________^ help: try: `matches!(self.deserializer.path_expression.root_selector(), Some(crate::jsonpath::parser::JsonSelector::Child { .. }) | Some(crate::jsonpath::parser::JsonSelector::Filter { .. }))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/deserializer/path_evaluator.rs:90:13
   |
90 |             JsonSelector::Child { .. } => self.deserializer.current_depth > 0,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
91 |             JsonSelector::RecursiveDescent => true, // Always matches
92 |             JsonSelector::Wildcard => self.deserializer.current_depth > 0,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
90 ~             JsonSelector::Child { .. } | JsonSelector::Wildcard => self.deserializer.current_depth > 0,
91 |             JsonSelector::RecursiveDescent => true, // Always matches
92 ~             JsonSelector::Index { index, from_end } => {
   |

warning: adding items after statements is confusing, since items exist from the start of the scope
  --> packages/client/src/jsonpath/deserializer/processor/core.rs:60:9
   |
60 |         const MAX_STRING_BYTES: usize = 1024 * 1024; // 1MB limit for JSON strings
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/processor/path_evaluation.rs:22:1
   |
22 | / pub fn evaluate_path_step(
23 | |     expression: &JsonPathExpression,
24 | |     current_path: &[String],
25 | |     property_name: Option<&str>,
26 | |     is_array: bool,
27 | |     _array_index: Option<usize>,
28 | | ) -> JsonPathResult<PathEvaluationResult> {
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/deserializer/processor/state_processors.rs:21:13
   |
21 |             b' ' | b'\t' | b'\n' | b'\r' => JsonProcessResult::Continue, // Skip whitespace
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
45 |             _ => JsonProcessResult::Continue,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
21 -             b' ' | b'\t' | b'\n' | b'\r' => JsonProcessResult::Continue, // Skip whitespace
21 +             // Skip whitespace
   |

warning: this `if` has identical blocks
  --> packages/client/src/jsonpath/deserializer/processor/state_processors.rs:26:52
   |
26 |                   if self.matches_root_object_path() {
   |  ____________________________________________________^
27 | |                     JsonProcessResult::Continue
28 | |                 } else {
   | |_________________^
   |
note: same as this
  --> packages/client/src/jsonpath/deserializer/processor/state_processors.rs:28:24
   |
28 |                   } else {
   |  ________________________^
29 | |                     JsonProcessResult::Continue
30 | |                 }
   | |_________________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else
   = note: `#[warn(clippy::if_same_then_else)]` implied by `#[warn(clippy::all)]`

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/deserializer/processor/state_processors.rs:50:5
   |
50 | /     pub(super) fn process_navigating_byte(
51 | |         &mut self,
52 | |         byte: u8,
53 | |     ) -> JsonPathResult<JsonProcessResult> {
   | |__________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
53 -     ) -> JsonPathResult<JsonProcessResult> {
53 +     ) -> jsonpath::deserializer::processor::core::JsonProcessResult {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
60 ~             b' ' | b'\t' | b'\n' | b'\r' => JsonProcessResult::Continue, // Skip whitespace
61 |             b'{' => {
...
73 |                     self.deserializer.object_buffer.push(byte);
74 ~                     JsonProcessResult::Continue
75 |                 } else {
76 ~                     JsonProcessResult::Continue
77 |                 }
...
95 |                 }
96 ~                 JsonProcessResult::Continue
97 |             }
...
108|                     self.deserializer.transition_to_complete();
109~                     JsonProcessResult::Complete
110|                 } else {
111~                     JsonProcessResult::Continue
112|                 }
...
118|                     self.deserializer.transition_to_complete();
119~                     JsonProcessResult::Complete
120|                 } else {
121~                     JsonProcessResult::Continue
122|                 }
123|             }
124~             b',' => JsonProcessResult::Continue, // Array/object separator
125~             _ => JsonProcessResult::Continue,
   |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/deserializer/processor/state_processors.rs:60:13
    |
 60 |             b' ' | b'\t' | b'\n' | b'\r' => Ok(JsonProcessResult::Continue), // Skip whitespace
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
124 |             b',' => Ok(JsonProcessResult::Continue), // Array/object separator
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
125 |             _ => Ok(JsonProcessResult::Continue),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arms
    |
 60 ~             // Skip whitespace
 61 |             b'{' => {
...
123 |             }
124 ~             // Array/object separator
    |

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/deserializer/recursive.rs:102:58
    |
102 | ...   segment: PathSegment::ArrayIndex(self.deserializer.current_array_index.max(0) as usize), // PRODUCTION-GRADE: Use actual array inde...
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
102 -                         segment: PathSegment::ArrayIndex(self.deserializer.current_array_index.max(0) as usize), // PRODUCTION-GRADE: Use actual array index, not depth
102 +                         segment: PathSegment::ArrayIndex(usize::try_from(self.deserializer.current_array_index.max(0))), // PRODUCTION-GRADE: Use actual array index, not depth
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/deserializer/recursive.rs:102:58
    |
102 | ...   segment: PathSegment::ArrayIndex(self.deserializer.current_array_index.max(0) as usize), // PRODUCTION-GRADE: Use actual array inde...
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/error/conversions/helpers.rs:50:16
   |
50 |         error: serde_json::Error,
   |                ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
50 |         error: &serde_json::Error,
   |                +

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/error/conversions/helpers.rs:64:40
   |
64 |     pub fn from_io_with_context(error: std::io::Error, state: &str) -> Self {
   |                                        ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
64 |     pub fn from_io_with_context(error: &std::io::Error, state: &str) -> Self {
   |                                        +

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/comparison.rs:18:5
   |
18 | /     pub fn compare_values(
19 | |         left: &FilterValue,
20 | |         op: ComparisonOp,
21 | |         right: &FilterValue,
22 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/comparison.rs:29:5
   |
29 | /     pub fn compare_values_with_context(
30 | |         left: &FilterValue,
31 | |         op: ComparisonOp,
32 | |         right: &FilterValue,
33 | |         _existing_properties: &HashSet<String>,
34 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function has too many lines (108/100)
  --> packages/client/src/jsonpath/filter/comparison.rs:29:5
   |
29 | /     pub fn compare_values_with_context(
30 | |         left: &FilterValue,
31 | |         op: ComparisonOp,
32 | |         right: &FilterValue,
33 | |         _existing_properties: &HashSet<String>,
34 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines
   = note: `#[warn(clippy::too_many_lines)]` implied by `#[warn(clippy::pedantic)]`

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:120:13
    |
120 |             (FilterValue::Missing, _) => Ok(false),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
121 |             (_, FilterValue::Missing) => Ok(false),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
120 -             (FilterValue::Missing, _) => Ok(false),
121 -             (_, FilterValue::Missing) => Ok(false),
120 +             (FilterValue::Missing, _) | (_, FilterValue::Missing) => Ok(false),
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:128:13
    |
128 | /             (FilterValue::Null, _) => Ok(match op {
129 | |                 ComparisonOp::Equal => false,
130 | |                 ComparisonOp::NotEqual => true,
131 | |                 _ => false,
132 | |             }),
    | |______________^
133 | /             (_, FilterValue::Null) => Ok(match op {
134 | |                 ComparisonOp::Equal => false,
135 | |                 ComparisonOp::NotEqual => true,
136 | |                 _ => false,
137 | |             }),
    | |______________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
128 -             (FilterValue::Null, _) => Ok(match op {
129 -                 ComparisonOp::Equal => false,
130 -                 ComparisonOp::NotEqual => true,
131 -                 _ => false,
132 -             }),
133 -             (_, FilterValue::Null) => Ok(match op {
128 +             (FilterValue::Null, _) | (_, FilterValue::Null) => Ok(match op {
    |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter/comparison.rs:81:29
   |
81 | ...                   ComparisonOp::Equal => false, // missing is never equal to null
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 | ...                   ComparisonOp::NotEqual => exists_in_context, /* missing != null only if property exists somewhere */
83 | ...                   _ => false,
   |                       ^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
81 -                             ComparisonOp::Equal => false, // missing is never equal to null
81 +                             // missing is never equal to null
   |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:109:29
    |
109 | ...                   ComparisonOp::Equal => false, // null is never equal to missing
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
110 | ...                   ComparisonOp::NotEqual => exists_in_context, /* null != missing only if property exists somewhere */
111 | ...                   _ => false,
    |                       ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
109 -                             ComparisonOp::Equal => false, // null is never equal to missing
109 +                             // null is never equal to missing
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:125:17
    |
125 |                 ComparisonOp::NotEqual => false,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
126 |                 _ => false,
    |                 ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
125 -                 ComparisonOp::NotEqual => false,
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:129:17
    |
129 |                 ComparisonOp::Equal => false,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
130 |                 ComparisonOp::NotEqual => true,
131 |                 _ => false,
    |                 ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
129 -                 ComparisonOp::Equal => false,
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:134:17
    |
134 |                 ComparisonOp::Equal => false,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
135 |                 ComparisonOp::NotEqual => true,
136 |                 _ => false,
    |                 ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
134 -                 ComparisonOp::Equal => false,
    |

warning: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/filter/comparison.rs:140:38
    |
140 |                 &FilterValue::Number(*a as f64),
    |                                      ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/filter/comparison.rs:147:38
    |
147 |                 &FilterValue::Number(*b as f64),
    |                                      ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: this function has too many lines (109/100)
  --> packages/client/src/jsonpath/filter/comparisons.rs:25:1
   |
25 | / pub fn compare_values_with_context(
26 | |     left: &FilterValue,
27 | |     op: ComparisonOp,
28 | |     right: &FilterValue,
29 | |     _existing_properties: &HashSet<String>,
30 | | ) -> JsonPathResult<bool> {
   | |_________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:117:9
    |
117 |         (FilterValue::Missing, _) => Ok(false),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
118 |         (_, FilterValue::Missing) => Ok(false),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
117 -         (FilterValue::Missing, _) => Ok(false),
118 -         (_, FilterValue::Missing) => Ok(false),
117 +         (FilterValue::Missing, _) | (_, FilterValue::Missing) => Ok(false),
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:125:9
    |
125 | /         (FilterValue::Null, _) => Ok(match op {
126 | |             ComparisonOp::Equal => false,
127 | |             ComparisonOp::NotEqual => true,
128 | |             _ => false,
129 | |         }),
    | |__________^
130 | /         (_, FilterValue::Null) => Ok(match op {
131 | |             ComparisonOp::Equal => false,
132 | |             ComparisonOp::NotEqual => true,
133 | |             _ => false,
134 | |         }),
    | |__________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
125 -         (FilterValue::Null, _) => Ok(match op {
126 -             ComparisonOp::Equal => false,
127 -             ComparisonOp::NotEqual => true,
128 -             _ => false,
129 -         }),
130 -         (_, FilterValue::Null) => Ok(match op {
125 +         (FilterValue::Null, _) | (_, FilterValue::Null) => Ok(match op {
    |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter/comparisons.rs:78:25
   |
78 |                         ComparisonOp::Equal => false, // missing is never equal to null
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
79 |                         ComparisonOp::NotEqual => exists_in_context, // missing != null only if property exists somewhere
80 |                         _ => false,
   |                         ^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
78 -                         ComparisonOp::Equal => false, // missing is never equal to null
78 +                         // missing is never equal to null
   |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:106:25
    |
106 |                         ComparisonOp::Equal => false, // null is never equal to missing
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
107 |                         ComparisonOp::NotEqual => exists_in_context, // null != missing only if property exists somewhere
108 |                         _ => false,
    |                         ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
106 -                         ComparisonOp::Equal => false, // null is never equal to missing
106 +                         // null is never equal to missing
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:122:13
    |
122 |             ComparisonOp::NotEqual => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
123 |             _ => false,
    |             ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
122 -             ComparisonOp::NotEqual => false,
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:126:13
    |
126 |             ComparisonOp::Equal => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 |             ComparisonOp::NotEqual => true,
128 |             _ => false,
    |             ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
126 -             ComparisonOp::Equal => false,
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:131:13
    |
131 |             ComparisonOp::Equal => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
132 |             ComparisonOp::NotEqual => true,
133 |             _ => false,
    |             ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
131 -             ComparisonOp::Equal => false,
    |

warning: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/filter/comparisons.rs:137:34
    |
137 |             &FilterValue::Number(*a as f64),
    |                                  ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/jsonpath/filter/comparisons.rs:144:34
    |
144 |             &FilterValue::Number(*b as f64),
    |                                  ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter/conversions.rs:30:9
   |
30 |         serde_json::Value::Array(_) => FilterValue::Boolean(true), // Arrays are truthy
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
31 |         serde_json::Value::Object(_) => FilterValue::Boolean(true), // Objects are truthy
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
30 ~         serde_json::Value::Array(_) | serde_json::Value::Object(_) => FilterValue::Boolean(true), // Arrays are truthy
31 ~         // Objects are truthy
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/core.rs:54:5
   |
54 | /     pub fn evaluate_predicate(
55 | |         context: &serde_json::Value,
56 | |         expr: &FilterExpression,
57 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/core.rs:65:5
   |
65 | /     pub fn evaluate_predicate_with_context(
66 | |         context: &serde_json::Value,
67 | |         expr: &FilterExpression,
68 | |         existing_properties: &HashSet<String>,
69 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/filter/core.rs:136:5
    |
136 | /     pub fn evaluate_expression(
137 | |         context: &serde_json::Value,
138 | |         expr: &FilterExpression,
139 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/filter/core.rs:146:5
    |
146 | /     pub fn evaluate_expression_with_context(
147 | |         context: &serde_json::Value,
148 | |         expr: &FilterExpression,
149 | |         existing_properties: &HashSet<String>,
150 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/filter/properties.rs:15:1
   |
15 | / pub(super) fn property_exists_and_truthy(
16 | |     context: &serde_json::Value,
17 | |     path: &[String],
18 | | ) -> JsonPathResult<bool> {
   | |_________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
18 - ) -> JsonPathResult<bool> {
18 + ) -> bool {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
50 ~                 return false;
51 |             }
...
57 |             );
58 ~             return false;
59 |         }
...
69 |     );
70 ~     result
   |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/filter/properties.rs:75:1
   |
75 | / pub(super) fn resolve_property_path_with_context(
76 | |     context: &serde_json::Value,
77 | |     path: &[String],
78 | |     existing_properties: &HashSet<String>,
79 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
79 - ) -> JsonPathResult<FilterValue> {
79 + ) -> jsonpath::ast::FilterValue {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
102~                 return FilterValue::Missing;
103|             }
104|         } else {
105~             return FilterValue::Missing;
106|         }
107|     }
108|
109~     super::conversions::json_value_to_filter_value(current)
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/property.rs:25:5
   |
25 | /     pub fn property_exists_and_truthy(
26 | |         context: &serde_json::Value,
27 | |         path: &[String],
28 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/property.rs:84:5
   |
84 | /     pub fn resolve_property_path_with_context(
85 | |         context: &serde_json::Value,
86 | |         path: &[String],
87 | |         existing_properties: &HashSet<String>,
88 | |     ) -> JsonPathResult<FilterValue> {
   | |____________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/property.rs:140:13
    |
140 |             serde_json::Value::Array(_) => FilterValue::Boolean(true), // Arrays are truthy
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
141 |             serde_json::Value::Object(_) => FilterValue::Boolean(true), // Objects are truthy
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
140 ~             serde_json::Value::Array(_) | serde_json::Value::Object(_) => FilterValue::Boolean(true), // Arrays are truthy
141 ~             // Objects are truthy
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/selectors.rs:16:5
   |
16 | /     pub fn evaluate_jsonpath_selectors(
17 | |         context: &serde_json::Value,
18 | |         selectors: &[JsonSelector],
19 | |     ) -> JsonPathResult<FilterValue> {
   | |____________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/filter/selectors.rs:45:54
   |
45 | ...                   arr.len().saturating_sub((*index).unsigned_abs() as usize)
   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
45 -                             arr.len().saturating_sub((*index).unsigned_abs() as usize)
45 +                             arr.len().saturating_sub(usize::try_from((*index).unsigned_abs()))
   |

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/filter/selectors.rs:47:29
   |
47 | ...                   *index as usize
   |                       ^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
47 -                             *index as usize
47 +                             usize::try_from(*index)
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/filter/selectors.rs:47:29
   |
47 | ...                   *index as usize
   |                       ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter/utils.rs:21:13
   |
21 |             FilterValue::Null => false,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |             FilterValue::Missing => false,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
21 ~             FilterValue::Null | FilterValue::Missing => false,
22 ~             }
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/core.rs:15:5
   |
15 | /     pub fn evaluate_function_value(
16 | |         context: &serde_json::Value,
17 | |         name: &str,
18 | |         args: &[FilterExpression],
...  |
22 | |         ) -> JsonPathResult<FilterValue>,
23 | |     ) -> JsonPathResult<FilterValue> {
   | |____________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/functions/function_evaluator/core.rs:51:13
   |
51 |             serde_json::Value::Null => FilterValue::Null,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
63 |             _ => FilterValue::Null, // Arrays and objects cannot be converted to FilterValue
   |             ^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
51 -             serde_json::Value::Null => FilterValue::Null,
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/count.rs:11:1
   |
11 | / pub fn evaluate_count_function(
12 | |     context: &serde_json::Value,
13 | |     args: &[FilterExpression],
14 | |     expression_evaluator: &dyn Fn(
...  |
17 | |     ) -> JsonPathResult<FilterValue>,
18 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/count.rs:40:50
   |
40 |                 serde_json::Value::Array(arr) => arr.len() as i64,
   |                                                  ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/count.rs:41:51
   |
41 |                 serde_json::Value::Object(obj) => obj.len() as i64,
   |                                                   ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/integration_tests/mock_evaluator.rs:9:1
   |
 9 | / pub fn mock_evaluator(
10 | |     _context: &serde_json::Value,
11 | |     expr: &FilterExpression,
12 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:11:1
   |
11 | / pub fn evaluate_length_function(
12 | |     context: &serde_json::Value,
13 | |     args: &[FilterExpression],
14 | |     expression_evaluator: &dyn Fn(
...  |
17 | |     ) -> JsonPathResult<FilterValue>,
18 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:42:13
   |
42 |             serde_json::Value::Null => return Ok(FilterValue::Null),
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 |             _ => return Ok(FilterValue::Null), // Primitives return null per RFC
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
42 -             serde_json::Value::Null => return Ok(FilterValue::Null),
   |

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:39:46
   |
39 |             serde_json::Value::Array(arr) => arr.len() as i64,
   |                                              ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:40:47
   |
40 |             serde_json::Value::Object(obj) => obj.len() as i64,
   |                                               ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:41:45
   |
41 |             serde_json::Value::String(s) => s.chars().count() as i64, // Unicode-aware
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:53:13
   |
53 |             FilterValue::Null => Ok(FilterValue::Null),
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |             FilterValue::Missing => Ok(FilterValue::Null), /* Missing properties have no length */
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
53 ~             FilterValue::Null | FilterValue::Missing => Ok(FilterValue::Null),
54 ~             /* Missing properties have no length */
   |

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:49:63
   |
49 |             FilterValue::String(s) => Ok(FilterValue::Integer(s.chars().count() as i64)),
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/regex_functions/core.rs:14:1
   |
14 | / pub fn evaluate_match_function(
15 | |     context: &serde_json::Value,
16 | |     args: &[FilterExpression],
17 | |     expression_evaluator: &dyn Fn(
...  |
20 | |     ) -> JsonPathResult<FilterValue>,
21 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/regex_functions/core.rs:56:1
   |
56 | / pub fn evaluate_search_function(
57 | |     context: &serde_json::Value,
58 | |     args: &[FilterExpression],
59 | |     expression_evaluator: &dyn Fn(
...  |
62 | |     ) -> JsonPathResult<FilterValue>,
63 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/string_counting/mod.rs:10:1
   |
10 | pub fn evaluate_length_function(value: &Value) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/string_counting/mod.rs:20:1
   |
20 | pub fn evaluate_count_function(value: &Value) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value/core.rs:13:1
   |
13 | / pub fn evaluate_value_function(
14 | |     context: &serde_json::Value,
15 | |     args: &[FilterExpression],
16 | |     expression_evaluator: &dyn Fn(
...  |
19 | |     ) -> JsonPathResult<FilterValue>,
20 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/functions/function_evaluator/value/core.rs:72:1
   |
72 | / fn evaluate_property_expression(
73 | |     context: &serde_json::Value,
74 | |     path: &[String],
75 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
75 - ) -> JsonPathResult<FilterValue> {
75 + ) -> jsonpath::ast::FilterValue {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
83 ~             _ => return FilterValue::Null,
84 |         }
85 |     }
86 ~     FunctionEvaluator::json_value_to_filter_value(current)
   |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/functions/function_evaluator/value/core.rs:90:1
   |
90 | fn evaluate_current_expression(context: &serde_json::Value) -> JsonPathResult<FilterValue> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
90 - fn evaluate_current_expression(context: &serde_json::Value) -> JsonPathResult<FilterValue> {
90 + fn evaluate_current_expression(context: &serde_json::Value) -> jsonpath::ast::FilterValue {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
92 -     Ok(FunctionEvaluator::json_value_to_filter_value(context))
92 +     FunctionEvaluator::json_value_to_filter_value(context)
   |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/functions/function_evaluator/value/core.rs:96:1
   |
96 | fn evaluate_literal_expression(value: &FilterValue) -> JsonPathResult<FilterValue> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
96 - fn evaluate_literal_expression(value: &FilterValue) -> JsonPathResult<FilterValue> {
96 + fn evaluate_literal_expression(value: &FilterValue) -> jsonpath::ast::FilterValue {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
98 -     Ok(value.clone())
98 +     value.clone()
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value/property_access.rs:11:5
   |
11 | /     pub fn evaluate_property_path(
12 | |         context: &serde_json::Value,
13 | |         path: &[String],
14 | |     ) -> crate::jsonpath::error::JsonPathResult<FilterValue> {
   | |____________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value_conversion/mod.rs:10:1
   |
10 | pub fn to_string_value(value: &Value) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value_conversion/mod.rs:21:1
   |
21 | pub fn to_number_value(value: &Value) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/functions/function_evaluator/value_conversion/mod.rs:34:9
   |
34 |         Value::Bool(false) => Ok(Value::Number(serde_json::Number::from(0))),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 |         _ => Ok(Value::Number(serde_json::Number::from(0))),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
34 -         Value::Bool(false) => Ok(Value::Number(serde_json::Number::from(0))),
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value_conversion/mod.rs:40:1
   |
40 | pub fn to_boolean_value(value: &Value) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value_conversion/mod.rs:52:1
   |
52 | pub fn evaluate_value_function(function_name: &str, args: &[Value]) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:12:5
   |
12 | /     pub fn evaluate_jsonpath_nodelist(
13 | |         context: &serde_json::Value,
14 | |         selectors: &[crate::jsonpath::parser::JsonSelector],
15 | |     ) -> JsonPathResult<Vec<serde_json::Value>> {
   | |_______________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:38:58
   |
38 | ...                   arr.len().saturating_sub((*index).unsigned_abs() as usize)
   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
38 -                                 arr.len().saturating_sub((*index).unsigned_abs() as usize)
38 +                                 arr.len().saturating_sub(usize::try_from((*index).unsigned_abs()))
   |

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:40:33
   |
40 | ...                   *index as usize
   |                       ^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
40 -                                 *index as usize
40 +                                 usize::try_from(*index)
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:40:33
   |
40 | ...                   *index as usize
   |                       ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:61:39
   |
61 | ...                   let len = arr.len() as i64;
   |                                 ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:68:45
   |
68 |   ...                   let start_idx = start
   |  _______________________________________^
69 | | ...                       .map_or(0, |s| if s < 0 { len + s } else { s })
70 | | ...                       .max(0) as usize;
   | |__________________________________________^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
68 ~                             let start_idx = usize::try_from(start
69 +                                 .map_or(0, |s| if s < 0 { len + s } else { s })
70 ~                                 .max(0));
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:68:45
   |
68 |   ...                   let start_idx = start
   |  _______________________________________^
69 | | ...                       .map_or(0, |s| if s < 0 { len + s } else { s })
70 | | ...                       .max(0) as usize;
   | |__________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:71:43
   |
71 |   ...                   let end_idx = end
   |  _____________________________________^
72 | | ...                       .map_or(len, |e| if e < 0 { len + e } else { e })
73 | | ...                       .min(len) as usize;
   | |____________________________________________^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
71 ~                             let end_idx = usize::try_from(end
72 +                                 .map_or(len, |e| if e < 0 { len + e } else { e })
73 ~                                 .min(len));
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:71:43
   |
71 |   ...                   let end_idx = end
   |  _____________________________________^
72 | | ...                       .map_or(len, |e| if e < 0 { len + e } else { e })
73 | | ...                       .min(len) as usize;
   | |____________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:79:42
   |
79 | ...                   i += step_val as usize;
   |                            ^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
79 -                                     i += step_val as usize;
79 +                                     i += usize::try_from(step_val);
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:79:42
   |
79 | ...                   i += step_val as usize;
   |                            ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this call to `clone` can be replaced with `std::slice::from_ref`
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:89:72
   |
89 | ...                   Self::evaluate_jsonpath_nodelist(node, &[union_selector.clone()])?;
   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::slice::from_ref(union_selector)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cloned_ref_to_slice_refs
   = note: `#[warn(clippy::cloned_ref_to_slice_refs)]` implied by `#[warn(clippy::all)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/regex_cache.rs:27:5
   |
27 |     pub fn get_or_compile(&self, pattern: &str) -> Result<regex::Regex, regex::Error> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/regex_cache.rs:52:1
   |
52 | / pub fn execute_regex_with_timeout<F>(regex_operation: F) -> Result<bool, String>
53 | | where
54 | |     F: FnOnce() -> bool + Send + 'static,
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this macro has been superseded by `std::sync::LazyLock`
  --> packages/client/src/jsonpath/functions/types.rs:43:1
   |
43 | / lazy_static::lazy_static! {
44 | |     pub(super) static ref REGEX_CACHE: RegexCache = RegexCache::new();
45 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_std_lazy_statics
   = note: `#[warn(clippy::non_std_lazy_statics)]` implied by `#[warn(clippy::pedantic)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/types.rs:53:5
   |
53 | /     pub fn evaluate_function_value(
54 | |         context: &serde_json::Value,
55 | |         name: &str,
56 | |         args: &[FilterExpression],
...  |
60 | |         ) -> JsonPathResult<FilterValue>,
61 | |     ) -> JsonPathResult<FilterValue> {
   | |____________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/types.rs:78:5
   |
78 | /     pub fn evaluate_length_function(
79 | |         context: &serde_json::Value,
80 | |         args: &[FilterExpression],
81 | |         expression_evaluator: &dyn Fn(
...  |
84 | |         ) -> JsonPathResult<FilterValue>,
85 | |     ) -> JsonPathResult<FilterValue> {
   | |____________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/functions/types.rs:95:5
    |
 95 | /     pub fn evaluate_count_function(
 96 | |         context: &serde_json::Value,
 97 | |         args: &[FilterExpression],
 98 | |         expression_evaluator: &dyn Fn(
...   |
101 | |         ) -> JsonPathResult<FilterValue>,
102 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/functions/types.rs:112:5
    |
112 | /     pub fn evaluate_match_function(
113 | |         context: &serde_json::Value,
114 | |         args: &[FilterExpression],
115 | |         expression_evaluator: &dyn Fn(
...   |
118 | |         ) -> JsonPathResult<FilterValue>,
119 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/functions/types.rs:129:5
    |
129 | /     pub fn evaluate_search_function(
130 | |         context: &serde_json::Value,
131 | |         args: &[FilterExpression],
132 | |         expression_evaluator: &dyn Fn(
...   |
135 | |         ) -> JsonPathResult<FilterValue>,
136 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/functions/types.rs:146:5
    |
146 | /     pub fn evaluate_value_function(
147 | |         context: &serde_json::Value,
148 | |         args: &[FilterExpression],
149 | |         expression_evaluator: &dyn Fn(
...   |
152 | |         ) -> JsonPathResult<FilterValue>,
153 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/functions/types.rs:165:13
    |
165 |             serde_json::Value::Null => FilterValue::Null,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
177 |             _ => FilterValue::Null, // Arrays and objects cannot be converted to FilterValue
    |             ^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
165 -             serde_json::Value::Null => FilterValue::Null,
    |

warning: this could be rewritten as `let...else`
  --> packages/client/src/jsonpath/json_array_stream/processing.rs:26:9
   |
26 | /         let json_str = match std::str::from_utf8(all_data) {
27 | |             Ok(s) => s,
28 | |             Err(_) => return Vec::new(), // Invalid UTF-8
29 | |         };
   | |__________^ help: consider writing: `let Ok(json_str) = std::str::from_utf8(all_data) else { return Vec::new() };`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
  --> packages/client/src/jsonpath/json_array_stream/processing.rs:32:9
   |
32 | /         let json_value = match serde_json::from_str::<serde_json::Value>(json_str) {
33 | |             Ok(value) => value,
34 | |             Err(_) => return Vec::new(), // Not complete JSON
35 | |         };
   | |__________^ help: consider writing: `let Ok(json_value) = serde_json::from_str::<serde_json::Value>(json_str) else { return Vec::new() };`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
  --> packages/client/src/jsonpath/json_array_stream/processing.rs:39:9
   |
39 | /         let evaluator = match CoreJsonPathEvaluator::new(&expression) {
40 | |             Ok(eval) => eval,
41 | |             Err(_) => return Vec::new(),
42 | |         };
   | |__________^ help: consider writing: `let Ok(evaluator) = CoreJsonPathEvaluator::new(&expression) else { return Vec::new() };`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
  --> packages/client/src/jsonpath/json_array_stream/processing.rs:44:9
   |
44 | /         let results = match evaluator.evaluate(&json_value) {
45 | |             Ok(values) => values,
46 | |             Err(_) => return Vec::new(),
47 | |         };
   | |__________^ help: consider writing: `let Ok(results) = evaluator.evaluate(&json_value) else { return Vec::new() };`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this function has too many lines (120/100)
  --> packages/client/src/jsonpath/json_array_stream/streaming.rs:36:5
   |
36 | /     pub fn process_chunk(&mut self, chunk: Bytes) -> AsyncStream<T, 1024>
37 | |     where
38 | |         T: MessageChunk + MessageChunk + Default + Send + 'static,
   | |__________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this could be rewritten as `let...else`
  --> packages/client/src/jsonpath/json_array_stream/streaming.rs:45:9
   |
45 | /         let json_str = match std::str::from_utf8(all_data) {
46 | |             Ok(s) => s,
47 | |             Err(_) => {
...  |
53 | |         };
   | |__________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
   |
45 ~         let Ok(json_str) = std::str::from_utf8(all_data) else {
46 +                 // Invalid UTF-8, return empty stream
47 +                 return AsyncStream::with_channel(|_sender| {
48 +                     // Empty stream - no chunks to emit
49 +                 });
50 +             };
   |

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/normalized_paths/generator.rs:58:34
   |
58 | ...                   Some(index.wrapping_abs() as usize),
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
58 -                             Some(index.wrapping_abs() as usize),
58 +                             Some(usize::try_from(index.wrapping_abs())),
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/normalized_paths/generator.rs:58:34
   |
58 | ...                   Some(index.wrapping_abs() as usize),
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/normalized_paths/generator.rs:65:34
   |
65 | ...                   Some((*index).wrapping_abs() as usize),
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
65 -                             Some((*index).wrapping_abs() as usize),
65 +                             Some(usize::try_from((*index).wrapping_abs())),
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/normalized_paths/generator.rs:65:34
   |
65 | ...                   Some((*index).wrapping_abs() as usize),
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/normalized_paths/operations.rs:12:5
   |
12 |     pub fn child_member(&self, member_name: &str) -> JsonPathResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/normalized_paths/operations.rs:28:5
   |
28 |     pub fn child_index(&self, index: i64) -> JsonPathResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/normalized_paths/parser.rs:15:5
   |
15 |     pub fn parse_normalized_path(path: &str) -> JsonPathResult<NormalizedPath> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: possible intra-doc link using quotes instead of backticks
  --> packages/client/src/jsonpath/normalized_paths/types.rs:28:32
   |
28 |     /// Object member access (['`member_name`'])
   |                                ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_link_with_quotes
   = note: `#[warn(clippy::doc_link_with_quotes)]` implied by `#[warn(clippy::pedantic)]`

warning: possible intra-doc link using quotes instead of backticks
  --> packages/client/src/jsonpath/normalized_paths/types.rs:28:46
   |
28 |     /// Object member access (['`member_name`'])
   |                                              ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_link_with_quotes

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/null_semantics/array_access.rs:31:27
   |
31 |                 let len = arr.len() as i64;
   |                           ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/null_semantics/array_access.rs:37:37
   |
37 |             if actual_index >= 0 && (actual_index as usize) < arr.len() {
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
37 -             if actual_index >= 0 && (actual_index as usize) < arr.len() {
37 +             if actual_index >= 0 && usize::try_from(actual_index) < arr.len() {
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/null_semantics/array_access.rs:37:37
   |
37 |             if actual_index >= 0 && (actual_index as usize) < arr.len() {
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> packages/client/src/jsonpath/null_semantics/array_access.rs:38:34
   |
38 |                 let value = &arr[actual_index as usize];
   |                                  ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
38 -                 let value = &arr[actual_index as usize];
38 +                 let value = &arr[usize::try_from(actual_index)];
   |

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/null_semantics/array_access.rs:38:34
   |
38 |                 let value = &arr[actual_index as usize];
   |                                  ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/null_semantics/comparison.rs:17:5
   |
17 | /     pub fn evaluate_existence_filter(
18 | |         context: &JsonValue,
19 | |         property_path: &[String],
20 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
20 -     ) -> JsonPathResult<bool> {
20 +     ) -> bool {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
21 -         Ok(evaluate_existence_filter(context, property_path))
21 +         evaluate_existence_filter(context, property_path)
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/null_semantics/comparison.rs:41:9
   |
41 |         PropertyAccessResult::NullValue => true, // null is present
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |         PropertyAccessResult::Value(_) => true,  // non-null values are present
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
41 ~         // null is present
42 ~         PropertyAccessResult::NullValue | PropertyAccessResult::Value(_) => true,  // non-null values are present
   |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/null_semantics/comparison.rs:62:1
   |
62 | / pub fn compare_with_null_semantics(
63 | |     left: &PropertyAccessResult,
64 | |     right: &PropertyAccessResult,
65 | | ) -> JsonPathResult<bool> {
   | |_________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
65 - ) -> JsonPathResult<bool> {
65 + ) -> bool {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
68 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::NullValue) => true,
69 |
70 |         // Both missing
71 ~         (PropertyAccessResult::Missing, PropertyAccessResult::Missing) => true,
72 |
73 |         // Null vs missing (different)
74 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::Missing) => false,
75 ~         (PropertyAccessResult::Missing, PropertyAccessResult::NullValue) => false,
76 |
77 |         // Value comparisons
78 ~         (PropertyAccessResult::Value(a), PropertyAccessResult::Value(b)) => a == b,
79 |
80 |         // Value vs null (different unless value is explicitly null)
81 ~         (PropertyAccessResult::Value(JsonValue::Null), PropertyAccessResult::NullValue) => true,
82 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::Value(JsonValue::Null)) => true,
83 ~         (PropertyAccessResult::Value(_), PropertyAccessResult::NullValue) => false,
84 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::Value(_)) => false,
85 |
86 |         // Value vs missing (different)
87 ~         (PropertyAccessResult::Value(_), PropertyAccessResult::Missing) => false,
88 ~         (PropertyAccessResult::Missing, PropertyAccessResult::Value(_)) => false,
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/null_semantics/comparison.rs:68:9
   |
68 |         (PropertyAccessResult::NullValue, PropertyAccessResult::NullValue) => Ok(true),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
71 |         (PropertyAccessResult::Missing, PropertyAccessResult::Missing) => Ok(true),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
81 |         (PropertyAccessResult::Value(JsonValue::Null), PropertyAccessResult::NullValue) => Ok(true),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |         (PropertyAccessResult::NullValue, PropertyAccessResult::Value(JsonValue::Null)) => Ok(true),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
68 ~         // Both missing
69 ~         // Null vs missing (different)
70 |         (PropertyAccessResult::NullValue, PropertyAccessResult::Missing) => Ok(false),
...
76 |         // Value vs null (different unless value is explicitly null)
77 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::NullValue) | (PropertyAccessResult::Missing, PropertyAccessResult::Missing) | (PropertyAccessResult::Value(JsonValue::Null), PropertyAccessResult::NullValue) | (PropertyAccessResult::NullValue, PropertyAccessResult::Value(JsonValue::Null)) => Ok(true),
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/null_semantics/comparison.rs:74:9
   |
74 |         (PropertyAccessResult::NullValue, PropertyAccessResult::Missing) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
75 |         (PropertyAccessResult::Missing, PropertyAccessResult::NullValue) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
83 |         (PropertyAccessResult::Value(_), PropertyAccessResult::NullValue) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
84 |         (PropertyAccessResult::NullValue, PropertyAccessResult::Value(_)) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
87 |         (PropertyAccessResult::Value(_), PropertyAccessResult::Missing) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
88 |         (PropertyAccessResult::Missing, PropertyAccessResult::Value(_)) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
74 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::Missing) | (PropertyAccessResult::Missing, PropertyAccessResult::NullValue) | (PropertyAccessResult::Value(_), PropertyAccessResult::NullValue) | (PropertyAccessResult::NullValue, PropertyAccessResult::Value(_)) | (PropertyAccessResult::Value(_), PropertyAccessResult::Missing) | (PropertyAccessResult::Missing, PropertyAccessResult::Value(_)) => Ok(false),
75 ~         // Value comparisons
76 |         (PropertyAccessResult::Value(a), PropertyAccessResult::Value(b)) => Ok(a == b),
...
80 |         (PropertyAccessResult::NullValue, PropertyAccessResult::Value(JsonValue::Null)) => Ok(true),
81 ~         // Value vs missing (different)
82 ~         }
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/null_semantics/property_access.rs:85:13
   |
85 |             PropertyAccessResult::NullValue => true, // null is present
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
86 |             PropertyAccessResult::Value(_) => true,  // non-null values are present
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
85 ~             // null is present
86 ~             PropertyAccessResult::NullValue | PropertyAccessResult::Value(_) => true,  // non-null values are present
   |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/null_semantics/property_access.rs:111:13
    |
111 |             PropertyAccessResult::NullValue => None, // Explicitly null
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
112 |             PropertyAccessResult::Missing => None,   // Missing
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
111 ~             PropertyAccessResult::NullValue | PropertyAccessResult::Missing => None, // Explicitly null
112 ~             // Missing
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/null_semantics/mod.rs:65:5
   |
65 | /     pub fn compare_with_null_semantics(
66 | |         left: &PropertyAccessResult,
67 | |         right: &PropertyAccessResult,
68 | |     ) -> crate::jsonpath::error::JsonPathResult<bool> {
   | |_____________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/null_semantics/mod.rs:102:5
    |
102 |     pub fn validate_implementation() -> crate::jsonpath::error::JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/safe_parsing/buffer.rs:28:5
   |
28 |     pub fn append(&mut self, data: &[u8]) -> JsonPathResult<()> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/safe_parsing/buffer.rs:43:5
   |
43 |     pub fn to_string(&self, strategy: Utf8RecoveryStrategy) -> JsonPathResult<String> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/safe_parsing/context.rs:89:5
   |
89 |     pub fn enter_nesting(&mut self) -> JsonPathResult<()> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:115:5
    |
115 |     pub fn allocate_memory(&mut self, size: usize) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:144:5
    |
144 |     pub fn check_timeout(&self) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:157:5
    |
157 |     pub fn validate_complexity(&self, complexity_score: u32) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:186:5
    |
186 |     pub fn validate_utf8_basic(&self, chunk: &[u8]) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:199:5
    |
199 |     pub fn validate_utf8_strict(&self, chunk: &[u8]) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:213:5
    |
213 |     pub fn validate_utf8_paranoid(&self, chunk: &[u8]) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: unused `self` argument
   --> packages/client/src/jsonpath/safe_parsing/context.rs:246:19
    |
246 |     fn utf8_error(&self, message: &str, position: usize, error_len: Option<usize>) -> crate::jsonpath::error::JsonPathError {
    |                   ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/safe_parsing/utf8.rs:19:5
   |
19 | /     pub fn validate_utf8_with_recovery(
20 | |         input: &[u8],
21 | |         strategy: Utf8RecoveryStrategy,
22 | |     ) -> JsonPathResult<String> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/safe_parsing/utf8.rs:77:5
   |
77 |     pub fn validate_jsonpath_string(input: &str, allow_escapes: bool) -> JsonPathResult<String> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function's return value is unnecessarily wrapped by `Result`
   --> packages/client/src/jsonpath/state_machine/engine.rs:151:5
    |
151 |     fn process_initial_byte(&mut self, byte: u8) -> Result<ProcessResult, JsonPathError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
151 -     fn process_initial_byte(&mut self, byte: u8) -> Result<ProcessResult, JsonPathError> {
151 +     fn process_initial_byte(&mut self, byte: u8) -> jsonpath::state_machine::types::ProcessResult {
    |
help: ...and then remove the surrounding `Ok()` from returning expressions
    |
153 ~             b' ' | b'\t' | b'\n' | b'\r' => ProcessResult::Continue, // Skip whitespace
154 |             b'{' => {
155 |                 super::transitions::transition_to_navigating(self);
156 |                 self.enter_object();
157 ~                 ProcessResult::Continue
158 |             }
...
161 |                 self.enter_array();
162 ~                 ProcessResult::Continue
163 |             }
...
169 |                 );
170 ~                 ProcessResult::Error(err)
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/state_machine/engine.rs:251:5
    |
251 | /     pub fn process_chunk_with_jsonpath_state(
252 | |         &mut self,
253 | |         chunk: &[u8],
254 | |         jsonpath_state: &mut StreamingJsonPathState,
255 | |     ) -> Result<Vec<MatchedValue>, JsonPathError> {
    | |_________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:277:17
    |
277 |                 Ok(ProcessResult::NeedMoreData) => break,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
278 |                 Ok(ProcessResult::Complete) => break,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
277 ~                 Ok(ProcessResult::NeedMoreData) | Ok(ProcessResult::Complete) => break,
278 ~                 Ok(ProcessResult::Error(err)) => {
    |

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/state_machine/engine.rs:334:126
    |
334 | ...   matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
    |                                                                                                                ^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
334 -                     matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
334 +                     matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == usize::try_from(*index))
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/state_machine/engine.rs:334:126
    |
334 | ...   matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
    |                                                                                                                ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:362:42
    |
362 |     fn should_activate_recursive_descent(&self, jsonpath_state: &StreamingJsonPathState) -> bool {
    |                                          ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:372:28
    |
372 |     fn index_matches_slice(&self, index: usize, start: Option<i64>, end: Option<i64>, step: Option<i64>) -> bool {
    |                            ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/state_machine/engine.rs:373:20
    |
373 |         let step = step.unwrap_or(1).max(1) as usize; // Ensure positive step
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
373 -         let step = step.unwrap_or(1).max(1) as usize; // Ensure positive step
373 +         let step = usize::try_from(step.unwrap_or(1).max(1)); // Ensure positive step
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/state_machine/engine.rs:373:20
    |
373 |         let step = step.unwrap_or(1).max(1) as usize; // Ensure positive step
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/state_machine/engine.rs:374:21
    |
374 |         let index = index as i64;
    |                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/state_machine/engine.rs:390:13
    |
390 |             ((index - start_bound) as usize).is_multiple_of(step)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
390 -             ((index - start_bound) as usize).is_multiple_of(step)
390 +             usize::try_from(index - start_bound).is_multiple_of(step)
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/state_machine/engine.rs:390:13
    |
390 |             ((index - start_bound) as usize).is_multiple_of(step)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:397:33
    |
397 |     fn evaluate_single_selector(&self, selector: &crate::jsonpath::ast::JsonSelector, jsonpath_state: &StreamingJsonPathState) -> bool {
    |                                 ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/state_machine/engine.rs:406:126
    |
406 | ...   matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
    |                                                                                                                ^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
406 -                     matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
406 +                     matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == usize::try_from(*index))
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/state_machine/engine.rs:406:126
    |
406 | ...   matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
    |                                                                                                                ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:451:9
    |
451 |         &mut self,
    |         ^^^^^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:480:29
    |
480 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
481 | | ...                       // Successfully advanced to next selector
482 | | ...                   }
    | |_______________________^
483 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
484 | | ...                       // Expression is complete
485 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
480 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
481 -                                 // Successfully advanced to next selector
482 -                             }
483 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
480 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:497:25
    |
497 | /                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
498 | |                             // Successfully advanced to next selector
499 | |                         }
    | |_________________________^
500 | /                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
501 | |                             // Expression is complete
502 | |                         }
    | |_________________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
497 -                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
498 -                             // Successfully advanced to next selector
499 -                         }
500 -                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
497 +                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:532:29
    |
532 | / ...                   crate::jsonpath::ast::JsonSelector::Child { .. } => {
533 | | ...                       // Will be evaluated when property names are encountered
534 | | ...                   }
    | |_______________________^
535 |   ...                   _ => {},
    |                         ^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
532 -                             crate::jsonpath::ast::JsonSelector::Child { .. } => {
533 -                                 // Will be evaluated when property names are encountered
534 -                             }
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:546:29
    |
546 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
547 | | ...                       // Successfully advanced to next selector
548 | | ...                   }
    | |_______________________^
549 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
550 | | ...                       // Expression is complete
551 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
546 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
547 -                                 // Successfully advanced to next selector
548 -                             }
549 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
546 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:580:9
    |
580 |         &mut self,
    |         ^^^^^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function's return value is unnecessary
   --> packages/client/src/jsonpath/state_machine/engine.rs:579:5
    |
579 | /     fn handle_object_end_for_jsonpath(
580 | |         &mut self,
581 | |         jsonpath_state: &mut StreamingJsonPathState,
582 | |     ) -> Result<(), JsonPathError> {
    | |__________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove the return type...
    |
582 -     ) -> Result<(), JsonPathError> {
582 +     ) -> () {
    |
help: ...and then remove returned values
    |
585 -         Ok(())
    |

warning: this function has too many lines (128/100)
   --> packages/client/src/jsonpath/state_machine/engine.rs:589:5
    |
589 | /     fn handle_array_start_for_jsonpath(
590 | |         &mut self,
591 | |         jsonpath_state: &mut StreamingJsonPathState,
592 | |     ) -> Result<(), JsonPathError> {
    | |__________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: wildcard matches only a single variant and will also match any future added variants
   --> packages/client/src/jsonpath/state_machine/engine.rs:740:17
    |
740 |                 _ => {
    |                 ^ help: try: `crate::jsonpath::ast::JsonSelector::Child { .. }`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants
    = note: `#[warn(clippy::match_wildcard_for_single_variants)]` implied by `#[warn(clippy::pedantic)]`

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:624:25
    |
624 | /                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
625 | |                             // Successfully advanced to next selector
626 | |                         }
    | |_________________________^
627 | /                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
628 | |                             // Expression is complete
629 | |                         }
    | |_________________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
624 -                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
625 -                             // Successfully advanced to next selector
626 -                         }
627 -                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
624 +                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:643:29
    |
643 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
644 | | ...                       // Successfully advanced to next selector
645 | | ...                   }
    | |_______________________^
646 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
647 | | ...                       // Expression is complete
648 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
643 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
644 -                                 // Successfully advanced to next selector
645 -                             }
646 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
643 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:663:29
    |
663 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
664 | | ...                       // Successfully advanced to next selector
665 | | ...                   }
    | |_______________________^
666 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
667 | | ...                       // Expression is complete
668 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
663 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
664 -                                 // Successfully advanced to next selector
665 -                             }
666 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
663 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:713:29
    |
713 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
714 | | ...                       // Successfully advanced to next selector
715 | | ...                   }
    | |_______________________^
716 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
717 | | ...                       // Expression is complete
718 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
713 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
714 -                                 // Successfully advanced to next selector
715 -                             }
716 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
713 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:731:29
    |
731 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
732 | | ...                       // Successfully advanced to next selector
733 | | ...                   }
    | |_______________________^
734 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
735 | | ...                       // Expression is complete
736 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
731 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
732 -                                 // Successfully advanced to next selector
733 -                             }
734 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
731 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:765:9
    |
765 |         &mut self,
    |         ^^^^^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function's return value is unnecessary
   --> packages/client/src/jsonpath/state_machine/engine.rs:764:5
    |
764 | /     fn handle_array_end_for_jsonpath(
765 | |         &mut self,
766 | |         jsonpath_state: &mut StreamingJsonPathState,
767 | |     ) -> Result<(), JsonPathError> {
    | |__________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove the return type...
    |
767 -     ) -> Result<(), JsonPathError> {
767 +     ) -> () {
    |
help: ...and then remove returned values
    |
770 -         Ok(())
    |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/state_machine/processors.rs:10:1
   |
10 | / pub fn process_navigating_byte(
11 | |     machine: &mut StreamStateMachine,
12 | |     byte: u8,
13 | | ) -> Result<ProcessResult, JsonPathError> {
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
13 - ) -> Result<ProcessResult, JsonPathError> {
13 + ) -> jsonpath::state_machine::types::ProcessResult {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
15 ~         b' ' | b'\t' | b'\n' | b'\r' => ProcessResult::Continue, // Skip whitespace
16 |         b'{' => {
17 |             machine.enter_object();
18 ~             ProcessResult::Continue
19 |         }
...
24 |             }
25 ~             ProcessResult::Continue
26 |         }
...
32 |             }
33 ~             ProcessResult::Continue
34 |         }
35 ~         _ => ProcessResult::Continue, // Continue navigating
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/state_machine/processors.rs:15:9
   |
15 |         b' ' | b'\t' | b'\n' | b'\r' => Ok(ProcessResult::Continue), // Skip whitespace
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
35 |         _ => Ok(ProcessResult::Continue), // Continue navigating
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
15 -         b' ' | b'\t' | b'\n' | b'\r' => Ok(ProcessResult::Continue), // Skip whitespace
15 +         // Skip whitespace
   |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/state_machine/processors.rs:40:1
   |
40 | / pub fn process_streaming_byte(
41 | |     machine: &mut StreamStateMachine,
42 | |     byte: u8,
43 | |     absolute_offset: usize,
44 | | ) -> Result<ProcessResult, JsonPathError> {
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
44 - ) -> Result<ProcessResult, JsonPathError> {
44 + ) -> jsonpath::state_machine::types::ProcessResult {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
51 ~             ProcessResult::Continue
52 |         }
53 |         b'[' => {
54 |             machine.enter_array();
55 ~             ProcessResult::Continue
56 |         }
...
61 |             }
62 ~             ProcessResult::Continue
63 |         }
64 |         b',' => {
65 |             // Array element separator
66 ~             ProcessResult::Continue
67 |         }
68 ~         b' ' | b'\t' | b'\n' | b'\r' => ProcessResult::Continue, // Skip whitespace
69 ~         _ => ProcessResult::Continue,
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/state_machine/processors.rs:68:9
   |
68 |         b' ' | b'\t' | b'\n' | b'\r' => Ok(ProcessResult::Continue), // Skip whitespace
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
69 |         _ => Ok(ProcessResult::Continue),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
68 -         b' ' | b'\t' | b'\n' | b'\r' => Ok(ProcessResult::Continue), // Skip whitespace
68 +         // Skip whitespace
   |

warning: this function has too many lines (106/100)
  --> packages/client/src/jsonpath/state_machine/processors.rs:74:1
   |
74 | / pub fn process_object_byte(
75 | |     machine: &mut StreamStateMachine,
76 | |     byte: u8,
77 | |     absolute_offset: usize,
78 | | ) -> Result<ProcessResult, JsonPathError> {
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/state_machine/processors.rs:74:1
   |
74 | / pub fn process_object_byte(
75 | |     machine: &mut StreamStateMachine,
76 | |     byte: u8,
77 | |     absolute_offset: usize,
78 | | ) -> Result<ProcessResult, JsonPathError> {
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
78 - ) -> Result<ProcessResult, JsonPathError> {
78 + ) -> jsonpath::state_machine::types::ProcessResult {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
93 ~             ProcessResult::Continue
94 |         }
...
116|                     machine.stats.object_start_offset = None; // Reset for next object
117~                     return ProcessResult::ObjectBoundary {
118+                         start: start_offset,
119+                         end: absolute_offset + 1,
120~                     };
121|                 }
122|             }
123~             ProcessResult::Continue
124|         }
...
134|             }
135~             ProcessResult::Continue
136|         }
...
141|             }
142~             ProcessResult::Continue
143|         }
...
148|             }
149~             ProcessResult::Continue
150|         }
151~         b' ' | b'\t' | b'\n' | b'\r' => ProcessResult::Continue, // Skip whitespace
152|         b'\\' => {
...
159|                     // Backslash outside string - invalid JSON
160~                     return ProcessResult::Error(stream_error(
161+                         "unexpected escape character outside string",
162+                         "object_processing",
163+                         false,
164~                     ));
165|                 }
166|             }
167~             ProcessResult::Continue
168|         }
...
177|                             *escaped = false;
178~                             ProcessResult::Continue
179|                         }
...
183|                             *escaped = false;
184~                             ProcessResult::Continue
185|                         }
...
188|                             *escaped = false;
189~                             ProcessResult::Error(stream_error(
190+                                 format!("invalid escape sequence '\\{}'", byte as char),
191+                                 "object_processing",
192+                                 false,
193+                             ))
194|                         }
...
198|                     *escaped = false;
199~                     ProcessResult::Continue
200|                 }
201|             } else {
202~                 ProcessResult::Continue
   |

warning: this function's return value is unnecessarily wrapped by `Result`
   --> packages/client/src/jsonpath/state_machine/processors.rs:209:1
    |
209 | / pub fn process_finishing_byte(
210 | |     _machine: &mut StreamStateMachine,
211 | |     byte: u8,
212 | | ) -> Result<ProcessResult, JsonPathError> {
    | |_________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
212 - ) -> Result<ProcessResult, JsonPathError> {
212 + ) -> jsonpath::state_machine::types::ProcessResult {
    |
help: ...and then remove the surrounding `Ok()` from returning expressions
    |
214 ~         b' ' | b'\t' | b'\n' | b'\r' => ProcessResult::Continue, // Skip whitespace
215 |         b'}' | b']' => {
216 |             // Handle closing brackets/braces
217 ~             ProcessResult::Continue
218 |         }
...
224 |             );
225 ~             ProcessResult::Error(err)
    |

warning: match expression looks like `matches!` macro
  --> packages/client/src/jsonpath/state_machine/transitions.rs:89:5
   |
89 | /     match (current, target_state) {
90 | |         (JsonStreamState::Initial, StateType::Navigating) => true,
91 | |         (JsonStreamState::Navigating { .. }, StateType::Streaming) => true,
92 | |         (JsonStreamState::Navigating { .. }, StateType::ProcessingObject) => true,
...  |
98 | |         _ => false,
99 | |     }
   | |_____^ help: try: `matches!((current, target_state), (JsonStreamState::Initial, StateType::Navigating) | (JsonStreamState::Navigating { .. }, StateType::Streaming) | (JsonStreamState::Navigating { .. }, StateType::ProcessingObject) | (JsonStreamState::StreamingArray { .. }, StateType::ProcessingObject) | (JsonStreamState::ProcessingObject { .. }, StateType::Streaming) | (_, StateType::Finishing) | (_, StateType::Complete) | (_, StateType::Error))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/jsonpath/stream_processor/core.rs:35:5
   |
35 | /     pub fn with_chunk_handler<F>(mut self, handler: F) -> Self
36 | |     where
37 | |         F: FnMut(Result<T, JsonPathError>) -> Result<T, JsonPathError> + Send + 'static,
...  |
40 | |         self
41 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/stream_processor/error_recovery.rs:44:9
   |
44 |         crate::jsonpath::error::ErrorKind::InvalidPath => RecoveryStrategy::ContinuePartial,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |         crate::jsonpath::error::ErrorKind::ProcessingError => RecoveryStrategy::ResetArray,
46 |         crate::jsonpath::error::ErrorKind::IoError => RecoveryStrategy::ContinuePartial,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
44 ~         crate::jsonpath::error::ErrorKind::InvalidPath | crate::jsonpath::error::ErrorKind::IoError => RecoveryStrategy::ContinuePartial,
45 |         crate::jsonpath::error::ErrorKind::ProcessingError => RecoveryStrategy::ResetArray,
46 ~         _ => RecoveryStrategy::Abort,
   |

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/stream_processor/error_recovery.rs:53:15
   |
53 |     strategy: RecoveryStrategy,
   |               ^^^^^^^^^^^^^^^^
   |
help: or consider marking this type as `Copy`
  --> packages/client/src/jsonpath/stream_processor/error_recovery.rs:10:1
   |
10 | pub enum RecoveryStrategy {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
53 |     strategy: &RecoveryStrategy,
   |               +

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/stream_processor/error_recovery.rs:57:9
   |
57 | /         RecoveryStrategy::SkipObject => {
58 | |             // Skip to next object boundary
59 | |             true
60 | |         }
   | |_________^
...
66 | /         RecoveryStrategy::ContinuePartial => {
67 | |             // Continue with what we have
68 | |             true
69 | |         }
   | |_________^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
57 ~         RecoveryStrategy::ResetArray => {
58 |             // Reset array processing state
...
61 |         }
62 ~         RecoveryStrategy::SkipObject | RecoveryStrategy::ContinuePartial => {
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/stream_processor/types.rs:64:13
   |
64 |             0 => true, // Closed - allow all requests
   |             ^^^^^^^^^
...
81 |             2 => true,  // HalfOpen - allow limited requests
   |             ^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
64 ~             // Closed - allow all requests
65 |             1 => {
...
80 |             }
81 ~             0 | 2 => true,  // HalfOpen - allow limited requests
   |

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/jsonpath/stream_processor/types.rs:67:27
   |
67 |                   let now = std::time::SystemTime::now()
   |  ___________________________^
68 | |                     .duration_since(std::time::UNIX_EPOCH)
69 | |                     .unwrap_or_default()
70 | |                     .as_micros() as u64;
   | |_______________________________________^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
67 ~                 let now = u64::try_from(std::time::SystemTime::now()
68 +                     .duration_since(std::time::UNIX_EPOCH)
69 +                     .unwrap_or_default()
70 ~                     .as_micros());
   |

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/jsonpath/stream_processor/types.rs:91:19
   |
91 |           let now = std::time::SystemTime::now()
   |  ___________________^
92 | |             .duration_since(std::time::UNIX_EPOCH)
93 | |             .unwrap_or_default()
94 | |             .as_micros() as u64;
   | |_______________________________^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
91 ~         let now = u64::try_from(std::time::SystemTime::now()
92 +             .duration_since(std::time::UNIX_EPOCH)
93 +             .unwrap_or_default()
94 ~             .as_micros());
   |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/stream_processor/types.rs:119:13
    |
119 |             0 => CircuitState::Closed,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
...
122 |             _ => CircuitState::Closed, // Default to closed for unknown states
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
119 -             0 => CircuitState::Closed,
    |

warning: very complex type used. Consider factoring parts into `type` definitions
   --> packages/client/src/jsonpath/stream_processor/types.rs:177:32
    |
177 |       pub(super) chunk_handlers: Vec<
    |  ________________________________^
178 | |         Box<
179 | |             dyn FnMut(
180 | |                     Result<T, super::super::JsonPathError>,
...   |
183 | |         >,
184 | |     >,
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/type_system/conversions.rs:19:5
   |
19 | /     pub fn convert_type(
20 | |         value: TypedValue,
21 | |         target_type: FunctionType,
22 | |     ) -> JsonPathResult<TypedValue> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/type_system/conversions.rs:95:5
   |
95 | /     pub fn validate_function_expression(
96 | |         function_name: &str,
97 | |         arguments: &[FilterExpression],
98 | |     ) -> JsonPathResult<super::core::FunctionSignature> {
   | |_______________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/type_system/conversions.rs:146:13
    |
146 |             (FunctionType::ValueType, FunctionType::LogicalType) => Ok(()),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
147 |             // NodesType can be converted to ValueType (runtime check needed)
148 |             (FunctionType::NodesType, FunctionType::ValueType) => Ok(()),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
146 ~             // NodesType can be converted to ValueType (runtime check needed)
147 ~             (FunctionType::ValueType, FunctionType::LogicalType) | (FunctionType::NodesType, FunctionType::ValueType) => Ok(()),
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/type_system/conversions.rs:166:13
    |
166 |             FilterExpression::Current => Ok(FunctionType::ValueType),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
167 |             FilterExpression::Property { .. } => Ok(FunctionType::ValueType),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
166 -             FilterExpression::Current => Ok(FunctionType::ValueType),
167 -             FilterExpression::Property { .. } => Ok(FunctionType::ValueType),
166 +             FilterExpression::Current | FilterExpression::Property { .. } => Ok(FunctionType::ValueType),
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/type_system/conversions.rs:173:13
    |
173 |             FilterExpression::Comparison { .. } => Ok(FunctionType::LogicalType),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
174 |             FilterExpression::Logical { .. } => Ok(FunctionType::LogicalType),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
175 |             FilterExpression::Regex { .. } => Ok(FunctionType::LogicalType),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
173 ~             FilterExpression::Comparison { .. } | FilterExpression::Logical { .. } | FilterExpression::Regex { .. } => Ok(FunctionType::LogicalType),
174 ~             FilterExpression::Function { name, args } => {
    |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/type_system/utilities.rs:25:13
   |
25 |             FilterValue::Null => TypedValue::Value(serde_json::Value::Null),
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
26 |             FilterValue::Missing => TypedValue::Value(serde_json::Value::Null), /* Missing converts to null */
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
25 ~             FilterValue::Null | FilterValue::Missing => TypedValue::Value(serde_json::Value::Null),
26 ~             /* Missing converts to null */
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/type_system/utilities.rs:35:5
   |
35 |     pub fn typed_value_to_filter_value(value: &TypedValue) -> JsonPathResult<FilterValue> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/type_system/utilities.rs:79:5
   |
79 |     pub fn extract_nodes(value: &TypedValue) -> JsonPathResult<&[serde_json::Value]> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/type_system/utilities.rs:126:13
    |
126 |             serde_json::Value::Array(_) => true, // Always true, even if empty
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 |             serde_json::Value::Object(_) => true, // Always true, even if empty
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
126 ~             serde_json::Value::Array(_) | serde_json::Value::Object(_) => true, // Always true, even if empty
127 ~             // Always true, even if empty
    |

warning: possible intra-doc link using quotes instead of backticks
  --> packages/client/src/jsonpath/ast.rs:12:46
   |
12 |     /// Child property access (.property or ['property'])
   |                                              ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_link_with_quotes

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/ast.rs:238:13
    |
238 |             FilterExpression::Current => 1,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
239 |             FilterExpression::Property { path } => path.len() as u32,
240 |             FilterExpression::Literal { .. } => 1,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
238 ~             FilterExpression::Property { path } => path.len() as u32,
239 ~             FilterExpression::Current | FilterExpression::Literal { .. } => 1,
    |

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/ast.rs:239:52
    |
239 |             FilterExpression::Property { path } => path.len() as u32,
    |                                                    ^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
239 -             FilterExpression::Property { path } => path.len() as u32,
239 +             FilterExpression::Property { path } => u32::try_from(path.len()),
    |

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/ast.rs:254:17
    |
254 |                 selectors.len() as u32 * 2 // Complex JSONPath expressions are more expensive
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
254 -                 selectors.len() as u32 * 2 // Complex JSONPath expressions are more expensive
254 +                 u32::try_from(selectors.len()) * 2 // Complex JSONPath expressions are more expensive
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/compiler.rs:147:5
    |
147 |     pub fn validate(expression: &str) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `u64` to `u32` may truncate the value
  --> packages/client/src/jsonpath/expression/complexity.rs:34:37
   |
34 |                         let range = e.saturating_sub(*s).unsigned_abs() as u32;
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
34 -                         let range = e.saturating_sub(*s).unsigned_abs() as u32;
34 +                         let range = u32::try_from(e.saturating_sub(*s).unsigned_abs());
   |

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/expression/complexity.rs:44:41
   |
44 |                         .saturating_add(selectors.len() as u32);
   |                                         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
44 -                         .saturating_add(selectors.len() as u32);
44 +                         .saturating_add(u32::try_from(selectors.len()));
   |

warning: parameter is only used in recursion
   --> packages/client/src/jsonpath/expression/evaluation.rs:143:10
    |
143 |         &self,
    |          ^^^^
    |
note: parameter used here
   --> packages/client/src/jsonpath/expression/evaluation.rs:157:26
    |
157 |                 .any(|s| self.evaluate_single_selector_at_depth(s, depth)),
    |                          ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter_parser/core.rs:62:5
   |
62 |     pub fn expect_token(&mut self, expected: Token) -> JsonPathResult<()> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/filter_parser/core.rs:62:46
   |
62 |     pub fn expect_token(&mut self, expected: Token) -> JsonPathResult<()> {
   |                                              ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
62 |     pub fn expect_token(&mut self, expected: &Token) -> JsonPathResult<()> {
   |                                              +

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter_parser/core.rs:80:5
   |
80 |     pub fn parse_filter_expression(&mut self) -> JsonPathResult<FilterExpression> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `f64` to `i64` may truncate the value
  --> packages/client/src/jsonpath/filter_parser/expressions.rs:98:53
   |
98 |                         value: FilterValue::Integer(value as i64),
   |                                                     ^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/jsonpath/filter_parser/expressions.rs:200:9
    |
200 |         use crate::jsonpath::ast::JsonSelector;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter_parser/functions.rs:43:13
   |
43 |             "count" => 1,
   |             ^^^^^^^^^^^^
44 |             "length" => 1,
   |             ^^^^^^^^^^^^^
45 |             "value" => 1,
   |             ^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
43 -             "count" => 1,
44 -             "length" => 1,
43 +             "count" | "length" | "value" => 1,
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter_parser/functions.rs:46:13
   |
46 |             "match" => 2,
   |             ^^^^^^^^^^^^
47 |             "search" => 2,
   |             ^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
46 ~             "match" | "search" => 2,
47 ~             _ => {
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/selector_parser/bracket.rs:15:1
   |
15 | pub fn parse_bracket_selector(parser: &mut SelectorParser) -> JsonPathResult<JsonSelector> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/selector_parser/core.rs:33:5
   |
33 |     pub fn parse_selector(&mut self) -> JsonPathResult<JsonSelector> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/selector_parser/core.rs:90:53
   |
90 |     pub(super) fn expect_token(&mut self, expected: Token) -> JsonPathResult<()> {
   |                                                     ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
90 |     pub(super) fn expect_token(&mut self, expected: &Token) -> JsonPathResult<()> {
   |                                                     +

warning: unused `self` argument
   --> packages/client/src/jsonpath/selector_parser/core.rs:109:21
    |
109 |     fn tokens_match(&self, actual: &Token, expected: &Token) -> bool {
    |                     ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/selector_parser/dot.rs:14:1
   |
14 | pub fn parse_dot_selector(parser: &mut SelectorParser) -> JsonPathResult<JsonSelector> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/selector_parser/slice.rs:14:1
   |
14 | / pub fn parse_index_or_slice(
15 | |     parser: &mut SelectorParser,
16 | |     start: i64,
17 | | ) -> JsonPathResult<JsonSelector> {
   | |_________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/selector_parser/slice.rs:85:1
   |
85 | / pub fn parse_slice_from_start(
86 | |     parser: &mut SelectorParser,
87 | |     start: i64,
88 | | ) -> JsonPathResult<JsonSelector> {
   | |_________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this `if` has identical blocks
   --> packages/client/src/jsonpath/selector_parser/slice.rs:96:72
    |
 96 |       } else if matches!(parser.peek_token(), Some(Token::RightBracket)) {
    |  ________________________________________________________________________^
 97 | |         None // Open-ended slice like [1:]
 98 | |     } else if matches!(parser.peek_token(), Some(Token::Colon)) {
    | |_____^
    |
note: same as this
   --> packages/client/src/jsonpath/selector_parser/slice.rs:98:65
    |
 98 |       } else if matches!(parser.peek_token(), Some(Token::Colon)) {
    |  _________________________________________________________________^
 99 | |         None // Empty end in patterns like [1::2]
100 | |     } else {
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: this `if` has identical blocks
   --> packages/client/src/jsonpath/selector_parser/slice.rs:98:65
    |
 98 |       } else if matches!(parser.peek_token(), Some(Token::Colon)) {
    |  _________________________________________________________________^
 99 | |         None // Empty end in patterns like [1::2]
100 | |     } else {
    | |_____^
    |
note: same as this
   --> packages/client/src/jsonpath/selector_parser/slice.rs:100:12
    |
100 |       } else {
    |  ____________^
101 | |         None
102 | |     };
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/selector_parser/slice.rs:116:1
    |
116 | pub fn parse_slice_from_colon(parser: &mut SelectorParser) -> JsonPathResult<JsonSelector> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this `if` has identical blocks
   --> packages/client/src/jsonpath/selector_parser/slice.rs:124:65
    |
124 |       } else if matches!(parser.peek_token(), Some(Token::Colon)) {
    |  _________________________________________________________________^
125 | |         None // Empty end in patterns like [::2]
126 | |     } else {
    | |_____^
    |
note: same as this
   --> packages/client/src/jsonpath/selector_parser/slice.rs:126:12
    |
126 |       } else {
    |  ____________^
127 | |         None
128 | |     };
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/tokenizer/characters.rs:87:1
   |
87 | / fn parse_identifier(
88 | |     parser: &mut ExpressionParser,
89 | |     chars: &[char],
90 | |     mut i: usize,
91 | | ) -> JsonPathResult<usize> {
   | |__________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
91 - ) -> JsonPathResult<usize> {
91 + ) -> usize {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
107-     Ok(i.saturating_sub(1)) // Adjust for loop increment
107+     i.saturating_sub(1) // Adjust for loop increment
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/tokenizer/core.rs:35:5
   |
35 |     pub fn parse(&mut self) -> JsonPathResult<Vec<JsonSelector>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/tokens.rs:180:13
    |
180 |             (Token::RightBracket, Token::RightBracket) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
181 |             (Token::RightParen, Token::RightParen) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
182 |             (Token::LeftParen, Token::LeftParen) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
183 |             (Token::LeftBracket, Token::LeftBracket) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
184 |             (Token::Dot, Token::Dot) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
185 |             (Token::DoubleDot, Token::DoubleDot) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
186 |             (Token::Comma, Token::Comma) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
187 |             (Token::Colon, Token::Colon) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
188 |             (Token::Question, Token::Question) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
189 |             (Token::At, Token::At) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
190 |             (Token::Star, Token::Star) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
191 |             (Token::Equal, Token::Equal) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
192 |             (Token::NotEqual, Token::NotEqual) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
193 |             (Token::Less, Token::Less) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
194 |             (Token::LessEq, Token::LessEq) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
195 |             (Token::Greater, Token::Greater) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
196 |             (Token::GreaterEq, Token::GreaterEq) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
197 |             (Token::LogicalAnd, Token::LogicalAnd) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
198 |             (Token::LogicalOr, Token::LogicalOr) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
199 |             (Token::True, Token::True) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
200 |             (Token::False, Token::False) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
201 |             (Token::Null, Token::Null) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
202 |             (Token::Root, Token::Root) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
203 |             (Token::EOF, Token::EOF) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
204 |             // For tokens with data, we only check the discriminant
205 |             (Token::String(_), Token::String(_)) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
206 |             (Token::Integer(_), Token::Integer(_)) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
207 |             (Token::Number(_), Token::Number(_)) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
208 |             (Token::Identifier(_), Token::Identifier(_)) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
180 ~             // For tokens with data, we only check the discriminant
181 ~             (Token::RightBracket, Token::RightBracket) | (Token::RightParen, Token::RightParen) | (Token::LeftParen, Token::LeftParen) | (Token::LeftBracket, Token::LeftBracket) | (Token::Dot, Token::Dot) | (Token::DoubleDot, Token::DoubleDot) | (Token::Comma, Token::Comma) | (Token::Colon, Token::Colon) | (Token::Question, Token::Question) | (Token::At, Token::At) | (Token::Star, Token::Star) | (Token::Equal, Token::Equal) | (Token::NotEqual, Token::NotEqual) | (Token::Less, Token::Less) | (Token::LessEq, Token::LessEq) | (Token::Greater, Token::Greater) | (Token::GreaterEq, Token::GreaterEq) | (Token::LogicalAnd, Token::LogicalAnd) | (Token::LogicalOr, Token::LogicalOr) | (Token::True, Token::True) | (Token::False, Token::False) | (Token::Null, Token::Null) | (Token::Root, Token::Root) | (Token::EOF, Token::EOF) | (Token::String(_), Token::String(_)) | (Token::Integer(_), Token::Integer(_)) | (Token::Number(_), Token::Number(_)) | (Token::Identifier(_), Token::Identifier(_)) => true,
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/middleware/mod.rs:13:5
   |
13 |     fn process_request(&self, request: HttpRequest) -> crate::error::Result<HttpRequest> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/middleware/mod.rs:18:5
   |
18 |     fn process_response(&self, response: HttpResponse) -> crate::error::Result<HttpResponse> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/middleware/mod.rs:23:5
   |
23 |     fn handle_error(&self, error: HttpError) -> crate::error::Result<HttpError> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: method `add` can be confused for the standard trait method `std::ops::Add::add`
  --> packages/client/src/middleware/mod.rs:41:5
   |
41 | /     pub fn add<M: Middleware + 'static>(mut self, middleware: M) -> Self {
42 | |         self.middlewares.push(Arc::new(middleware));
43 | |         self
44 | |     }
   | |_____^
   |
   = help: consider implementing the trait `std::ops::Add` or choosing a less ambiguous method name
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait
   = note: `#[warn(clippy::should_implement_trait)]` implied by `#[warn(clippy::all)]`

warning: this function has too many lines (119/100)
   --> packages/client/src/middleware/cache.rs:136:5
    |
136 |     fn process_response(&self, response: HttpResponse) -> crate::error::Result<HttpResponse> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this could be rewritten as `let...else`
   --> packages/client/src/middleware/cache.rs:155:9
    |
155 | /         let context = if let Some(ctx) = context { ctx } else {
156 | |             tracing::warn!(
157 | |                 target: "quyc::middleware::cache",
158 | |                 "No request context available for response caching, skipping cache"
159 | |             );
160 | |             return Ok(response);
161 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
155 ~         let Some(context) = context else {
156 +             tracing::warn!(
157 +                 target: "quyc::middleware::cache",
158 +                 "No request context available for response caching, skipping cache"
159 +             );
160 +             return Ok(response);
161 +         };
    |

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/middleware/cache.rs:194:13
    |
194 |             const MAX_CACHEABLE_SIZE: usize = 10 * 1024 * 1024; // 10MB limit for cacheable responses
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: you have declared `#[inline(always)]` on `new`. This is usually a bad idea
  --> packages/client/src/operations/delete.rs:20:5
   |
20 |     #[inline(always)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `header`. This is usually a bad idea
  --> packages/client/src/operations/delete.rs:31:5
   |
31 |     #[inline(always)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `if_match`. This is usually a bad idea
  --> packages/client/src/operations/delete.rs:45:5
   |
45 |     #[inline(always)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/operations/delete.rs:46:5
   |
46 | /     pub fn if_match(mut self, etag: &str) -> Self {
47 | |         if let Ok(header_value) = HeaderValue::from_str(etag) {
48 | |             self.headers.insert(http::header::IF_MATCH, header_value);
...  |
51 | |         self
52 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: adding items after statements is confusing, since items exist from the start of the scope
  --> packages/client/src/operations/delete.rs:80:9
   |
80 |         use ystream::AsyncStream;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: you have declared `#[inline(always)]` on `method`. This is usually a bad idea
  --> packages/client/src/operations/delete.rs:88:5
   |
88 |     #[inline(always)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `url`. This is usually a bad idea
  --> packages/client/src/operations/delete.rs:93:5
   |
93 |     #[inline(always)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `new`. This is usually a bad idea
  --> packages/client/src/operations/download.rs:27:5
   |
27 |     #[inline(always)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `header`. This is usually a bad idea
  --> packages/client/src/operations/download.rs:39:5
   |
39 |     #[inline(always)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `headers`. This is usually a bad idea
  --> packages/client/src/operations/download.rs:53:5
   |
53 |     #[inline(always)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: you have declared `#[inline(always)]` on `resume_from`. This is usually a bad idea
  --> packages/client/src/operations/download.rs:61:5
   |
61 |     #[inline(always)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/operations/get.rs:134:9
    |
134 |         use ystream::AsyncStream;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/operations/patch.rs:153:9
    |
153 |         use ystream::AsyncStream;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/operations/post.rs:150:9
    |
150 |         use ystream::AsyncStream;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/operations/put.rs:84:5
   |
84 | /     pub fn binary(mut self, data: Vec<u8>, content_type: &str) -> Self {
85 | |         if let Ok(header_value) = HeaderValue::from_str(content_type) {
86 | |             self.headers
87 | |                 .insert(http::header::CONTENT_TYPE, header_value);
...  |
91 | |         self
92 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/operations/put.rs:103:5
    |
103 | /     pub fn text(mut self, data: String, content_type: &str) -> Self {
104 | |         if let Ok(header_value) = HeaderValue::from_str(content_type) {
105 | |             self.headers
106 | |                 .insert(http::header::CONTENT_TYPE, header_value);
...   |
110 | |         self
111 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/operations/put.rs:121:5
    |
121 | /     pub fn if_match(mut self, etag: &str) -> Self {
122 | |         if let Ok(header_value) = HeaderValue::from_str(etag) {
123 | |             self.headers.insert(http::header::IF_MATCH, header_value);
...   |
126 | |         self
127 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/operations/put.rs:166:9
    |
166 |         use ystream::AsyncStream;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/protocols/core.rs:75:5
   |
75 |     fn validate(&self) -> Result<(), String>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: more than 3 bools in a struct
   --> packages/client/src/protocols/core.rs:96:1
    |
 96 | / pub struct ProtocolCapabilities {
 97 | |     pub supports_multiplexing: bool,
 98 | |     pub supports_server_push: bool,
 99 | |     pub supports_early_data: bool,
100 | |     pub supports_0rtt: bool,
101 | |     pub max_concurrent_streams: Option<u32>,
102 | | }
    | |_^
    |
    = help: consider using a state machine or refactoring bools into two-variant enums
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/protocols/h2/adapter.rs:48:1
   |
48 | / fn create_h2_connection_stream(
49 | |     _request: HttpRequest,
50 | |     _config: H2Config,
51 | | ) -> Result<AsyncStream<HttpChunk, 1024>, HttpError> {
   | |____________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
51 - ) -> Result<AsyncStream<HttpChunk, 1024>, HttpError> {
51 + ) -> ystream::AsyncStream<http::response::HttpChunk> {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
58 ~     AsyncStream::with_channel(move |sender| {
59 +         // In production, this would:
60 +         // 1. Establish TCP connection
61 +         // 2. Do TLS handshake if needed
62 +         // 3. Perform h2::client::handshake()
63 +         // 4. Send request through h2
64 +         // 5. Stream response chunks
65 +         
66 +         // For now, emit test response
67 +         emit!(sender, HttpChunk::Headers(
68 +             http::StatusCode::OK,
69 +             http::HeaderMap::new()
70 +         ));
71 +         
72 +         emit!(sender, HttpChunk::Body(
73 +             bytes::Bytes::from("H2 adapter response")
74 +         ));
75 +         
76 +         emit!(sender, HttpChunk::End);
77 +     })
   |

warning: wildcard matches only a single variant and will also match any future added variants
  --> packages/client/src/protocols/h2/chunks.rs:36:13
   |
36 |             _ => None,
   |             ^ help: try: `H2ConnectionChunk::Ready`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants

warning: wildcard matches only a single variant and will also match any future added variants
  --> packages/client/src/protocols/h2/chunks.rs:78:13
   |
78 |             _ => None,
   |             ^ help: try: `H2RequestChunk::Sent { .. }`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants

warning: this function has too many lines (104/100)
   --> packages/client/src/protocols/h2/connection.rs:144:5
    |
144 | /     pub fn send_request_stream<T>(
145 | |         &self,
146 | |         io: T,
147 | |         request: Request<()>,
...   |
150 | |     where
151 | |         T: std::io::Read + std::io::Write + tokio::io::AsyncRead + tokio::io::AsyncWrite + Unpin + Send + 'static,
    | |__________________________________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: non-binding `let` on a future
  --> packages/client/src/protocols/h2/implementation.rs:86:25
   |
86 |                         let _ = connection;
   |                         ^^^^^^^^^^^^^^^^^^^
   |
   = help: consider awaiting the future or dropping explicitly with `std::mem::drop`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_future
   = note: `#[warn(clippy::let_underscore_future)]` implied by `#[warn(clippy::all)]`

warning: this loop never actually loops
   --> packages/client/src/protocols/h2/implementation.rs:90:21
    |
 90 | /                     loop {
 91 | |                         match rt.block_on(h2.ready()) {
 92 | |                             Ok(mut ready_h2) => {
...   |
155 | |                     }
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#never_loop
    = note: `#[warn(clippy::never_loop)]` implied by `#[warn(clippy::all)]`

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h2/streaming.rs:186:13
    |
186 |             use futures::task::noop_waker_ref;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h2/streaming.rs:187:13
    |
187 |             use std::task::Context;
    |             ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: large size difference between variants
  --> packages/client/src/protocols/h2/strategy.rs:17:1
   |
17 | / enum H2Stream {
18 | |     Tls(tokio_rustls::client::TlsStream<TcpStream>),
   | |     ----------------------------------------------- the largest variant contains at least 1104 bytes
19 | |     Plain(TcpStream),
   | |     ---------------- the second-largest variant contains at least 40 bytes
20 | | }
   | |_^ the entire enum is at least 1104 bytes
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant
   = note: `#[warn(clippy::large_enum_variant)]` implied by `#[warn(clippy::all)]`
help: consider boxing the large fields or introducing indirection in some other way to reduce the total size of the enum
   |
18 -     Tls(tokio_rustls::client::TlsStream<TcpStream>),
18 +     Tls(Box<tokio_rustls::client::TlsStream<TcpStream>>),
   |

warning: this function has too many arguments (8/7)
   --> packages/client/src/protocols/h2/strategy.rs:157:5
    |
157 | /     fn execute_with_runtime(
158 | |         url: &url::Url,
159 | |         host: &str,
160 | |         port: u16,
...   |
165 | |         body_bytes: Option<Bytes>,
166 | |     ) -> Result<(http::StatusCode, http::HeaderMap, h2::RecvStream), String> {
    | |____________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments

warning: this function has too many lines (118/100)
   --> packages/client/src/protocols/h2/strategy.rs:189:5
    |
189 |     fn execute(&self, request: HttpRequest) -> HttpResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: these match arms have identical bodies
   --> packages/client/src/protocols/h2/strategy.rs:199:17
    |
199 |                 "http" => 80,
    |                 ^^^^^^^^^^^^
200 |                 _ => 80,
    |                 ^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
199 -                 "http" => 80,
    |

warning: these match arms have identical bodies
   --> packages/client/src/protocols/h3/adapter.rs:137:13
    |
137 | /             H3AdapterError::ConnectionFailed { .. } => {
138 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
139 | |             }
    | |_____________^
140 | /             H3AdapterError::SerializationFailed { .. } => {
141 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
142 | |             }
    | |_____________^
143 | /             H3AdapterError::InvalidRequest { .. } => {
144 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
145 | |             }
    | |_____________^
146 | /             H3AdapterError::ProtocolError { .. } => {
147 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
148 | |             }
    | |_____________^
...
152 | /             H3AdapterError::ResourceLimitExceeded { .. } => {
153 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
154 | |             }
    | |_____________^
155 | /             H3AdapterError::StreamError { .. } => {
156 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
157 | |             }
    | |_____________^
158 | /             H3AdapterError::SecurityError { .. } => {
159 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
160 | |             }
    | |_____________^
161 | /             H3AdapterError::DnsError { .. } => {
162 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
163 | |             }
    | |_____________^
164 | /             H3AdapterError::IoError { .. } => {
165 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
166 | |             }
    | |_____________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
137 ~             H3AdapterError::Timeout { .. } => {
138 |                 HttpError::new(crate::error::types::Kind::Timeout).with(err)
139 |             }
140 ~             H3AdapterError::ConnectionFailed { .. } | H3AdapterError::SerializationFailed { .. } | H3AdapterError::InvalidRequest { .. } | H3AdapterError::ProtocolError { .. } | H3AdapterError::ResourceLimitExceeded { .. } | H3AdapterError::StreamError { .. } | H3AdapterError::SecurityError { .. } | H3AdapterError::DnsError { .. } | H3AdapterError::IoError { .. } => {
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/h3/adapter.rs:175:1
    |
175 | / pub fn execute_h3_request(
176 | |     request: HttpRequest,
177 | |     config: H3Config,
178 | | ) -> Result<HttpResponse, HttpError> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function has too many lines (125/100)
   --> packages/client/src/protocols/h3/adapter.rs:175:1
    |
175 | / pub fn execute_h3_request(
176 | |     request: HttpRequest,
177 | |     config: H3Config,
178 | | ) -> Result<HttpResponse, HttpError> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/adapter.rs:176:14
    |
176 |     request: HttpRequest,
    |              ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
176 |     request: &HttpRequest,
    |              +

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/adapter.rs:177:13
    |
177 |     config: H3Config,
    |             ^^^^^^^^
    |
help: or consider marking this type as `Copy`
   --> packages/client/src/protocols/strategy.rs:205:1
    |
205 | pub struct H3Config {
    | ^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
177 |     config: &H3Config,
    |             +

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/h3/adapter.rs:230:9
    |
230 | /         let serialized_request = match serialize_http_request(HttpRequest::new(
231 | |             method.clone(),
232 | |             match url::Url::parse(&format!("{scheme}://{host}{path}")) {
233 | |                 Ok(url) => url,
...   |
241 | |             Err(_) => return, // Error serializing request
242 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
230 ~         let Ok(serialized_request) = serialize_http_request(HttpRequest::new(
231 +             method.clone(),
232 +             match url::Url::parse(&format!("{scheme}://{host}{path}")) {
233 +                 Ok(url) => url,
234 +                 Err(_) => return, // Error parsing URL
235 +             },
236 +             Some(headers.clone()),
237 +             body_data.clone(),
238 +             None,
239 +         ), &config_clone) else { return };
    |

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h3/adapter.rs:372:5
    |
372 |     use crate::protocols::strategy::CongestionControl;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/protocols/h3/adapter.rs:360:40
    |
360 |     quiche_config.set_max_idle_timeout(config.max_idle_timeout.as_millis() as u64);
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
360 -     quiche_config.set_max_idle_timeout(config.max_idle_timeout.as_millis() as u64);
360 +     quiche_config.set_max_idle_timeout(u64::try_from(config.max_idle_timeout.as_millis()));
    |

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/protocols/h3/adapter.rs:400:40
    |
400 |     quiche_config.set_max_idle_timeout(config.max_idle_timeout.as_millis() as u64);
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
400 -     quiche_config.set_max_idle_timeout(config.max_idle_timeout.as_millis() as u64);
400 +     quiche_config.set_max_idle_timeout(u64::try_from(config.max_idle_timeout.as_millis()));
    |

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/protocols/h3/adapter.rs:464:21
    |
464 |       let timestamp = SystemTime::now()
    |  _____________________^
465 | |         .duration_since(SystemTime::UNIX_EPOCH)
466 | |         .unwrap_or_default()
467 | |         .as_nanos() as u64;
    | |__________________________^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
464 ~     let timestamp = u64::try_from(SystemTime::now()
465 +         .duration_since(SystemTime::UNIX_EPOCH)
466 +         .unwrap_or_default()
467 ~         .as_nanos());
    |

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/adapter.rs:473:36
    |
473 | fn serialize_http_request(request: HttpRequest, config: &H3Config) -> Result<Vec<u8>, HttpError> {
    |                                    ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
473 | fn serialize_http_request(request: &HttpRequest, config: &H3Config) -> Result<Vec<u8>, HttpError> {
    |                                    +

warning: this function's return value is unnecessarily wrapped by `Result`
   --> packages/client/src/protocols/h3/adapter.rs:568:1
    |
568 | / fn convert_streaming_body_to_bytes_lock_free(
569 | |     stream: AsyncStream<HttpChunk, 1024>,
570 | |     config: &H3Config,
571 | | ) -> Result<Bytes, HttpError> {
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
571 - ) -> Result<Bytes, HttpError> {
571 + ) -> bytes::Bytes {
    |
help: ...and then remove the surrounding `Ok()` from returning expressions
    |
573 -     Ok(serialize_streaming_body_bridge(stream, config))
573 +     serialize_streaming_body_bridge(stream, config)
    |

warning: manual `Debug` impl does not include all fields
  --> packages/client/src/protocols/h3/connection.rs:23:1
   |
23 | / impl std::fmt::Debug for H3Connection {
24 | |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
25 | |         f.debug_struct("H3Connection")
26 | |             .field("config", &self.config)
...  |
30 | | }
   | |_^
   |
note: this field is unused
  --> packages/client/src/protocols/h3/connection.rs:19:5
   |
19 |     h3_conn: Arc<std::sync::Mutex<Option<quiche::h3::Connection>>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider including all fields in this `Debug` impl
   = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/h3/connection.rs:172:43
    |
172 |                     let mut recv_buffer = [0; 65535];
    |                                           ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays
    = note: `#[warn(clippy::large_stack_arrays)]` implied by `#[warn(clippy::pedantic)]`

warning: these match arms have identical bodies
   --> packages/client/src/protocols/h3/connection.rs:223:29
    |
223 | / ...                   Ok((_, quiche::h3::Event::Reset { .. })) => {
224 | | ...                       // Stream was reset
225 | | ...                   },
    | |_______________________^
226 |   ...                   
227 | / ...                   Ok((_, quiche::h3::Event::PriorityUpdate)) => {
228 | | ...                       // Priority update - continue polling
229 | | ...                   },
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
223 ~                             Ok((_, quiche::h3::Event::Reset { .. })) | Ok((_, quiche::h3::Event::PriorityUpdate)) => {
224 |                                 // Stream was reset
225 |                             },
226 |                             
227 ~                             Ok((_, quiche::h3::Event::GoAway)) => {
    |

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/h3/connection.rs:351:30
    |
351 |             let mut buffer = [0; 65535];
    |                              ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> packages/client/src/protocols/h3/connection.rs:737:13
    |
737 | /             match name_str.as_ref() {
738 | |                 ":status" => {
739 | |                     if let Ok(status_code) = value_str.parse::<u16>()
740 | |                         && let Ok(parsed_status) = http::StatusCode::from_u16(status_code) {
...   |
745 | |                 _ => {},
746 | |             }
    | |_____________^
    |
    = note: you might want to preserve the comments from inside the `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
    = note: `#[warn(clippy::single_match)]` implied by `#[warn(clippy::all)]`
help: try
    |
737 ~             if name_str.as_ref() == ":status" {
738 +                 if let Ok(status_code) = value_str.parse::<u16>()
739 +                     && let Ok(parsed_status) = http::StatusCode::from_u16(status_code) {
740 +                         status = parsed_status;
741 +                     }
742 +             }
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/h3/connection.rs:836:5
    |
836 | /     pub fn send_request_separated(
837 | |         &self, 
838 | |         request_data: &[u8], 
839 | |         _stream_id: u64
840 | |     ) -> Result<(http::StatusCode, http::HeaderMap, AsyncStream<crate::http::HttpChunk, 1024>), String> {
    | |_______________________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: it is more concise to loop over references to containers instead of using explicit iteration methods
   --> packages/client/src/protocols/h3/connection.rs:876:38
    |
876 | ...                   for h in list.iter() {
    |                                ^^^^^^^^^^^ help: to write this more concisely, try: `&list`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop
    = note: `#[warn(clippy::explicit_iter_loop)]` implied by `#[warn(clippy::pedantic)]`

warning: this `if` statement can be collapsed
   --> packages/client/src/protocols/h3/connection.rs:881:37
    |
881 | / ...                   if let Ok(status_str) = std::str::from_utf8(value_bytes) {
882 | | ...                       if let Ok(status_u16) = status_str.parse::<u16>() {
883 | | ...                           if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
884 | | ...                               status_code = parsed_status;
...   |
887 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
    = note: `#[warn(clippy::collapsible_if)]` implied by `#[warn(clippy::all)]`
help: collapse nested if block
    |
881 ~                                     if let Ok(status_str) = std::str::from_utf8(value_bytes)
882 ~                                         && let Ok(status_u16) = status_str.parse::<u16>() {
883 |                                             if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
884 |                                                 status_code = parsed_status;
885 |                                             }
886 ~                                         }
    |

warning: this `if` statement can be collapsed
   --> packages/client/src/protocols/h3/connection.rs:882:41
    |
882 | / ...                   if let Ok(status_u16) = status_str.parse::<u16>() {
883 | | ...                       if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
884 | | ...                           status_code = parsed_status;
885 | | ...                       }
886 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
882 ~                                         if let Ok(status_u16) = status_str.parse::<u16>()
883 ~                                             && let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
884 |                                                 status_code = parsed_status;
885 ~                                             }
    |

warning: this `if` statement can be collapsed
   --> packages/client/src/protocols/h3/connection.rs:888:40
    |
888 |   ...                   } else if !name_bytes.starts_with(b":") {
    |  ______________________________^
889 | | ...                       if let (Ok(name), Ok(value)) = (
890 | | ...                           http::HeaderName::from_bytes(name_bytes),
891 | | ...                           http::HeaderValue::from_bytes(value_bytes)
...   |
895 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
888 ~                                 } else if !name_bytes.starts_with(b":")
889 ~                                     && let (Ok(name), Ok(value)) = (
890 |                                         http::HeaderName::from_bytes(name_bytes),
...
893 |                                         headers_map.insert(name, value);
894 ~                                     }
    |

warning: this `if` statement can be collapsed
   --> packages/client/src/protocols/h3/connection.rs:903:33
    |
903 | / ...                   if let (Ok(mut conn), Ok(mut h3_opt)) = (conn_clone.lock(), h3_conn_clone.lock()) {
904 | | ...                       if let Some(ref mut h3) = h3_opt.as_mut() {
905 | | ...                           loop {
906 | | ...                               match h3.poll(&mut conn) {
...   |
936 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
903 ~                                 if let (Ok(mut conn), Ok(mut h3_opt)) = (conn_clone.lock(), h3_conn_clone.lock())
904 ~                                     && let Some(ref mut h3) = h3_opt.as_mut() {
905 |                                         loop {
...
934 |                                         }
935 ~                                     }
    |

warning: this function has too many lines (119/100)
   --> packages/client/src/protocols/h3/connection.rs:957:5
    |
957 | /     pub fn send_request(
958 | |         &self, 
959 | |         request_data: &[u8], 
960 | |         _stream_id: u64
961 | |     ) -> AsyncStream<crate::http::HttpChunk, 1024> {
    | |__________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: it is more concise to loop over references to containers instead of using explicit iteration methods
    --> packages/client/src/protocols/h3/connection.rs:1017:54
     |
1017 | ...                   for h in list.iter() {
     |                                ^^^^^^^^^^^ help: to write this more concisely, try: `&list`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop

warning: this `if` statement can be collapsed
    --> packages/client/src/protocols/h3/connection.rs:1023:53
     |
1023 | / ...                   if let Ok(status_str) = std::str::from_utf8(value_bytes) {
1024 | | ...                       if let Ok(status_u16) = status_str.parse::<u16>() {
1025 | | ...                           if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
1026 | | ...                               status_code = parsed_status;
...    |
1029 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
1023 ~                                                     if let Ok(status_str) = std::str::from_utf8(value_bytes)
1024 ~                                                         && let Ok(status_u16) = status_str.parse::<u16>() {
1025 |                                                             if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
1026 |                                                                 status_code = parsed_status;
1027 |                                                             }
1028 ~                                                         }
     |

warning: this `if` statement can be collapsed
    --> packages/client/src/protocols/h3/connection.rs:1024:57
     |
1024 | / ...                   if let Ok(status_u16) = status_str.parse::<u16>() {
1025 | | ...                       if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
1026 | | ...                           status_code = parsed_status;
1027 | | ...                       }
1028 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
1024 ~                                                         if let Ok(status_u16) = status_str.parse::<u16>()
1025 ~                                                             && let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
1026 |                                                                 status_code = parsed_status;
1027 ~                                                             }
     |

warning: this `if` statement can be collapsed
    --> packages/client/src/protocols/h3/connection.rs:1032:53
     |
1032 | / ...                   if !name_bytes.starts_with(b":") {
1033 | | ...                       if let (Ok(name), Ok(value)) = (
1034 | | ...                           http::HeaderName::from_bytes(name_bytes),
1035 | | ...                           http::HeaderValue::from_bytes(value_bytes)
...    |
1039 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
1032 ~                                                     if !name_bytes.starts_with(b":")
1033 ~                                                         && let (Ok(name), Ok(value)) = (
1034 |                                                             http::HeaderName::from_bytes(name_bytes),
 ...
1037 |                                                             headers_map.insert(name, value);
1038 ~                                                         }
     |

warning: this `if` statement can be collapsed
    --> packages/client/src/protocols/h3/connection.rs:1102:5
     |
1102 | /     if let Ok(request_str) = std::str::from_utf8(data) {
1103 | |         if request_str.starts_with("GET ") || request_str.starts_with("POST ") || 
1104 | |            request_str.starts_with("PUT ") || request_str.starts_with("DELETE ") ||
1105 | |            request_str.starts_with("HEAD ") || request_str.starts_with("OPTIONS ") ||
...    |
1110 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
1102 ~     if let Ok(request_str) = std::str::from_utf8(data)
1103 ~         && (request_str.starts_with("GET ") || request_str.starts_with("POST ") || 
1104 |            request_str.starts_with("PUT ") || request_str.starts_with("DELETE ") ||
1105 |            request_str.starts_with("HEAD ") || request_str.starts_with("OPTIONS ") ||
1106 ~            request_str.starts_with("PATCH ")) {
1107 |             // Use existing HTTP request parsing function
1108 |             return parse_http_request_headers(data);
1109 ~         }
     |

warning: adding items after statements is confusing, since items exist from the start of the scope
  --> packages/client/src/protocols/h3/strategy/core.rs:77:9
   |
77 |         use crate::protocols::strategy::CongestionControl;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/protocols/h3/strategy/core.rs:65:37
   |
65 |         config.set_max_idle_timeout(self.config.max_idle_timeout.as_millis() as u64);
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
65 -         config.set_max_idle_timeout(self.config.max_idle_timeout.as_millis() as u64);
65 +         config.set_max_idle_timeout(u64::try_from(self.config.max_idle_timeout.as_millis()));
   |

warning: this loop could be written as a `while let` loop
   --> packages/client/src/protocols/h3/strategy/core.rs:163:33
    |
163 | / ...                   loop {
164 | | ...                       match body_stream.next().await {
165 | | ...                           Some(chunk) => {
166 | | ...                               match chunk {
...   |
180 | | ...                   }
    | |_______________________^ help: try: `while let Some(chunk) = body_stream.next().await { .. }`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop
    = note: `#[warn(clippy::while_let_loop)]` implied by `#[warn(clippy::all)]`

warning: this loop could be written as a `while let` loop
   --> packages/client/src/protocols/h3/strategy/core.rs:192:41
    |
192 | / ...                   loop {
193 | | ...                       match body_stream.next().await {
194 | | ...                           Some(chunk) => {
195 | | ...                               match chunk {
...   |
209 | | ...                   }
    | |_______________________^ help: try: `while let Some(chunk) = body_stream.next().await { .. }`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/protocols/h3/strategy/core.rs:244:9
    |
244 |         self.config.initial_max_streams_bidi as usize
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
244 -         self.config.initial_max_streams_bidi as usize
244 +         usize::try_from(self.config.initial_max_streams_bidi)
    |

warning: this function has too many arguments (8/7)
   --> packages/client/src/protocols/h3/strategy/core.rs:251:5
    |
251 | /     fn execute_with_runtime(
252 | |         _url: &url::Url,
253 | |         host: &str,
254 | |         port: u16,
...   |
259 | |         body_data: Option<crate::http::request::RequestBody>,
260 | |     ) -> Result<(http::StatusCode, http::HeaderMap, AsyncStream<crate::http::HttpChunk, 1024>), String> {
    | |_______________________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/strategy/core.rs:258:18
    |
258 |         headers: http::HeaderMap,
    |                  ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
258 |         headers: &http::HeaderMap,
    |                  +

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/protocols/h3/strategy/core.rs:311:21
    |
311 |       let timestamp = SystemTime::now()
    |  _____________________^
312 | |         .duration_since(SystemTime::UNIX_EPOCH)
313 | |         .unwrap_or_default()
314 | |         .as_nanos() as u64;
    | |__________________________^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
311 ~     let timestamp = u64::try_from(SystemTime::now()
312 +         .duration_since(SystemTime::UNIX_EPOCH)
313 +         .unwrap_or_default()
314 ~         .as_nanos());
    |

warning: variables can be used directly in the `format!` string
   --> packages/client/src/protocols/h3/strategy/core.rs:391:20
    |
391 |     let boundary = format!("----formdata-quyc-{:x}", timestamp);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
    = note: `#[warn(clippy::uninlined_format_args)]` implied by `#[warn(clippy::pedantic)]`
help: change this to
    |
391 -     let boundary = format!("----formdata-quyc-{:x}", timestamp);
391 +     let boundary = format!("----formdata-quyc-{timestamp:x}");
    |

warning: variables can be used directly in the `format!` string
   --> packages/client/src/protocols/h3/strategy/core.rs:394:24
    |
394 |     let content_type = format!("multipart/form-data; boundary={}", boundary);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
394 -     let content_type = format!("multipart/form-data; boundary={}", boundary);
394 +     let content_type = format!("multipart/form-data; boundary={boundary}");
    |

warning: variables can be used directly in the `format!` string
   --> packages/client/src/protocols/h3/strategy/core.rs:406:32
    |
406 |         body.extend_from_slice(format!("--{}\r\n", boundary).as_bytes());
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
406 -         body.extend_from_slice(format!("--{}\r\n", boundary).as_bytes());
406 +         body.extend_from_slice(format!("--{boundary}\r\n").as_bytes());
    |

warning: variables can be used directly in the `format!` string
   --> packages/client/src/protocols/h3/strategy/core.rs:418:36
    |
418 |             body.extend_from_slice(format!("Content-Type: {}\r\n", content_type).as_bytes());
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
418 -             body.extend_from_slice(format!("Content-Type: {}\r\n", content_type).as_bytes());
418 +             body.extend_from_slice(format!("Content-Type: {content_type}\r\n").as_bytes());
    |

warning: variables can be used directly in the `format!` string
   --> packages/client/src/protocols/h3/strategy/core.rs:441:28
    |
441 |     body.extend_from_slice(format!("--{}--\r\n", boundary).as_bytes());
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
441 -     body.extend_from_slice(format!("--{}--\r\n", boundary).as_bytes());
441 +     body.extend_from_slice(format!("--{boundary}--\r\n").as_bytes());
    |

warning: these match arms have identical bodies
   --> packages/client/src/protocols/h3/strategy/core.rs:456:13
    |
456 | /             crate::http::HttpChunk::Data(data) => {
457 | |                 body_bytes.extend_from_slice(&data);
458 | |             },
    | |_____________^
459 | /             crate::http::HttpChunk::Body(data) => {
460 | |                 body_bytes.extend_from_slice(&data);
461 | |             },
    | |_____________^
462 | /             crate::http::HttpChunk::Chunk(data) => {
463 | |                 body_bytes.extend_from_slice(&data);
464 | |             },
    | |_____________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
456 -             crate::http::HttpChunk::Data(data) => {
457 -                 body_bytes.extend_from_slice(&data);
458 -             },
459 -             crate::http::HttpChunk::Body(data) => {
456 +             crate::http::HttpChunk::Data(data) | crate::http::HttpChunk::Body(data) | crate::http::HttpChunk::Chunk(data) => {
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/h3/strategy/core.rs:478:1
    |
478 | / pub fn serialize_multipart_form_data_public(
479 | |     fields: &[crate::http::request::MultipartField],
480 | |     headers: &mut http::HeaderMap,
481 | | ) -> Result<Vec<u8>, String> {
    | |____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/h3/strategy/core.rs:485:1
    |
485 | / pub fn serialize_http_request_for_h3_public(
486 | |     method: &http::Method,
487 | |     uri: &str,
488 | |     headers: &mut http::HeaderMap,
489 | |     body_data: Option<&crate::http::request::RequestBody>,
490 | | ) -> Result<Vec<u8>, String> {
    | |____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: unused `self` argument
  --> packages/client/src/protocols/h3/strategy/connection.rs:27:33
   |
27 |     fn send_error_and_return<T>(&self, body_tx: &AsyncStreamSender<HttpBodyChunk>, message: String) -> Result<T, ()> {
   |                                 ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
  --> packages/client/src/protocols/h3/strategy/connection.rs:90:9
   |
90 |         &self,
   |         ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/connection.rs:133:9
    |
133 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function has too many lines (109/100)
   --> packages/client/src/protocols/h3/strategy/connection.rs:237:5
    |
237 | /     fn perform_handshake(
238 | |         &self,
239 | |         quic_conn: &mut quiche::Connection,
240 | |         socket: &UdpSocket,
241 | |         body_tx: &AsyncStreamSender<HttpBodyChunk>,
242 | |     ) -> Result<(), ()> {
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/h3/strategy/connection.rs:269:23
    |
269 |         let mut buf = [0; 65535];
    |                       ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/protocols/h3/strategy/processing.rs:56:17
   |
56 |         method: Method,
   |                 ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
56 |         method: &Method,
   |                 +

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/protocols/h3/strategy/processing.rs:57:17
   |
57 |         scheme: String,
   |                 ^^^^^^ help: consider changing the type to: `&str`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/protocols/h3/strategy/processing.rs:58:15
   |
58 |         host: String,
   |               ^^^^^^ help: consider changing the type to: `&str`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/protocols/h3/strategy/processing.rs:59:15
   |
59 |         path: String,
   |               ^^^^^^ help: consider changing the type to: `&str`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/strategy/processing.rs:62:17
    |
 62 |         config: H3Config,
    |                 ^^^^^^^^
    |
help: or consider marking this type as `Copy`
   --> packages/client/src/protocols/strategy.rs:205:1
    |
205 | pub struct H3Config {
    | ^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
 62 |         config: &H3Config,
    |                 +

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h3/strategy/processing.rs:216:9
    |
216 |         const MAX_MULTIPART_SIZE: usize = 100 * 1024 * 1024; // 100MB hard limit
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:277:9
    |
277 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:323:9
    |
323 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:363:9
    |
363 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h3/strategy/processing.rs:372:9
    |
372 |         const MAX_BODY_SIZE: usize = 100 * 1024 * 1024; // 100MB hard limit
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:416:9
    |
416 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/strategy/processing.rs:442:21
    |
442 |         headers_tx: AsyncStreamSender<HttpHeader, 256>,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
442 |         headers_tx: &AsyncStreamSender<HttpHeader, 256>,
    |                     +

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/strategy/processing.rs:443:18
    |
443 |         body_tx: AsyncStreamSender<HttpBodyChunk, 1024>,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
443 |         body_tx: &AsyncStreamSender<HttpBodyChunk, 1024>,
    |                  +

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/h3/strategy/processing.rs:446:23
    |
446 |         let mut buf = [0; 65535];
    |                       ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:612:9
    |
612 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:678:28
    |
678 |     fn detect_content_type(&self, body_data: &crate::http::request::RequestBody) -> Option<&str> {
    |                            ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:689:37
    |
689 |     fn select_compression_algorithm(&self, config: &crate::config::HttpConfig) -> crate::http::headers::CompressionAlgorithm {
    |                                     ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:702:30
    |
702 |     fn get_compression_level(&self, algorithm: crate::http::headers::CompressionAlgorithm, config: &crate::config::HttpConfig) -> Option<...
    |                              ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: these match arms have identical bodies
  --> packages/client/src/protocols/h3/strategy/security.rs:15:17
   |
15 |                 [127, _, _, _] => Ok(()),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^
16 |                 // Allow private networks for legitimate internal API calls
17 |                 [10, _, _, _] => Ok(()),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^
18 |                 [172, 16..=31, _, _] => Ok(()),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19 |                 [192, 168, _, _] => Ok(()),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
25 |                 _ => Ok(()),
   |                 ^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arms
   |
15 ~                 // Allow private networks for legitimate internal API calls
16 ~                 // Block reserved addresses
   |

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/protocols/intelligence.rs:218:13
    |
218 |             successes as f64 / total as f64
    |             ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/protocols/intelligence.rs:218:32
    |
218 |             successes as f64 / total as f64
    |                                ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/intelligence.rs:322:5
    |
322 |     pub fn update_alt_svc_endpoints(&self, alt_svc_header: &str) -> Result<(), String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `f64` to `usize` may truncate the value
   --> packages/client/src/protocols/intelligence.rs:674:27
    |
674 |         let target_size = (self.config.max_domains as f64 * 0.9) as usize;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `f64` to `usize` may lose the sign of the value
   --> packages/client/src/protocols/intelligence.rs:674:27
    |
674 |         let target_size = (self.config.max_domains as f64 * 0.9) as usize;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/protocols/intelligence.rs:674:28
    |
674 |         let target_size = (self.config.max_domains as f64 * 0.9) as usize;
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/intelligence.rs:702:5
    |
702 |     pub fn update_alt_svc_for_domain(&self, domain: &str, alt_svc_header: &str) -> Result<(), String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/intelligence.rs:723:5
    |
723 | /     pub fn update_alt_svc_endpoint_validation_status(
724 | |         &self, 
725 | |         domain: &str, 
726 | |         protocol: &str, 
727 | |         port: u16, 
728 | |         status: AltSvcValidationStatus
729 | |     ) -> Result<(), String> {
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/protocols/intelligence.rs:793:5
    |
793 | /     SystemTime::now()
794 | |         .duration_since(UNIX_EPOCH)
795 | |         .unwrap_or_default()
796 | |         .as_nanos() as u64
    | |__________________________^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
793 ~     u64::try_from(SystemTime::now()
794 +         .duration_since(UNIX_EPOCH)
795 +         .unwrap_or_default()
796 +         .as_nanos())
    |

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/quiche/chunks.rs:299:48
    |
299 |     pub fn streams_available(readable_streams: Vec<u64>, writable_streams: Vec<u64>) -> Self {
    |                                                ^^^^^^^^ help: consider changing the type to: `&[u64]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/quiche/chunks.rs:299:76
    |
299 |     pub fn streams_available(readable_streams: Vec<u64>, writable_streams: Vec<u64>) -> Self {
    |                                                                            ^^^^^^^^ help: consider changing the type to: `&[u64]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this function has too many lines (188/100)
   --> packages/client/src/protocols/quiche/h3_adapter.rs:110:5
    |
110 | /     pub fn send_request(
111 | |         &self,
112 | |         method: &Method,
113 | |         path: &str,
114 | |         headers: &HeaderMap,
115 | |         body: Option<&[u8]>,
116 | |     ) -> AsyncStream<Http3Chunk> {
    | |________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:128:17
    |
128 | /                 let _conn_guard = if let Ok(guard) = conn.lock() { guard } else {
129 | |                     emit!(
130 | |                         sender,
131 | |                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
132 | |                     );
133 | |                     return;
134 | |                 };
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
128 ~                 let Ok(_conn_guard) = conn.lock() else {
129 +                     emit!(
130 +                         sender,
131 +                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
132 +                     );
133 +                     return;
134 +                 };
    |

warning: calls to `push` immediately after creation
   --> packages/client/src/protocols/quiche/h3_adapter.rs:141:13
    |
141 | /             let mut http3_headers = Vec::new();
142 | |             http3_headers.push((b":method".to_vec(), method.as_str().as_bytes().to_vec()));
143 | |             http3_headers.push((b":path".to_vec(), path.as_bytes().to_vec()));
144 | |             http3_headers.push((b":scheme".to_vec(), b"https".to_vec()));
145 | |             http3_headers.push((b":authority".to_vec(), b"localhost".to_vec()));
    | |________________________________________________________________________________^ help: consider using the `vec![]` macro: `let mut http3_headers = vec![..];`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#vec_init_then_push
    = note: `#[warn(clippy::vec_init_then_push)]` implied by `#[warn(clippy::all)]`

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:157:17
    |
157 | /                 let mut conn_guard = if let Ok(guard) = conn.lock() { guard } else {
158 | |                     emit!(
159 | |                         sender,
160 | |                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
161 | |                     );
162 | |                     return;
163 | |                 };
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
157 ~                 let Ok(mut conn_guard) = conn.lock() else {
158 +                     emit!(
159 +                         sender,
160 +                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
161 +                     );
162 +                     return;
163 +                 };
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:177:17
    |
177 | /                 let mut conn_guard = if let Ok(guard) = conn.lock() { guard } else {
178 | |                     emit!(
179 | |                         sender,
180 | |                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
181 | |                     );
182 | |                     return;
183 | |                 };
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
177 ~                 let Ok(mut conn_guard) = conn.lock() else {
178 +                     emit!(
179 +                         sender,
180 +                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
181 +                     );
182 +                     return;
183 +                 };
    |

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/quiche/h3_adapter.rs:195:27
    |
195 |             let mut buf = [0; 65535];
    |                           ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/quiche/h3_adapter.rs:196:36
    |
196 |             let mut response_buf = [0; 65535];
    |                                    ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:202:25
    |
202 | /                         let mut conn_guard = if let Ok(guard) = conn.lock() { guard } else {
203 | |                             emit!(
204 | |                                 sender,
205 | |                                 Http3Chunk::bad_chunk("Failed to lock connection".to_string())
206 | |                             );
207 | |                             return;
208 | |                         };
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
202 ~                         let Ok(mut conn_guard) = conn.lock() else {
203 +                             emit!(
204 +                                 sender,
205 +                                 Http3Chunk::bad_chunk("Failed to lock connection".to_string())
206 +                             );
207 +                             return;
208 +                         };
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:241:25
    |
241 | /                         let mut conn_guard = if let Ok(guard) = conn.lock() { guard } else {
242 | |                             emit!(
243 | |                                 sender,
244 | |                                 Http3Chunk::bad_chunk("Failed to lock connection".to_string())
245 | |                             );
246 | |                             return;
247 | |                         };
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
241 ~                         let Ok(mut conn_guard) = conn.lock() else {
242 +                             emit!(
243 +                                 sender,
244 +                                 Http3Chunk::bad_chunk("Failed to lock connection".to_string())
245 +                             );
246 +                             return;
247 +                         };
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:274:21
    |
274 | /                     let conn_guard = if let Ok(guard) = conn.lock() { guard } else {
275 | |                         emit!(
276 | |                             sender,
277 | |                             Http3Chunk::bad_chunk("Failed to lock connection".to_string())
278 | |                         );
279 | |                         return;
280 | |                     };
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
274 ~                     let Ok(conn_guard) = conn.lock() else {
275 +                         emit!(
276 +                             sender,
277 +                             Http3Chunk::bad_chunk("Failed to lock connection".to_string())
278 +                         );
279 +                         return;
280 +                     };
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:287:29
    |
287 | / ...                   let mut conn_guard = if let Ok(guard) = conn.lock() { guard } else {
288 | | ...                       emit!(
289 | | ...                           sender,
290 | | ...                           Http3Chunk::bad_chunk(
...   |
294 | | ...                       return;
295 | | ...                   };
    | |________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
287 ~                             let Ok(mut conn_guard) = conn.lock() else {
288 +                                 emit!(
289 +                                     sender,
290 +                                     Http3Chunk::bad_chunk(
291 +                                         "Failed to lock connection".to_string()
292 +                                     )
293 +                                 );
294 +                                 return;
295 +                             };
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:327:21
    |
327 | /                     let conn_guard = if let Ok(guard) = conn.lock() { guard } else {
328 | |                         emit!(
329 | |                             sender,
330 | |                             Http3Chunk::bad_chunk("Failed to lock connection".to_string())
331 | |                         );
332 | |                         return;
333 | |                     };
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
327 ~                     let Ok(conn_guard) = conn.lock() else {
328 +                         emit!(
329 +                             sender,
330 +                             Http3Chunk::bad_chunk("Failed to lock connection".to_string())
331 +                         );
332 +                         return;
333 +                     };
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:357:27
    |
357 |         headers_data.push(name.len() as u8);
    |                           ^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
357 -         headers_data.push(name.len() as u8);
357 +         headers_data.push(u8::try_from(name.len()));
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:359:27
    |
359 |         headers_data.push(value.len() as u8);
    |                           ^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
359 -         headers_data.push(value.len() as u8);
359 +         headers_data.push(u8::try_from(value.len()));
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:365:22
    |
365 |         encoded.push(headers_data.len() as u8);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
365 -         encoded.push(headers_data.len() as u8);
365 +         encoded.push(u8::try_from(headers_data.len()));
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:370:33
    |
370 |             encoded.push(0x40 | ((len >> 8) as u8));
    |                                 ^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
370 -             encoded.push(0x40 | ((len >> 8) as u8));
370 +             encoded.push(0x40 | u8::try_from(len >> 8));
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:371:26
    |
371 |             encoded.push((len & 0xff) as u8);
    |                          ^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
371 -             encoded.push((len & 0xff) as u8);
371 +             encoded.push(u8::try_from(len & 0xff));
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:373:33
    |
373 |             encoded.push(0x80 | ((len >> 24) as u8));
    |                                 ^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
373 -             encoded.push(0x80 | ((len >> 24) as u8));
373 +             encoded.push(0x80 | u8::try_from(len >> 24));
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:374:26
    |
374 |             encoded.push(((len >> 16) & 0xff) as u8);
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
374 -             encoded.push(((len >> 16) & 0xff) as u8);
374 +             encoded.push(u8::try_from((len >> 16) & 0xff));
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:375:26
    |
375 |             encoded.push(((len >> 8) & 0xff) as u8);
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
375 -             encoded.push(((len >> 8) & 0xff) as u8);
375 +             encoded.push(u8::try_from((len >> 8) & 0xff));
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:376:26
    |
376 |             encoded.push((len & 0xff) as u8);
    |                          ^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
376 -             encoded.push((len & 0xff) as u8);
376 +             encoded.push(u8::try_from(len & 0xff));
    |

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/quiche/streaming.rs:678:36
    |
678 |     pub fn write_bytes(self, data: Bytes, fin: bool) -> AsyncStream<QuicheWriteResult, 1024> {
    |                                    ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
678 |     pub fn write_bytes(self, data: &Bytes, fin: bool) -> AsyncStream<QuicheWriteResult, 1024> {
    |                                    +

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/response_converter.rs:184:5
    |
184 | /     let header_str = match std::str::from_utf8(header_data) {
185 | |         Ok(s) => s,
186 | |         Err(_) => return (status, headers), // Return defaults on invalid UTF-8
187 | |     };
    | |______^ help: consider writing: `let Ok(header_str) = std::str::from_utf8(header_data) else { return (status, headers) };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/protocols/strategy.rs:438:33
    |
438 |     config.set_max_idle_timeout(h3_config.max_idle_timeout.as_millis() as u64);
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
438 -     config.set_max_idle_timeout(h3_config.max_idle_timeout.as_millis() as u64);
438 +     config.set_max_idle_timeout(u64::try_from(h3_config.max_idle_timeout.as_millis()));
    |

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/protocols/strategy.rs:478:33
    |
478 |     config.set_max_idle_timeout(quiche_config.max_idle_timeout.as_millis() as u64);
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
478 -     config.set_max_idle_timeout(quiche_config.max_idle_timeout.as_millis() as u64);
478 +     config.set_max_idle_timeout(u64::try_from(quiche_config.max_idle_timeout.as_millis()));
    |

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/protocols/auto_strategy.rs:34:51
   |
34 |     pub fn new(prefer: Vec<HttpVersion>, configs: ProtocolConfigs) -> Self {
   |                                                   ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
34 |     pub fn new(prefer: Vec<HttpVersion>, configs: &ProtocolConfigs) -> Self {
   |                                                   +

warning: unused `self` argument
  --> packages/client/src/protocols/auto_strategy.rs:44:23
   |
44 |     fn extract_domain(&self, request: &HttpRequest) -> String {
   |                       ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
  --> packages/client/src/protocols/auto_strategy.rs:57:34
   |
57 |     fn verify_connection_success(&self, response: &HttpResponse) -> bool {
   |                                  ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
  --> packages/client/src/protocols/auto_strategy.rs:88:26
   |
88 |     fn should_skip_http3(&self, request: &HttpRequest) -> bool {
   |                          ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function has too many lines (130/100)
   --> packages/client/src/protocols/auto_strategy.rs:304:5
    |
304 |     fn try_single_alt_svc_endpoint(&self, endpoint: &AltSvcEndpoint, original_request: &HttpRequest) -> Option<HttpResponse> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/auto_strategy.rs:339:9
    |
339 | /         let domain = if let Some(host) = original_request.url().host_str() { host } else {
340 | |             tracing::error!(
341 | |                 target: "quyc::protocols::auto",
342 | |                 "Failed to extract domain from Alt-Svc request URL: {}",
...   |
345 | |             return None; // Fail fast - don't corrupt intelligence tracking with invalid domain
346 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
339 ~         let Some(domain) = original_request.url().host_str() else {
340 +             tracing::error!(
341 +                 target: "quyc::protocols::auto",
342 +                 "Failed to extract domain from Alt-Svc request URL: {}",
343 +                 original_request.url()
344 +             );
345 +             return None; // Fail fast - don't corrupt intelligence tracking with invalid domain
346 +         };
    |

warning: unused `self` argument
   --> packages/client/src/protocols/auto_strategy.rs:464:31
    |
464 |     fn create_alt_svc_request(&self, endpoint: &AltSvcEndpoint, original_request: &HttpRequest) -> Result<HttpRequest, String> {
    |                               ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: assigning the result of `Clone::clone()` may be inefficient
   --> packages/client/src/protocols/auto_strategy.rs:497:9
    |
497 |         request.auth = original_request.auth.clone();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `request.auth.clone_from(&original_request.auth)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones
    = note: `#[warn(clippy::assigning_clones)]` implied by `#[warn(clippy::pedantic)]`

warning: assigning the result of `Clone::clone()` may be inefficient
   --> packages/client/src/protocols/auto_strategy.rs:500:9
    |
500 |         request.cache_control = original_request.cache_control.clone();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `request.cache_control.clone_from(&original_request.cache_control)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: assigning the result of `Clone::clone()` may be inefficient
   --> packages/client/src/protocols/auto_strategy.rs:501:9
    |
501 |         request.etag = original_request.etag.clone();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `request.etag.clone_from(&original_request.etag)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: assigning the result of `Clone::clone()` may be inefficient
   --> packages/client/src/protocols/auto_strategy.rs:504:9
    |
504 |         request.user_agent = original_request.user_agent.clone();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `request.user_agent.clone_from(&original_request.user_agent)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: assigning the result of `Clone::clone()` may be inefficient
   --> packages/client/src/protocols/auto_strategy.rs:505:9
    |
505 |         request.referer = original_request.referer.clone();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `request.referer.clone_from(&original_request.referer)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: unused `self` argument
   --> packages/client/src/protocols/transport.rs:120:9
    |
120 |         &mut self,
    |         ^^^^^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/transport.rs:340:5
    |
340 |     pub fn default_quiche_config() -> Result<Config, String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/protocols/transport.rs:398:17
    |
398 | /                 TransportType::H3 => match ("127.0.0.1:0".parse(), "127.0.0.1:0".parse()) {
399 | |                     (Ok(local_addr), Ok(remote_addr)) => Connection::new_h3_with_addr(local_addr, remote_addr),
400 | |                     _ => Connection::Error("Failed to parse localhost address".to_string()),
401 | |                 },
    | |_________________^
402 | /                 TransportType::Auto => match ("127.0.0.1:0".parse(), "127.0.0.1:0".parse()) {
403 | |                     (Ok(local_addr), Ok(remote_addr)) => Connection::new_h3_with_addr(local_addr, remote_addr),
404 | |                     _ => Connection::Error("Failed to parse localhost address".to_string()),
405 | |                 }, // Default to H3
    | |_________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
398 ~                 TransportType::H3 | TransportType::Auto => match ("127.0.0.1:0".parse(), "127.0.0.1:0".parse()) {
399 |                     (Ok(local_addr), Ok(remote_addr)) => Connection::new_h3_with_addr(local_addr, remote_addr),
400 |                     _ => Connection::Error("Failed to parse localhost address".to_string()),
401 |                 },
402 ~                 // Default to H3
    |

warning: variables can be used directly in the `format!` string
  --> packages/client/src/protocols/wire.rs:39:21
   |
39 |                   Err(format!(
   |  _____________________^
40 | |                     "Frame data length too large: {} bytes", 
41 | |                     data_len
42 | |                 ))
   | |_________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args

warning: this function has too many lines (138/100)
  --> packages/client/src/protocols/wire.rs:49:5
   |
49 |     pub fn parse_frames_streaming(data: Vec<u8>) -> AsyncStream<FrameChunk, 1024> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:310:17
    |
310 | /                 let (index, bytes_read) = match Self::decode_hpack_integer(payload, offset, 7) {
311 | |                     Ok(result) => result,
312 | |                     Err(_) => break,
313 | |                 };
    | |__________________^ help: consider writing: `let Ok((index, bytes_read)) = Self::decode_hpack_integer(payload, offset, 7) else { break };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:322:17
    |
322 | /                 let (name_index, bytes_read) = match Self::decode_hpack_integer(payload, offset, 6) {
323 | |                     Ok(result) => result,
324 | |                     Err(_) => break,
325 | |                 };
    | |__________________^ help: consider writing: `let Ok((name_index, bytes_read)) = Self::decode_hpack_integer(payload, offset, 6) else { break };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value
   --> packages/client/src/protocols/wire.rs:339:21
    |
339 | /                     static_table.get(&(name_index as usize))
340 | |                         .map(|(n, _)| n.clone())
341 | |                         .unwrap_or_else(|| "unknown".to_string())
    | |_________________________________________________________________^ help: try: `static_table.get(&(name_index as usize)).map_or_else(|| "unknown".to_string(), |(n, _)| n.clone())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or
    = note: `#[warn(clippy::map_unwrap_or)]` implied by `#[warn(clippy::pedantic)]`

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/protocols/wire.rs:339:39
    |
339 |                     static_table.get(&(name_index as usize))
    |                                       ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
339 -                     static_table.get(&(name_index as usize))
339 +                     static_table.get(&usize::try_from(name_index))
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:354:17
    |
354 | /                 let (_, bytes_read) = match Self::decode_hpack_integer(payload, offset, 5) {
355 | |                     Ok(result) => result,
356 | |                     Err(_) => break,
357 | |                 };
    | |__________________^ help: consider writing: `let Ok((_, bytes_read)) = Self::decode_hpack_integer(payload, offset, 5) else { break };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this `if` has identical blocks
   --> packages/client/src/protocols/wire.rs:362:63
    |
362 |                 let prefix_len = if first_byte & 0x10 == 0x10 { 4 } else { 4 };
    |                                                               ^^^^^
    |
note: same as this
   --> packages/client/src/protocols/wire.rs:362:74
    |
362 |                 let prefix_len = if first_byte & 0x10 == 0x10 { 4 } else { 4 };
    |                                                                          ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:363:17
    |
363 | /                 let (name_index, bytes_read) = match Self::decode_hpack_integer(payload, offset, prefix_len) {
364 | |                     Ok(result) => result,
365 | |                     Err(_) => break,
366 | |                 };
    | |__________________^ help: consider writing: `let Ok((name_index, bytes_read)) = Self::decode_hpack_integer(payload, offset, prefix_len) else { break };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value
   --> packages/client/src/protocols/wire.rs:380:21
    |
380 | /                     static_table.get(&(name_index as usize))
381 | |                         .map(|(n, _)| n.clone())
382 | |                         .unwrap_or_else(|| "unknown".to_string())
    | |_________________________________________________________________^ help: try: `static_table.get(&(name_index as usize)).map_or_else(|| "unknown".to_string(), |(n, _)| n.clone())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/protocols/wire.rs:380:39
    |
380 |                     static_table.get(&(name_index as usize))
    |                                       ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
380 -                     static_table.get(&(name_index as usize))
380 +                     static_table.get(&usize::try_from(name_index))
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:406:50
    |
406 |         let mut value = u64::from(data[offset] & mask as u8);
    |                                                  ^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
406 -         let mut value = u64::from(data[offset] & mask as u8);
406 +         let mut value = u64::from(data[offset] & u8::try_from(mask));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:578:38
    |
578 |             buffer.push(first_byte | value as u8);
    |                                      ^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
578 -             buffer.push(first_byte | value as u8);
578 +             buffer.push(first_byte | u8::try_from(value));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:582:34
    |
582 |         buffer.push(first_byte | mask as u8);
    |                                  ^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
582 -         buffer.push(first_byte | mask as u8);
582 +         buffer.push(first_byte | u8::try_from(mask));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:586:32
    |
586 |             buffer.push(0x80 | (value as u8));
    |                                ^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
586 -             buffer.push(0x80 | (value as u8));
586 +             buffer.push(0x80 | u8::try_from(value));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:590:21
    |
590 |         buffer.push(value as u8);
    |                     ^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
590 -         buffer.push(value as u8);
590 +         buffer.push(u8::try_from(value));
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:659:17
    |
659 | /                 let (frame_len, len_len) = if let Ok(result) = Self::read_varint(&data[offset..]) { result } else {
660 | |                     emit!(
661 | |                         sender,
662 | |                         FrameChunk::H3(H3Frame::bad_chunk("Invalid frame length varint".to_string()))
663 | |                     );
664 | |                     break;
665 | |                 };
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
659 ~                 let Ok((frame_len, len_len)) = Self::read_varint(&data[offset..]) else {
660 +                     emit!(
661 +                         sender,
662 +                         FrameChunk::H3(H3Frame::bad_chunk("Invalid frame length varint".to_string()))
663 +                     );
664 +                     break;
665 +                 };
    |

warning: the variable `_bytes_read` is used as a loop counter
   --> packages/client/src/protocols/wire.rs:801:13
    |
801 |             for &byte in &data {
    |             ^^^^^^^^^^^^^^^^^^ help: consider using: `for (_bytes_read, &byte) in data.iter().enumerate()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop
    = note: `#[warn(clippy::explicit_counter_loop)]` implied by `#[warn(clippy::all)]`

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:858:25
    |
858 |             buffer.push((value as u8) | 0x80);
    |                         ^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
858 -             buffer.push((value as u8) | 0x80);
858 +             buffer.push(u8::try_from(value) | 0x80);
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:861:21
    |
861 |         buffer.push(value as u8);
    |                     ^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
861 -         buffer.push(value as u8);
861 +         buffer.push(u8::try_from(value));
    |

warning: unnecessary boolean `not` operation
   --> packages/client/src/protocols/wire.rs:913:13
    |
913 | /             if !value.is_empty() {
914 | |                 exact_match_map.insert((name.clone(), value.clone()), *index);
915 | |             } else {
916 | |                 name_index_map.insert(name.clone(), *index);
917 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
    = note: `#[warn(clippy::if_not_else)]` implied by `#[warn(clippy::pedantic)]`
help: try
    |
913 ~             if value.is_empty() {
914 +                 name_index_map.insert(name.clone(), *index);
915 +             } else {
916 +                 exact_match_map.insert((name.clone(), value.clone()), *index);
917 +             }
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:945:38
    |
945 |             buffer.push(first_byte | value as u8);
    |                                      ^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
945 -             buffer.push(first_byte | value as u8);
945 +             buffer.push(first_byte | u8::try_from(value));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:949:34
    |
949 |         buffer.push(first_byte | mask as u8);
    |                                  ^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
949 -         buffer.push(first_byte | mask as u8);
949 +         buffer.push(first_byte | u8::try_from(mask));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:953:32
    |
953 |             buffer.push(0x80 | (value as u8));
    |                                ^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
953 -             buffer.push(0x80 | (value as u8));
953 +             buffer.push(0x80 | u8::try_from(value));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:957:21
    |
957 |         buffer.push(value as u8);
    |                     ^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
957 -         buffer.push(value as u8);
957 +         buffer.push(u8::try_from(value));
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:979:9
    |
979 | /         let (_required_insert_count, ric_bytes) = match Self::decode_qpack_integer(payload, offset, 8) {
980 | |             Ok(result) => result,
981 | |             Err(_) => return headers,
982 | |         };
    | |__________^ help: consider writing: `let Ok((_required_insert_count, ric_bytes)) = Self::decode_qpack_integer(payload, offset, 8) else { return headers };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:986:9
    |
986 | /         let (_base, base_bytes) = match Self::decode_qpack_integer(payload, offset, 7) {
987 | |             Ok(result) => result,
988 | |             Err(_) => return headers,
989 | |         };
    | |__________^ help: consider writing: `let Ok((_base, base_bytes)) = Self::decode_qpack_integer(payload, offset, 7) else { return headers };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
    --> packages/client/src/protocols/wire.rs:1002:17
     |
1002 | /                 let (index, bytes_read) = match Self::decode_qpack_integer(payload, offset, 6) {
1003 | |                     Ok(result) => result,
1004 | |                     Err(_) => break,
1005 | |                 };
     | |__________________^ help: consider writing: `let Ok((index, bytes_read)) = Self::decode_qpack_integer(payload, offset, 6) else { break };`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/protocols/wire.rs:1010:68
     |
1010 |                     if let Some((name, value)) = static_table.get(&(index as usize)) {
     |                                                                    ^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1010 -                     if let Some((name, value)) = static_table.get(&(index as usize)) {
1010 +                     if let Some((name, value)) = static_table.get(&usize::try_from(index)) {
     |

warning: variables can be used directly in the `format!` string
    --> packages/client/src/protocols/wire.rs:1015:60
     |
1015 |                     headers.push(("x-dynamic".to_string(), format!("index-{}", index)));
     |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1015 -                     headers.push(("x-dynamic".to_string(), format!("index-{}", index)));
1015 +                     headers.push(("x-dynamic".to_string(), format!("index-{index}")));
     |

warning: this could be rewritten as `let...else`
    --> packages/client/src/protocols/wire.rs:1020:17
     |
1020 | /                 let (name_index, bytes_read) = match Self::decode_qpack_integer(payload, offset, 4) {
1021 | |                     Ok(result) => result,
1022 | |                     Err(_) => break,
1023 | |                 };
     | |__________________^ help: consider writing: `let Ok((name_index, bytes_read)) = Self::decode_qpack_integer(payload, offset, 4) else { break };`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value
    --> packages/client/src/protocols/wire.rs:1028:21
     |
1028 | /                     static_table.get(&(name_index as usize))
1029 | |                         .map(|(n, _)| n.clone())
1030 | |                         .unwrap_or_else(|| "unknown".to_string())
     | |_________________________________________________________________^ help: try: `static_table.get(&(name_index as usize)).map_or_else(|| "unknown".to_string(), |(n, _)| n.clone())`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/protocols/wire.rs:1028:39
     |
1028 |                     static_table.get(&(name_index as usize))
     |                                       ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1028 -                     static_table.get(&(name_index as usize))
1028 +                     static_table.get(&usize::try_from(name_index))
     |

warning: variables can be used directly in the `format!` string
    --> packages/client/src/protocols/wire.rs:1032:21
     |
1032 |                     format!("dynamic-name-{}", name_index)
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1032 -                     format!("dynamic-name-{}", name_index)
1032 +                     format!("dynamic-name-{name_index}")
     |

warning: casting `u64` to `u8` may truncate the value
    --> packages/client/src/protocols/wire.rs:1086:50
     |
1086 |         let mut value = u64::from(data[offset] & mask as u8);
     |                                                  ^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1086 -         let mut value = u64::from(data[offset] & mask as u8);
1086 +         let mut value = u64::from(data[offset] & u8::try_from(mask));
     |

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/protocols/wire.rs:1127:27
     |
1127 |         if length_bytes + length as usize > data.len() {
     |                           ^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1127 -         if length_bytes + length as usize > data.len() {
1127 +         if length_bytes + usize::try_from(length) > data.len() {
     |

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/protocols/wire.rs:1131:62
     |
1131 |         let string_data = &data[length_bytes..length_bytes + length as usize];
     |                                                              ^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1131 -         let string_data = &data[length_bytes..length_bytes + length as usize];
1131 +         let string_data = &data[length_bytes..length_bytes + usize::try_from(length)];
     |

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/protocols/wire.rs:1141:37
     |
1141 |         Ok((decoded, length_bytes + length as usize))
     |                                     ^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1141 -         Ok((decoded, length_bytes + length as usize))
1141 +         Ok((decoded, length_bytes + usize::try_from(length)))
     |

warning: variables can be used directly in the `format!` string
    --> packages/client/src/protocols/wire.rs:1168:32
     |
1168 |                     return Err(format!("Huffman symbol decode error at bit {}: {}", bit_pos, e));
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1168 -                     return Err(format!("Huffman symbol decode error at bit {}: {}", bit_pos, e));
1168 +                     return Err(format!("Huffman symbol decode error at bit {bit_pos}: {e}"));
     |

warning: item in documentation is missing backticks
    --> packages/client/src/protocols/wire.rs:1212:61
     |
1212 |     /// Read specified number of bits from data starting at bit_pos
     |                                                             ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
     = note: `#[warn(clippy::doc_markdown)]` implied by `#[warn(clippy::pedantic)]`
help: try
     |
1212 -     /// Read specified number of bits from data starting at bit_pos
1212 +     /// Read specified number of bits from data starting at `bit_pos`
     |

warning: casts from `u8` to `u32` can be expressed infallibly using `From`
    --> packages/client/src/protocols/wire.rs:1229:38
     |
1229 |             result = (result << 1) | (bit as u32);
     |                                      ^^^^^^^^^^^^
     |
     = help: an `as` cast can become silently lossy if the types change in the future
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u32::from` instead
     |
1229 -             result = (result << 1) | (bit as u32);
1229 +             result = (result << 1) | u32::from(bit);
     |

warning: this method could have a `#[must_use]` attribute
    --> packages/client/src/protocols/wire.rs:1462:12
     |
1462 |     pub fn parse_hpack_headers(payload: &[u8]) -> HashMap<String, String> {
     |            ^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
     = note: `#[warn(clippy::must_use_candidate)]` implied by `#[warn(clippy::pedantic)]`
help: add the attribute
     |
1462 ~     #[must_use] 
1463 ~     pub fn parse_hpack_headers(payload: &[u8]) -> HashMap<String, String> {
     |

warning: this method could have a `#[must_use]` attribute
    --> packages/client/src/protocols/wire.rs:1467:12
     |
1467 |     pub fn parse_qpack_headers(payload: &[u8]) -> HashMap<String, String> {
     |            ^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
     |
1467 ~     #[must_use] 
1468 ~     pub fn parse_qpack_headers(payload: &[u8]) -> HashMap<String, String> {
     |

warning: this method could have a `#[must_use]` attribute
    --> packages/client/src/protocols/wire.rs:1473:12
     |
1473 |     pub fn serialize_hpack_headers(headers: &HashMap<String, String>) -> Vec<u8> {
     |            ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
     |
1473 ~     #[must_use] 
1474 ~     pub fn serialize_hpack_headers(headers: &HashMap<String, String>) -> Vec<u8> {
     |

warning: this method could have a `#[must_use]` attribute
    --> packages/client/src/protocols/wire.rs:1480:12
     |
1480 |     pub fn serialize_qpack_headers(headers: &HashMap<String, String>) -> Vec<u8> {
     |            ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
     |
1480 ~     #[must_use] 
1481 ~     pub fn serialize_qpack_headers(headers: &HashMap<String, String>) -> Vec<u8> {
     |

warning: docs for function returning `Result` missing `# Errors` section
    --> packages/client/src/protocols/wire.rs:1485:5
     |
1485 |     pub fn decode_integer(payload: &[u8], offset: usize, prefix_bits: u8) -> Result<(u64, usize), String> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
    --> packages/client/src/protocols/wire.rs:1490:5
     |
1490 |     pub fn decode_qpack_integer(payload: &[u8], offset: usize, prefix_bits: u8) -> Result<(u64, usize), String> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
    --> packages/client/src/protocols/wire.rs:1495:5
     |
1495 |     pub fn decode_string(payload: &[u8], offset: usize) -> Result<(String, usize), String> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: unnecessary map of the identity function
    --> packages/client/src/protocols/wire.rs:1496:63
     |
1496 |           H2FrameParser::decode_hpack_string(&payload[offset..])
     |  _______________________________________________________________^
1497 | |             .map(|(s, len)| (s, len))
     | |_____________________________________^ help: remove the call to `map`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_identity
     = note: `#[warn(clippy::map_identity)]` implied by `#[warn(clippy::all)]`

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/proxy/core/configuration.rs:22:5
   |
22 | /     pub fn basic_auth(mut self, username: &str, password: &str) -> Proxy {
23 | |         self.extra.auth = Some(super::super::url_handling::encode_basic_auth(
24 | |             username, password,
25 | |         ));
26 | |         self
27 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/proxy/core/configuration.rs:40:5
   |
40 | /     pub fn custom_http_auth(mut self, header_value: HeaderValue) -> Proxy {
41 | |         self.extra.auth = Some(header_value);
42 | |         self
43 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/proxy/core/configuration.rs:59:5
   |
59 | /     pub fn custom_headers(mut self, headers: HeaderMap) -> Proxy {
60 | |         match self.extra.misc {
61 | |             Some(ref mut existing) => existing.extend(headers),
62 | |             None => self.extra.misc = Some(headers),
63 | |         }
64 | |         self
65 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/proxy/core/configuration.rs:74:5
   |
74 | /     pub fn no_proxy<T: Into<String>>(mut self, exclusions: T) -> Proxy {
75 | |         self.no_proxy = NoProxy::from_string(&exclusions.into());
76 | |         self
77 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/core/constructors.rs:26:5
   |
26 | /     pub fn all<U: IntoUrlSealed>(
27 | |         proxy_url: U,
28 | |     ) -> std::result::Result<Proxy, crate::error::HttpError> {
   | |____________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/core/constructors.rs:43:5
   |
43 | /     pub fn http<U: IntoUrlSealed>(
44 | |         proxy_url: U,
45 | |     ) -> std::result::Result<Proxy, crate::error::HttpError> {
   | |____________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/core/constructors.rs:60:5
   |
60 | /     pub fn https<U: IntoUrlSealed>(
61 | |         proxy_url: U,
62 | |     ) -> std::result::Result<Proxy, crate::error::HttpError> {
   | |____________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: manual `Debug` impl does not include all fields
  --> packages/client/src/proxy/core/debug_impls.rs:10:1
   |
10 | / impl fmt::Debug for Proxy {
11 | |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
12 | |         f.debug_struct("Proxy")
13 | |             .field("intercept", &self.intercept)
...  |
16 | | }
   | |_^
   |
note: this field is unused
  --> packages/client/src/proxy/core/types.rs:47:5
   |
47 |     pub(crate) extra: Extra,
   |     ^^^^^^^^^^^^^^^^^^^^^^^
note: this field is unused
  --> packages/client/src/proxy/core/types.rs:49:5
   |
49 |     pub(crate) no_proxy: Option<NoProxy>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider including all fields in this `Debug` impl
   = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug

warning: you have declared `#[inline(always)]` on `apply_no_proxy_patterns_static`. This is usually a bad idea
  --> packages/client/src/proxy/core/matcher_integration.rs:94:5
   |
94 |     #[inline(always)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inline_always

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/proxy/core/matcher_integration.rs:95:5
   |
95 | /     fn apply_no_proxy_patterns_static(
96 | |         mut inner: Matcher_,
97 | |         no_proxy_str: &str,
98 | |     ) -> Result<Matcher_, crate::Error> {
   | |_______________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
98 -     ) -> Result<Matcher_, crate::Error> {
98 +     ) -> proxy::matcher::types::Matcher_ {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
131-         Ok(inner)
131+         inner
   |

warning: field name ends with the struct's name
  --> packages/client/src/proxy/core/types.rs:49:5
   |
49 |     pub(crate) no_proxy: Option<NoProxy>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_field_names
   = note: `#[warn(clippy::struct_field_names)]` implied by `#[warn(clippy::pedantic)]`

warning: docs for function which may panic missing `# Panics` section
  --> packages/client/src/proxy/matcher/implementation.rs:48:5
   |
48 |     pub fn intercept(&self, uri: &Uri) -> Option<Intercept> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: first possible panic found here
  --> packages/client/src/proxy/matcher/implementation.rs:75:53
   |
75 | ...                   crate::Url::parse("data:text/plain,proxy-matcher-error").expect("data URL must parse")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: manual `Debug` impl does not include all fields
  --> packages/client/src/proxy/matcher/public_interface.rs:54:1
   |
54 | / impl fmt::Debug for Matcher {
55 | |     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
56 | |         f.debug_struct("Matcher")
57 | |             .field("maybe_has_http_auth", &self.maybe_has_http_auth)
...  |
64 | | }
   | |_^
   |
note: this field is unused
  --> packages/client/src/proxy/matcher/types.rs:15:5
   |
15 |     pub(crate) inner: Matcher_,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
note: this field is unused
  --> packages/client/src/proxy/matcher/types.rs:16:5
   |
16 |     pub(crate) extra: Extra,
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider including all fields in this `Debug` impl
   = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/matcher/system_integration.rs:67:5
   |
67 |     pub fn normalize_proxy_url(url_str: &str) -> Result<Url, String> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: very complex type used. Consider factoring parts into `type` definitions
   --> packages/client/src/proxy/url_handling.rs:95:22
    |
 95 |       pub(crate) func: Arc<
    |  ______________________^
 96 | |         dyn Fn(&Url) -> Option<std::result::Result<Url, Box<dyn std::error::Error + Send + Sync>>>
 97 | |             + Send
 98 | |             + Sync
 99 | |             + 'static,
100 | |     >,
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/mod.rs:20:1
   |
20 | / pub fn http<U>(proxy_url: U) -> std::result::Result<Proxy, Box<dyn std::error::Error + Send + Sync>>
21 | | where
22 | |     U: Into<crate::Url>,
   | |________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/mod.rs:28:1
   |
28 | / pub fn https<U>(
29 | |     proxy_url: U,
30 | | ) -> std::result::Result<Proxy, Box<dyn std::error::Error + Send + Sync>>
31 | | where
32 | |     U: Into<crate::Url>,
   | |________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/mod.rs:38:1
   |
38 | / pub fn all<U>(proxy_url: U) -> std::result::Result<Proxy, Box<dyn std::error::Error + Send + Sync>>
39 | | where
40 | |     U: Into<crate::Url>,
   | |________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: all fields have the same prefix: `total`
  --> packages/client/src/retry/global.rs:9:1
   |
 9 | / pub struct GlobalRetryStats {
10 | |     total_operations: AtomicU64,
11 | |     total_retries: AtomicU64,
12 | |     total_failures: AtomicU64,
13 | |     total_successes: AtomicU64,
14 | | }
   | |_^
   |
   = help: remove the prefixes
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_field_names

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/retry/global.rs:96:14
   |
96 |             (successes as f64 / total_ops as f64) * 100.0
   |              ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/retry/global.rs:96:33
   |
96 |             (successes as f64 / total_ops as f64) * 100.0
   |                                 ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/retry/global.rs:110:14
    |
110 |             (failures as f64 / total_ops as f64) * 100.0
    |              ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/retry/global.rs:110:32
    |
110 |             (failures as f64 / total_ops as f64) * 100.0
    |                                ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/retry/global.rs:124:13
    |
124 |             total_retries as f64 / total_ops as f64
    |             ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/retry/global.rs:124:36
    |
124 |             total_retries as f64 / total_ops as f64
    |                                    ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/retry/policy.rs:113:13
    |
113 |             self.initial_delay_ms as f64 * self.backoff_multiplier.powi((attempt - 1) as i32);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u32` to `i32` may wrap around the value
   --> packages/client/src/retry/policy.rs:113:73
    |
113 |             self.initial_delay_ms as f64 * self.backoff_multiplier.powi((attempt - 1) as i32);
    |                                                                         ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/retry/policy.rs:116:43
    |
116 |         let capped_delay = base_delay.min(self.max_delay_ms as f64);
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `f64` to `u64` may truncate the value
   --> packages/client/src/retry/policy.rs:124:31
    |
124 |         Duration::from_millis(final_delay as u64)
    |                               ^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `f64` to `u64` may lose the sign of the value
   --> packages/client/src/retry/policy.rs:124:31
    |
124 |         Duration::from_millis(final_delay as u64)
    |                               ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: these match arms have identical bodies
   --> packages/client/src/retry/policy.rs:136:13
    |
136 |             crate::error::types::Kind::Builder => false,     // Client configuration errors not retryable
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
137 |             crate::error::types::Kind::Request => true,      // Request errors may be transient
138 |             crate::error::types::Kind::Redirect => false,    // Redirect errors usually not transient
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
143 |             crate::error::types::Kind::Body => false,        // Body errors usually not retryable
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
144 |             crate::error::types::Kind::Decode => false,      // Decode errors usually not retryable
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
145 |             crate::error::types::Kind::Upgrade => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
148 |             crate::error::types::Kind::PayloadTooLarge => false, // Payload size errors are not retryable
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
136 ~             // Client configuration errors not retryable
137 |             crate::error::types::Kind::Request => true,      // Request errors may be transient
138 ~             // Redirect errors usually not transient
139 |             crate::error::types::Kind::Status(status, _) => {
...
142 |             }
143 ~             // Body errors usually not retryable
144 ~             // Decode errors usually not retryable
145 ~             crate::error::types::Kind::Connect => true, // Connection failures are retryable
146 |             crate::error::types::Kind::Timeout => true, // Timeout errors are retryable
147 ~             crate::error::types::Kind::Builder | crate::error::types::Kind::Redirect | crate::error::types::Kind::Body | crate::error::types::Kind::Decode | crate::error::types::Kind::Upgrade | crate::error::types::Kind::PayloadTooLarge => false, // Payload size errors are not retryable
    |

warning: these match arms have identical bodies
   --> packages/client/src/retry/policy.rs:137:13
    |
137 |             crate::error::types::Kind::Request => true,      // Request errors may be transient
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
146 |             crate::error::types::Kind::Connect => true, // Connection failures are retryable
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
147 |             crate::error::types::Kind::Timeout => true, // Timeout errors are retryable
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
148 |             crate::error::types::Kind::PayloadTooLarge => false, // Payload size errors are not retryable
149 |             crate::error::types::Kind::Stream => true, // Stream errors may be retryable     // Upgrade errors usually not retryable
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
137 ~             crate::error::types::Kind::Request | crate::error::types::Kind::Connect | crate::error::types::Kind::Timeout | crate::error::types::Kind::Stream => true,      // Request errors may be transient
138 |             crate::error::types::Kind::Redirect => false,    // Redirect errors usually not transient
...
145 |             crate::error::types::Kind::Upgrade => false,
146 ~             // Connection failures are retryable
147 ~             // Timeout errors are retryable
148 |             crate::error::types::Kind::PayloadTooLarge => false, // Payload size errors are not retryable
149 ~             // Stream errors may be retryable     // Upgrade errors usually not retryable
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/retry/policy.rs:158:5
    |
158 |     pub fn validate(&self) -> Result<(), String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/telemetry/cache_stats.rs:38:20
   |
38 |         let hits = self.hits.load(Ordering::Relaxed) as f64;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/telemetry/cache_stats.rs:39:28
   |
39 |         let total = hits + self.misses.load(Ordering::Relaxed) as f64;
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/telemetry/jsonpath/stream.rs:12:22
   |
12 |             .map(|d| d.as_micros() as u64)
   |                      ^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
12 -             .map(|d| d.as_micros() as u64)
12 +             .map(|d| u64::try_from(d.as_micros()))
   |

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/telemetry/jsonpath/stream.rs:31:22
   |
31 |             .map(|d| d.as_micros() as u64)
   |                      ^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
31 -             .map(|d| d.as_micros() as u64)
31 +             .map(|d| u64::try_from(d.as_micros()))
   |

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/telemetry/jsonpath/stream.rs:36:31
   |
36 |         let elapsed_seconds = (elapsed_micros as f64) / 1_000_000.0;
   |                               ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/telemetry/jsonpath/stream.rs:51:17
   |
51 |                 objects as f64 / elapsed_seconds
   |                 ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/telemetry/jsonpath/stream.rs:56:17
   |
56 |                 bytes as f64 / objects as f64
   |                 ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/telemetry/jsonpath/stream.rs:56:32
   |
56 |                 bytes as f64 / objects as f64
   |                                ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/telemetry/jsonpath/stream.rs:61:17
   |
61 |                 (errors + parse_errors) as f64 / chunks as f64
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/telemetry/jsonpath/stream.rs:61:50
   |
61 |                 (errors + parse_errors) as f64 / chunks as f64
   |                                                  ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/telemetry/jsonpath/stream.rs:95:22
   |
95 |             .map(|d| d.as_micros() as u64)
   |                      ^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
95 -             .map(|d| d.as_micros() as u64)
95 +             .map(|d| u64::try_from(d.as_micros()))
   |

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/telemetry/metrics.rs:48:24
   |
48 |             .fetch_add(response_time.as_nanos() as u64, Ordering::Relaxed);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
48 -             .fetch_add(response_time.as_nanos() as u64, Ordering::Relaxed);
48 +             .fetch_add(u64::try_from(response_time.as_nanos()), Ordering::Relaxed);
   |

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/telemetry/metrics.rs:60:24
   |
60 |             .fetch_add(response_time.as_nanos() as u64, Ordering::Relaxed);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
60 -             .fetch_add(response_time.as_nanos() as u64, Ordering::Relaxed);
60 +             .fetch_add(u64::try_from(response_time.as_nanos()), Ordering::Relaxed);
   |

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/telemetry/metrics.rs:111:14
    |
111 |             (self.successful_requests as f64 / self.total_requests as f64) * 100.0
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
   --> packages/client/src/telemetry/metrics.rs:111:48
    |
111 |             (self.successful_requests as f64 / self.total_requests as f64) * 100.0
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: use of a fallible conversion when an infallible one could be used
   --> packages/client/src/tls/certificate/generation.rs:161:33
    |
161 |             .map(|s| s.as_str().try_into())
    |                                 ^^^^^^^^ help: use: `into`
    |
    = note: converting `&str` to `String` cannot fail
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions
    = note: `#[warn(clippy::unnecessary_fallible_conversions)]` implied by `#[warn(clippy::all)]`

warning: very complex type used. Consider factoring parts into `type` definitions
  --> packages/client/src/tls/certificate/parser.rs:78:6
   |
78 |   ) -> Result<
   |  ______^
79 | |     (
80 | |         Vec<String>,
81 | |         Vec<std::net::IpAddr>,
...  |
87 | |     TlsError,
88 | | > {
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity

warning: this function has too many lines (168/100)
  --> packages/client/src/tls/certificate/parser.rs:76:1
   |
76 | / pub fn extract_certificate_details(
77 | |     cert: &X509CertCert,
78 | | ) -> Result<
...  |
87 | |     TlsError,
88 | | > {
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/tls/certificate/parser.rs:76:1
   |
76 | / pub fn extract_certificate_details(
77 | |     cert: &X509CertCert,
78 | | ) -> Result<
...  |
87 | |     TlsError,
88 | | > {
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
78 - ) -> Result<
79 -     (
80 -         Vec<String>,
81 -         Vec<std::net::IpAddr>,
82 -         bool,
83 -         Vec<String>,
84 -         SystemTime,
85 -         SystemTime,
86 -     ),
87 -     TlsError,
88 - > {
78 + ) -> (std::vec::Vec<std::string::String>, std::vec::Vec<std::net::IpAddr>, bool, std::vec::Vec<std::string::String>, std::time::SystemTime, std::time::SystemTime) {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
307~     (
308+         san_dns_names,
309+         san_ip_addresses,
310+         is_ca,
311+         key_usage,
312+         not_before,
313+         not_after,
314+     )
   |

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/certificate/parser.rs:100:5
    |
100 |     const OID_SUBJECT_ALT_NAME: &str = "2.5.29.17";
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/certificate/parser.rs:101:5
    |
101 |     const OID_BASIC_CONSTRAINTS: &str = "2.5.29.19";
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/certificate/parser.rs:102:5
    |
102 |     const OID_KEY_USAGE: &str = "2.5.29.15";
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: this could be rewritten as `let...else`
   --> packages/client/src/tls/certificate/parser.rs:123:29
    |
123 | / ...                   let mut reader = if let Ok(reader) = SliceReader::new(san_data) { reader } else {
124 | | ...                       tracing::warn!("Failed to create DER reader for SAN data");
125 | | ...                       continue;
126 | | ...                   };
    | |________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
123 ~                             let Ok(mut reader) = SliceReader::new(san_data) else {
124 +                                 tracing::warn!("Failed to create DER reader for SAN data");
125 +                                 continue;
126 +                             };
    |

warning: this `if` has identical blocks
   --> packages/client/src/tls/certificate/parser.rs:506:34
    |
506 |       } else if oid_str == DSA_OID {
    |  __________________________________^
507 | |         extract_dh_like_key_size(algorithm.parameters.as_ref())
508 | |     } else if oid_str == DH_OID {
    | |_____^
    |
note: same as this
   --> packages/client/src/tls/certificate/parser.rs:508:33
    |
508 |       } else if oid_str == DH_OID {
    |  _________________________________^
509 | |         extract_dh_like_key_size(algorithm.parameters.as_ref())
510 | |     } else if oid_str == ID_EC_PUBLIC_KEY.to_string() {
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> packages/client/src/tls/certificate/parser.rs:534:21
    |
534 |     let rest_bits = ((effective.len() - 1) * 8) as u32;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
534 -     let rest_bits = ((effective.len() - 1) * 8) as u32;
534 +     let rest_bits = u32::try_from((effective.len() - 1) * 8);
    |

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:560:18
    |
560 |     let length = Length::try_from(sequence_len).ok()?;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion
    = note: `#[warn(clippy::useless_conversion)]` implied by `#[warn(clippy::all)]`

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:568:23
    |
568 |     reader.read_slice(Length::try_from(modulus_len).ok()?).ok()?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:585:18
    |
585 |     let length = der::Length::try_from(sequence_len).ok()?;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `der::Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:593:23
    |
593 |     reader.read_slice(der::Length::try_from(p_len).ok()?).ok()?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `der::Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: these match arms have identical bodies
   --> packages/client/src/tls/certificate/parser.rs:632:9
    |
632 |         Tag::Null => None, // implicitCurve
    |         ^^^^^^^^^^^^^^^^^
...
655 |         _ => None,
    |         ^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
632 -         Tag::Null => None, // implicitCurve
632 +         // implicitCurve
    |

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:609:26
    |
609 |             let length = Length::try_from(header_len).ok()?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: these match arms have identical bodies
   --> packages/client/src/tls/certificate/parser.rs:623:25
    |
623 |                         "1.2.840.10045.3.1.1" => Some(192), // SECP192R1
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
624 |                         "1.3.132.0.31" => Some(192),        // SECP192K1
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
623 ~                         // SECP192R1
624 ~                         "1.2.840.10045.3.1.1" | "1.3.132.0.31" => Some(192),        // SECP192K1
    |

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:636:31
    |
636 |             reader.read_slice(Length::try_from(header_len).ok()?).ok()?;
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:651:31
    |
651 |             reader.read_slice(Length::try_from(order_len).ok()?).ok()?;
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: field name starts with the struct's name
   --> packages/client/src/tls/certificate/parser.rs:734:9
    |
734 |         distribution_point: Option<der::Any>,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_field_names

warning: binding to `_` prefixed variable with no side-effect
   --> packages/client/src/tls/certificate/parser.rs:763:21
    |
763 |                 let _len = dp_bytes[offset] as usize;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/crl_cache.rs:232:9
    |
232 |         const MAX_CRL_SIZE: usize = 50 * 1024 * 1024; // 50MB max CRL size
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: unused `self` argument
   --> packages/client/src/tls/crl_cache.rs:257:23
    |
257 |     fn parse_crl_data(&self, crl_bytes: &[u8]) -> Result<CrlCacheEntry, TlsError> {
    |                       ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casting `i64` to `u64` may lose the sign of the value
   --> packages/client/src/tls/crl_cache.rs:304:68
    |
304 |             std::time::UNIX_EPOCH + std::time::Duration::from_secs(time.timestamp() as u64)
    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/ocsp.rs:306:9
    |
306 |         use x509_cert::spki::AlgorithmIdentifierOwned;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/ocsp.rs:322:9
    |
322 |         use x509_ocsp::{Request, TbsRequest};
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/ocsp.rs:322:25
    |
322 |         use x509_ocsp::{Request, TbsRequest};
    |                         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/ocsp.rs:322:34
    |
322 |         use x509_ocsp::{Request, TbsRequest};
    |                                  ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: unused `self` argument
   --> packages/client/src/tls/ocsp.rs:347:9
    |
347 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/tls/tls_manager.rs:62:14
   |
62 |             (self.total_hits() as f64 / total as f64) * 100.0
   |              ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/tls/tls_manager.rs:62:41
   |
62 |             (self.total_hits() as f64 / total as f64) * 100.0
   |                                         ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/tls/tls_manager.rs:72:14
   |
72 |             (self.ocsp_hits as f64 / total as f64) * 100.0
   |              ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/tls/tls_manager.rs:72:38
   |
72 |             (self.ocsp_hits as f64 / total as f64) * 100.0
   |                                      ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/tls/tls_manager.rs:82:14
   |
82 |             (self.crl_hits as f64 / total as f64) * 100.0
   |              ^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> packages/client/src/tls/tls_manager.rs:82:37
   |
82 |             (self.crl_hits as f64 / total as f64) * 100.0
   |                                     ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss

warning: more than 3 bools in a struct
   --> packages/client/src/tls/tls_manager.rs:104:1
    |
104 | / pub struct TlsConfig {
105 | |     /// Enable OCSP validation
106 | |     pub enable_ocsp: bool,
107 | |     /// Enable CRL checking
...   |
118 | |     pub validation_timeout: Duration,
119 | | }
    | |_^
    |
    = help: consider using a state machine or refactoring bools into two-variant enums
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/tls/tls_manager.rs:196:5
    |
196 |     pub async fn with_cert_dir(cert_dir: std::path::PathBuf) -> Result<Self, TlsError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/tls/tls_manager.rs:221:5
    |
221 |     pub fn add_certificate_authority(&self, name: String, ca: CertificateAuthority) -> Result<(), TlsError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/tls/tls_manager.rs:235:5
    |
235 | /     pub async fn create_connection(
236 | |         &self,
237 | |         host: &str,
238 | |         port: u16,
239 | |     ) -> Result<tokio_rustls::client::TlsStream<TcpStream>, TlsError> {
    | |_____________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/tls/tls_manager.rs:401:5
    |
401 | /     pub async fn validate_certificate_ocsp(
402 | |         &self,
403 | |         cert_pem: &str,
404 | |         issuer_cert_pem: Option<&str>,
405 | |     ) -> Result<(), TlsError> {
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/tls/tls_manager.rs:439:5
    |
439 |     pub async fn validate_certificate_crl(&self, cert_pem: &str) -> Result<(), TlsError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/tls/builder/authority.rs:87:5
   |
87 |     pub fn expires_in(&self) -> Result<Duration, TlsError> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function has too many lines (111/100)
   --> packages/client/src/tls/builder/authority.rs:210:5
    |
210 |     pub async fn create(self) -> super::responses::CertificateAuthorityResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this function has too many lines (158/100)
   --> packages/client/src/tls/builder/authority.rs:442:5
    |
442 |     pub async fn load(self) -> super::responses::CertificateAuthorityResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this function has too many lines (133/100)
   --> packages/client/src/tls/builder/authority.rs:723:5
    |
723 |     pub async fn load(self) -> super::responses::CertificateAuthorityResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: the function `ystream::AsyncStream::next` doesn't need a mutable reference
   --> packages/client/src/tls/builder/authority.rs:765:68
    |
765 |                 while let Some(chunk) = ystream::AsyncStream::next(&mut body_stream_pin).await {
    |                                                                    ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed
    = note: `#[warn(clippy::unnecessary_mut_passed)]` implied by `#[warn(clippy::all)]`

warning: missing `#[must_use]` attribute on a method returning `Self`
  --> packages/client/src/tls/builder/certificate/validator.rs:85:5
   |
85 | /     pub fn domains(self, domains: &[&str]) -> Self {
86 | |         Self {
87 | |             domains: Some(domains.iter().map(std::string::ToString::to_string).collect()),
88 | |             ..self
89 | |         }
90 | |     }
   | |_____^
   |
   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this function has too many lines (313/100)
   --> packages/client/src/tls/builder/certificate/validator.rs:102:5
    |
102 |     pub async fn validate(self) -> CertificateValidationResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: missing `#[must_use]` attribute on a method returning `Self`
   --> packages/client/src/tls/builder/certificate/generator.rs:108:5
    |
108 | /     pub fn save_to<P: AsRef<Path>>(self, path: P) -> Self {
109 | |         Self {
110 | |             save_path: Some(path.as_ref().to_path_buf()),
111 | |             ..self
112 | |         }
113 | |     }
    | |_____^
    |
    = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use

warning: this function has too many lines (267/100)
   --> packages/client/src/tls/builder/certificate/generator.rs:116:5
    |
116 |     pub async fn generate(self) -> CertificateGenerationResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: parameter of type `HashMap` should be generalized over different hashers
 --> packages/client/src/tls/builder/certificate/utils.rs:7:31
  |
7 | pub fn format_dn_hashmap(dn: &HashMap<String, String>) -> String {
  |                               ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher
help: add a type parameter for `BuildHasher`
  |
7 | pub fn format_dn_hashmap<S: ::std::hash::BuildHasher>(dn: &HashMap<String, String, S>) -> String {
  |                         +++++++++++++++++++++++++++++                            +++

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/crl_cache.rs:85:5
    |
 85 | /     pub async fn check_certificate_status(
 86 | |         &self,
 87 | |         serial_number: &[u8],
 88 | |         crl_url: &str,
...   |
103 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async
    = note: `#[warn(clippy::unused_async)]` implied by `#[warn(clippy::pedantic)]`

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/crl_cache.rs:106:5
    |
106 | /     pub async fn check_certificate_revocation(
107 | |         &self,
108 | |         cert: &ParsedCertificate,
109 | |     ) -> Result<bool, TlsError> {
...   |
140 | |         Ok(false)
141 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/ocsp.rs:103:5
    |
103 | /     pub async fn check_certificate(
104 | |         &self,
105 | |         cert: &ParsedCertificate,
106 | |         issuer_cert: Option<&ParsedCertificate>,
...   |
136 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/tls_manager.rs:196:5
    |
196 | /     pub async fn with_cert_dir(cert_dir: std::path::PathBuf) -> Result<Self, TlsError> {
197 | |         // Create certificate directory if it doesn't exist
198 | |         if !cert_dir.exists() {
199 | |             std::fs::create_dir_all(&cert_dir)
...   |
217 | |         Ok(Self::with_config(config))
218 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/builder/authority.rs:210:5
    |
210 | /     pub async fn create(self) -> super::responses::CertificateAuthorityResponse {
211 | |         use std::time::SystemTime;
212 | |
213 | |         use rcgen::{CertificateParams, DistinguishedName, DnType, KeyPair};
...   |
342 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/builder/authority.rs:345:5
    |
345 | /     pub async fn load(self) -> super::responses::CertificateAuthorityResponse {
346 | |         use std::time::SystemTime;
347 | |
348 | |         use crate::tls::certificate::parse_certificate_from_pem;
...   |
431 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/builder/authority.rs:442:5
    |
442 | /     pub async fn load(self) -> super::responses::CertificateAuthorityResponse {
443 | |         use std::time::SystemTime;
444 | |         use crate::tls::certificate::parse_certificate_from_pem;
...   |
622 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/builder/authority.rs:625:5
    |
625 | /     pub async fn store(&self, authority: &CertificateAuthority) -> super::responses::CertificateAuthorityResponse {
626 | |         tracing::debug!("Storing CA '{}' to system keychain", authority.name);
...   |
704 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/builder/certificate/generator.rs:116:5
    |
116 | /     pub async fn generate(self) -> CertificateGenerationResponse {
117 | |         use rcgen::{CertificateParams, DistinguishedName, DnType, KeyPair, SanType};
118 | |
119 | |         let mut params = match CertificateParams::new(self.domains.clone()) {
...   |
413 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: variables can be used directly in the `format!` string
    --> packages/client/src/protocols/wire.rs:1514:9
     |
1514 |         assert!(result.is_ok(), "Failed to decode 'a': {:?}", result);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1514 -         assert!(result.is_ok(), "Failed to decode 'a': {:?}", result);
1514 +         assert!(result.is_ok(), "Failed to decode 'a': {result:?}");
     |

warning: variables can be used directly in the `format!` string
    --> packages/client/src/protocols/wire.rs:1521:9
     |
1521 |         assert!(result.is_ok(), "Failed to decode '0': {:?}", result);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1521 -         assert!(result.is_ok(), "Failed to decode '0': {:?}", result);
1521 +         assert!(result.is_ok(), "Failed to decode '0': {result:?}");
     |

warning: variables can be used directly in the `format!` string
    --> packages/client/src/protocols/wire.rs:1528:9
     |
1528 |         assert!(result.is_ok(), "Failed to decode space: {:?}", result);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1528 -         assert!(result.is_ok(), "Failed to decode space: {:?}", result);
1528 +         assert!(result.is_ok(), "Failed to decode space: {result:?}");
     |

warning: variables can be used directly in the `format!` string
    --> packages/client/src/protocols/wire.rs:1540:9
     |
1540 |         assert!(result.is_ok(), "Failed to decode 'test': {:?}", result);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1540 -         assert!(result.is_ok(), "Failed to decode 'test': {:?}", result);
1540 +         assert!(result.is_ok(), "Failed to decode 'test': {result:?}");
     |

warning: variables can be used directly in the `format!` string
    --> packages/client/src/protocols/wire.rs:1551:9
     |
1551 |         assert!(result.is_ok(), "Failed to decode QPACK Huffman string: {:?}", result);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1551 -         assert!(result.is_ok(), "Failed to decode QPACK Huffman string: {:?}", result);
1551 +         assert!(result.is_ok(), "Failed to decode QPACK Huffman string: {result:?}");
     |

warning: variables can be used directly in the `format!` string
    --> packages/client/src/protocols/wire.rs:1564:9
     |
1564 |         assert!(result.is_ok(), "Failed to decode QPACK plain string: {:?}", result);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1564 -         assert!(result.is_ok(), "Failed to decode QPACK plain string: {:?}", result);
1564 +         assert!(result.is_ok(), "Failed to decode QPACK plain string: {result:?}");
     |

warning: variables can be used directly in the `format!` string
  --> packages/client/src/protocols/wire_tests.rs:39:13
   |
39 |             assert!(parsed.contains_key(key), "Missing header: {}", key);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
39 -             assert!(parsed.contains_key(key), "Missing header: {}", key);
39 +             assert!(parsed.contains_key(key), "Missing header: {key}");
   |

warning: variables can be used directly in the `format!` string
  --> packages/client/src/protocols/wire_tests.rs:40:13
   |
40 |             assert_eq!(parsed[key], *expected_value, "Value mismatch for header: {}", key);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
40 -             assert_eq!(parsed[key], *expected_value, "Value mismatch for header: {}", key);
40 +             assert_eq!(parsed[key], *expected_value, "Value mismatch for header: {key}");
   |

warning: variables can be used directly in the `format!` string
  --> packages/client/src/protocols/wire_tests.rs:71:13
   |
71 |             assert!(parsed.contains_key(key), "Missing header: {}", key);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
71 -             assert!(parsed.contains_key(key), "Missing header: {}", key);
71 +             assert!(parsed.contains_key(key), "Missing header: {key}");
   |

warning: variables can be used directly in the `format!` string
  --> packages/client/src/protocols/wire_tests.rs:72:13
   |
72 |             assert_eq!(parsed[key], *expected_value, "Value mismatch for header: {}", key);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
72 -             assert_eq!(parsed[key], *expected_value, "Value mismatch for header: {}", key);
72 +             assert_eq!(parsed[key], *expected_value, "Value mismatch for header: {key}");
   |

warning: casting `usize` to `u8` may truncate the value
  --> packages/client/src/protocols/wire_tests.rs:93:32
   |
93 |         let mut encoded = vec![test_string.len() as u8];
   |                                ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
93 -         let mut encoded = vec![test_string.len() as u8];
93 +         let mut encoded = vec![u8::try_from(test_string.len())];
   |

warning: `quyc_client` (lib) generated 893 warnings (run `cargo clippy --fix --lib -p quyc_client` to apply 34 suggestions)
warning: `quyc_client` (lib test) generated 904 warnings (893 duplicates) (run `cargo clippy --fix --lib -p quyc_client --tests` to apply 10 suggestions)
    Checking quyc v0.1.0 (/Volumes/samsung_t9/quyc/packages/api)
warning: this `continue` expression is redundant
   --> packages/api/src/builder/headers.rs:118:27
    |
118 |                 Err(_) => continue, // Skip invalid header names
    |                           ^^^^^^^^
    |
    = help: consider dropping the `continue` expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_continue
note: the lint level is defined here
   --> packages/api/src/lib.rs:7:22
    |
  7 | #![warn(clippy::all, clippy::pedantic)]
    |                      ^^^^^^^^^^^^^^^^
    = note: `#[warn(clippy::needless_continue)]` implied by `#[warn(clippy::pedantic)]`

warning: these match arms have identical bodies
  --> packages/api/src/builder/core.rs:52:13
   |
52 |             "application/json" => ContentType::ApplicationJson,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
58 |             _ => ContentType::ApplicationJson, // Default fallback
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
   = note: `#[warn(clippy::match_same_arms)]` implied by `#[warn(clippy::pedantic)]`
help: otherwise remove the non-wildcard arm
   |
52 -             "application/json" => ContentType::ApplicationJson,
   |

warning: very complex type used. Consider factoring parts into `type` definitions
  --> packages/api/src/builder/core.rs:99:9
   |
99 |         Option<Arc<dyn Fn(Result<HttpChunk, HttpError>) -> HttpChunk + Send + Sync + 'static>>,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity
note: the lint level is defined here
  --> packages/api/src/lib.rs:7:9
   |
 7 | #![warn(clippy::all, clippy::pedantic)]
   |         ^^^^^^^^^^^
   = note: `#[warn(clippy::type_complexity)]` implied by `#[warn(clippy::all)]`

warning: docs for function which may panic missing `# Panics` section
   --> packages/api/src/builder/core.rs:105:5
    |
105 |     pub fn new(client: &HttpClient) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> packages/api/src/builder/core.rs:159:57
    |
159 | ...                   Url::parse("http://127.0.0.1").expect("Basic URL parsing failed - URL crate may be corrupted")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc
    = note: `#[warn(clippy::missing_panics_doc)]` implied by `#[warn(clippy::pedantic)]`

warning: manual `Debug` impl does not include all fields
   --> packages/api/src/builder/core.rs:362:1
    |
362 | / impl<S> fmt::Debug for Http3Builder<S> {
363 | |     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
364 | |         f.debug_struct("Http3Builder")
365 | |             .field("client", &self.client)
...   |
371 | | }
    | |_^
    |
note: this field is unused
   --> packages/api/src/builder/core.rs:94:5
    |
 94 |     pub(crate) state: S,
    |     ^^^^^^^^^^^^^^^^^^^
    = help: consider including all fields in this `Debug` impl
    = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug
    = note: `#[warn(clippy::missing_fields_in_debug)]` implied by `#[warn(clippy::pedantic)]`

warning: `quyc` (lib test) generated 5 warnings
warning: `quyc` (lib) generated 5 warnings (5 duplicates)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.62s
