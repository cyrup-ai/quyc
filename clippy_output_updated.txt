warning: item in documentation is missing backticks
  --> packages/client/src/connect/builder/tls.rs:41:47
   |
41 |     /// Whether to disable Nagle's algorithm (TCP_NODELAY)
   |                                               ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
note: the lint level is defined here
  --> packages/client/src/lib.rs:26:9
   |
26 | #![warn(clippy::pedantic)]
   |         ^^^^^^^^^^^^^^^^
   = note: `#[warn(clippy::doc_markdown)]` implied by `#[warn(clippy::pedantic)]`
help: try
   |
41 -     /// Whether to disable Nagle's algorithm (TCP_NODELAY)
41 +     /// Whether to disable Nagle's algorithm (`TCP_NODELAY`)
   |

warning: this function has too many arguments (8/7)
   --> packages/client/src/connect/builder/tls.rs:83:5
    |
 83 | /     pub fn new_rustls_tls(
 84 | |         http: HttpConnector,
 85 | |         config: rustls::ClientConfig,
 86 | |         proxies: arrayvec::ArrayVec<crate::proxy::Proxy, 4>,
...   |
103 | |         tls_info: bool,
104 | |     ) -> Result<Self, BoxError> {
    | |_______________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments
note: the lint level is defined here
   --> packages/client/src/lib.rs:25:9
    |
 25 | #![warn(clippy::all)]
    |         ^^^^^^^^^^^
    = note: `#[warn(clippy::too_many_arguments)]` implied by `#[warn(clippy::all)]`

warning: this function has too many arguments (8/7)
   --> packages/client/src/connect/builder/tls.rs:132:5
    |
132 | /     pub fn from_built_rustls_tls(
133 | |         http: HttpConnector,
134 | |         config: rustls::ClientConfig,
135 | |         proxies: arrayvec::ArrayVec<crate::proxy::Proxy, 4>,
...   |
152 | |         tls_info: bool,
153 | |     ) -> Result<Self, BoxError> {
    | |_______________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments

warning: item in documentation is missing backticks
  --> packages/client/src/connect/service/core.rs:33:47
   |
33 |     /// Whether to disable Nagle's algorithm (TCP_NODELAY)
   |                                               ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
33 -     /// Whether to disable Nagle's algorithm (TCP_NODELAY)
33 +     /// Whether to disable Nagle's algorithm (`TCP_NODELAY`)
   |

warning: this function has too many arguments (10/7)
  --> packages/client/src/connect/service/core.rs:83:5
   |
83 | /     pub fn new(
84 | |         http: HttpConnector,
85 | |         #[cfg(feature = "__rustls")] rustls_config: Option<rustls::ClientConfig>,
86 | |         proxies: arrayvec::ArrayVec<crate::proxy::Proxy, 4>,
...  |
93 | |         tls_info: bool,
94 | |     ) -> Result<Self, BoxError> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/connect/service/proxy.rs:17:42
   |
17 |     pub fn connect_via_proxy(&self, dst: Uri, proxy_scheme: &str) -> AsyncStream<TcpConnectionChunk, 1024> {
   |                                          ^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
   = note: `#[warn(clippy::needless_pass_by_value)]` implied by `#[warn(clippy::pedantic)]`
help: consider taking a reference instead
   |
17 |     pub fn connect_via_proxy(&self, dst: &Uri, proxy_scheme: &str) -> AsyncStream<TcpConnectionChunk, 1024> {
   |                                          +

warning: item in documentation is missing backticks
  --> packages/client/src/connect/tcp/socket_config.rs:14:21
   |
14 | /// - Failed to set TCP_NODELAY socket option
   |                     ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
14 - /// - Failed to set TCP_NODELAY socket option
14 + /// - Failed to set `TCP_NODELAY` socket option
   |

warning: item in documentation is missing backticks
  --> packages/client/src/connect/tcp/socket_config.rs:44:21
   |
44 | /// - Failed to set TCP_NODELAY socket option
   |                     ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
44 - /// - Failed to set TCP_NODELAY socket option
44 + /// - Failed to set `TCP_NODELAY` socket option
   |

warning: this could be rewritten as `let...else`
   --> packages/client/src/connect/tcp/socks_protocol.rs:130:9
    |
130 | /         let hostname_len = match u8::try_from(target_host.len()) {
131 | |             Ok(len) => len,
132 | |             Err(_) => {
133 | |                 return Err(format!(
...   |
138 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
    = note: `#[warn(clippy::manual_let_else)]` implied by `#[warn(clippy::pedantic)]`
help: consider writing
    |
130 ~         let Ok(hostname_len) = u8::try_from(target_host.len()) else {
131 +                 return Err(format!(
132 +                     "SOCKS5 hostname too long: {} bytes (max 255)",
133 +                     target_host.len()
134 +                 ));
135 +             };
    |

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/connect/tcp/tls_connections.rs:54:11
   |
54 |     host: String,
   |           ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider changing the type to
   |
54 -     host: String,
54 +     host: &str,
   |
help: change `host.clone()` to
   |
57 -     let server_name = match rustls::pki_types::DnsName::try_from(host.clone()) {
57 +     let server_name = match rustls::pki_types::DnsName::try_from(host.to_string()) {
   |

warning: manual `Debug` impl does not include all fields
  --> packages/client/src/connect/types/connection.rs:19:1
   |
19 | / impl std::fmt::Debug for Conn {
20 | |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
21 | |         f.debug_struct("Conn")
22 | |             .field("is_proxy", &self.is_proxy)
...  |
26 | | }
   | |_^
   |
note: this field is unused
  --> packages/client/src/connect/types/connection.rs:14:5
   |
14 |     pub(super) inner: Box<dyn ConnectionTrait + Send + Sync>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider including all fields in this `Debug` impl
   = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug
   = note: `#[warn(clippy::missing_fields_in_debug)]` implied by `#[warn(clippy::pedantic)]`

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
   --> packages/client/src/connect/types/connector.rs:168:13
    |
168 | /             match ConnectorService::new(
169 | |                 http,
170 | |  // tls
171 | |                 #[cfg(feature = "__rustls")] None, // rustls_config
...   |
209 | |             }
    | |_____________^
    |
    = note: you might want to preserve the comments from inside the `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
    = note: `#[warn(clippy::single_match_else)]` implied by `#[warn(clippy::pedantic)]`
help: try
    |
168 ~             if let Ok(service) = ConnectorService::new(
169 +                 http,
170 +  // tls
171 +                 #[cfg(feature = "__rustls")] None, // rustls_config
172 +                 proxies,
173 +                 None, // user_agent
174 +                 None, // local_address
175 +                 None, // interface
176 +                 true, // nodelay
177 +                 Some(std::time::Duration::from_secs(30)), // connect_timeout
178 +                 Some(std::time::Duration::from_millis(300)), // happy_eyeballs_timeout
179 +                 false, // tls_info
180 +             ) { Self::BuiltHttp(service) } else {
181 +                        // Create minimal fallback connector with default configuration
182 +                        let http = hyper_util::client::legacy::connect::HttpConnector::new();
183 +                        let proxies = arrayvec::ArrayVec::new();
184 +                        
185 +                        match ConnectorService::new(
186 +                            http,
187 +             // tls
188 +                            #[cfg(feature = "__rustls")] None, // rustls_config
189 +                            proxies,
190 +                            None,
191 +                            None,
192 +                            None,
193 +                            true,
194 +                            Some(std::time::Duration::from_secs(10)),
195 +                            Some(std::time::Duration::from_millis(100)),
196 +                            false,
197 +                        ) {
198 +                            Ok(service) => Self::BuiltHttp(service),
199 +                            Err(e) => {
200 +                                log::error!("Critical: Fallback HTTP connector creation failed: {e}");
201 +                                log::error!("System configuration prevents creation of basic HTTP connectors");
202 +                                // Create error-marked connector for graceful degradation instead of panic
203 +                                Self::create_error_marker_connector()
204 +                            }
205 +                        }
206 +                    }
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/compression.rs:212:1
    |
212 | / pub fn compress_bytes(
213 | |     data: &[u8], 
214 | |     algorithm: CompressionAlgorithm, 
215 | |     level: Option<u32>
216 | | ) -> Result<Vec<u8>, HttpError> {
    | |_______________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc
    = note: `#[warn(clippy::missing_errors_doc)]` implied by `#[warn(clippy::pedantic)]`

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/compression.rs:227:1
    |
227 | / pub fn compress_bytes_with_metrics(
228 | |     data: &[u8], 
229 | |     algorithm: CompressionAlgorithm, 
230 | |     level: Option<u32>,
231 | |     stats: Option<&crate::client::core::ClientStats>
232 | | ) -> Result<Vec<u8>, HttpError> {
    | |_______________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function has too many lines (102/100)
   --> packages/client/src/http/compression.rs:227:1
    |
227 | / pub fn compress_bytes_with_metrics(
228 | |     data: &[u8], 
229 | |     algorithm: CompressionAlgorithm, 
230 | |     level: Option<u32>,
231 | |     stats: Option<&crate::client::core::ClientStats>
232 | | ) -> Result<Vec<u8>, HttpError> {
    | |_______________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines
    = note: `#[warn(clippy::too_many_lines)]` implied by `#[warn(clippy::pedantic)]`

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/compression.rs:372:1
    |
372 | pub fn decompress_bytes(data: &[u8], algorithm: CompressionAlgorithm) -> Result<Vec<u8>, HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/http/compression.rs:528:5
    |
528 |     const READ_LIMIT: usize = 64 * 1024 * 1024; // 64MB limit
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements
    = note: `#[warn(clippy::items_after_statements)]` implied by `#[warn(clippy::pedantic)]`

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/http/compression.rs:569:5
    |
569 |     const READ_LIMIT: usize = 64 * 1024 * 1024; // 64MB limit
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: casting `u32` to `i32` may wrap around the value
   --> packages/client/src/http/compression.rs:610:18
    |
610 |         quality: level.min(11) as i32,
    |                  ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap
    = note: `#[warn(clippy::cast_possible_wrap)]` implied by `#[warn(clippy::pedantic)]`

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/http/compression.rs:644:5
    |
644 |     const READ_LIMIT: usize = 64 * 1024 * 1024; // 64MB limit
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/http/compression.rs:872:5
    |
872 | /     static UNCOMPRESSIBLE_TYPES: &[&str] = &[
873 | |         // Images
874 | |         "image/jpeg", "image/png", "image/gif", "image/webp", "image/avif", "image/bmp",
...   |
885 | |         "application/x-br", "application/x-deflate",
886 | |     ];
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/http/conversions.rs:26:47
   |
26 | pub fn from_bytes<T: TryFrom<Vec<u8>>>(bytes: Bytes) -> Result<T, T::Error> {
   |                                               ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
26 | pub fn from_bytes<T: TryFrom<Vec<u8>>>(bytes: &Bytes) -> Result<T, T::Error> {
   |                                               +

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/http/conversions.rs:32:38
   |
32 | pub fn to_string<T: ToString>(value: T) -> String {
   |                                      ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
32 | pub fn to_string<T: ToString>(value: &T) -> String {
   |                                      +

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/http/conversions.rs:49:31
   |
49 | pub fn bytes_to_string(bytes: Bytes) -> Result<String, crate::error::HttpError> {
   |                               ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
49 | pub fn bytes_to_string(bytes: &Bytes) -> Result<String, crate::error::HttpError> {
   |                               +

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/http/conversions.rs:69:28
   |
69 | pub fn bytes_to_vec(bytes: Bytes) -> Vec<u8> {
   |                            ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
69 | pub fn bytes_to_vec(bytes: &Bytes) -> Vec<u8> {
   |                            +

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/http/conversions.rs:111:12
    |
111 |     bytes: Bytes, 
    |            ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
111 |     bytes: &Bytes, 
    |            +

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/escape.rs:35:1
   |
35 | pub fn url_decode(input: &str) -> Result<String, std::fmt::Error> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/headers.rs:118:1
    |
118 | pub fn parse_headers(header_str: &str) -> Result<HeaderMap, crate::error::HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/headers.rs:161:1
    |
161 | pub fn validate_header(name: &str, value: &str) -> Result<(), crate::error::HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/headers.rs:169:1
    |
169 | pub fn create_header_value(value: &str) -> Result<HeaderValue, crate::error::HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/headers.rs:176:1
    |
176 | pub fn create_header_name(name: &str) -> Result<HeaderName, crate::error::HttpError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/into_url.rs:32:5
   |
32 |     fn into_url(self) -> std::result::Result<Url, crate::HttpError>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/http/request.rs:261:37
    |
261 |     pub fn method(mut self, method: Method) -> Self {
    |                                     ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
261 |     pub fn method(mut self, method: &Method) -> Self {
    |                                     +

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/http/resolver/cache.rs:83:31
   |
83 |     pub fn insert(&self, key: String, entry: DnsCacheEntry) {
   |                               ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider changing the type to
   |
83 -     pub fn insert(&self, key: String, entry: DnsCacheEntry) {
83 +     pub fn insert(&self, key: &str, entry: DnsCacheEntry) {
   |
help: change `key.clone()` to
   |
93 -         self.cache.insert(key.clone(), entry);
93 +         self.cache.insert(key.to_string(), entry);
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/resolver/engine.rs:27:5
   |
27 | /     pub fn resolve_with_timeout_and_retry(
28 | |         &self,
29 | |         hostname: &str,
30 | |         port: u16,
31 | |         timeout: Duration,
32 | |         ipv6_preference: bool,
33 | |     ) -> Result<Vec<SocketAddr>, ResolverError> {
   | |_______________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/resolver/rate_limiter.rs:48:5
   |
48 |     pub fn check_rate_limit(&self, hostname: &str, query_type: &str) -> Result<(), String> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
 --> packages/client/src/http/resolver/validation.rs:6:1
  |
6 | pub fn validate_hostname(hostname: &str) -> Result<(), String> {
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/http/response.rs:394:5
    |
394 |     pub fn body_json<T: serde::de::DeserializeOwned>(&self) -> Result<T, serde_json::Error> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/http/response.rs:504:18
    |
504 |         headers: HeaderMap,
    |                  ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
504 |         headers: &HeaderMap,
    |                  +

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/http/response.rs:541:18
    |
541 |         headers: HeaderMap,
    |                  ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
541 |         headers: &HeaderMap,
    |                  +

warning: docs for function returning `Result` missing `# Errors` section
 --> packages/client/src/http/url.rs:7:1
  |
7 | pub fn validate_url(url_str: &str) -> Result<(), crate::error::HttpError> {
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/url.rs:22:1
   |
22 | pub fn normalize_url(url_str: &str) -> Result<String, crate::error::HttpError> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/url.rs:53:1
   |
53 | pub fn parse_url(url_str: &str) -> Result<Url, crate::error::HttpError> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/http/url.rs:92:1
   |
92 | / pub fn build_url(
93 | |     base: &str,
94 | |     path: &str,
95 | |     params: &[(&str, &str)],
96 | | ) -> Result<String, crate::error::HttpError> {
   | |____________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `f64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/buffer/capacity.rs:80:21
   |
80 |                     growth_calculation as usize
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss
   = note: `#[warn(clippy::cast_sign_loss)]` implied by `#[warn(clippy::pedantic)]`

warning: casting `f64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/buffer/capacity.rs:166:58
    |
166 |                     std::cmp::max(self.initial_capacity, shrink_calculation as usize)
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/buffer/core.rs:64:43
   |
64 |     pub fn append_chunk(&mut self, chunk: Bytes) {
   |                                           ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
64 |     pub fn append_chunk(&mut self, chunk: &Bytes) {
   |                                           +

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:16:5
   |
16 |     pub fn apply_index(arr: &[Value], index: i64, from_end: bool) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this could be rewritten as `let...else`
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:21:13
   |
21 | /             let abs_index = match usize::try_from(-index) {
22 | |                 Ok(idx) => idx,
23 | |                 Err(_) => return Ok(results), // Index too large for usize
24 | |             };
   | |______________^ help: consider writing: `let Ok(abs_index) = usize::try_from(-index) else { return Ok(results) };`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:32:13
   |
32 | /             let index_usize = match usize::try_from(index) {
33 | |                 Ok(idx) => idx,
34 | |                 Err(_) => return Ok(results), // Index too large for usize
35 | |             };
   | |______________^ help: consider writing: `let Ok(index_usize) = usize::try_from(index) else { return Ok(results) };`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:60:5
   |
60 | /     pub fn apply_slice(
61 | |         arr: &[Value],
62 | |         start: Option<i64>,
63 | |         end: Option<i64>,
64 | |         step: i64,
65 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:72:19
   |
72 |         let len = arr.len() as i64;
   |                   ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:178:5
    |
178 |     pub fn apply_multiple_indices(arr: &[Value], indices: &[i64]) -> JsonPathResult<Vec<Value>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this `if` statement can be collapsed
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:182:13
    |
182 | /             if index >= 0 {
183 | |                 if let Ok(index_usize) = usize::try_from(index) {
184 | |                     if index_usize < arr.len() {
185 | |                         results.push(arr[index_usize].clone());
...   |
188 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
    = note: `#[warn(clippy::collapsible_if)]` implied by `#[warn(clippy::all)]`
help: collapse nested if block
    |
182 ~             if index >= 0
183 ~                 && let Ok(index_usize) = usize::try_from(index) {
184 |                     if index_usize < arr.len() {
185 |                         results.push(arr[index_usize].clone());
186 |                     }
187 ~                 }
    |

warning: this `if` statement can be collapsed
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:183:17
    |
183 | /                 if let Ok(index_usize) = usize::try_from(index) {
184 | |                     if index_usize < arr.len() {
185 | |                         results.push(arr[index_usize].clone());
186 | |                     }
187 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
183 ~                 if let Ok(index_usize) = usize::try_from(index)
184 ~                     && index_usize < arr.len() {
185 |                         results.push(arr[index_usize].clone());
186 ~                     }
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_operations.rs:195:5
    |
195 |     pub fn apply_range(arr: &[Value], start: i64, end: i64) -> JsonPathResult<Vec<Value>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:14:5
   |
14 |     pub fn evaluate_array_access(&self, json: &Value, expr: &str) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: stripping a prefix manually
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:26:74
   |
26 |                 let property_results = self.evaluate_property_path(json, &path[2..])?;
   |                                                                          ^^^^^^^^^^
   |
note: the prefix was tested here
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:25:20
   |
25 |             } else if path.starts_with("$.") {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip
   = note: `#[warn(clippy::manual_strip)]` implied by `#[warn(clippy::all)]`
help: try using the `strip_prefix` method
   |
25 ~             } else if let Some(<stripped>) = path.strip_prefix("$.") {
26 ~                 let property_results = self.evaluate_property_path(json, <stripped>)?;
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:68:5
   |
68 | /     pub fn apply_array_selector(
69 | |         &self,
70 | |         arr: &[Value],
71 | |         selector: &str,
72 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:81:33
   |
81 |                 let abs_index = (-index) as usize;
   |                                 ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:116:5
    |
116 | /     pub fn apply_slice_selector(
117 | |         &self,
118 | |         arr: &[Value],
119 | |         selector: &str,
120 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:132:13
    |
132 |             arr.len() as i64
    |             ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:134:47
    |
134 |             parts[1].parse::<i64>().unwrap_or(arr.len() as i64)
    |                                               ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:139:13
    |
139 |             (arr.len() as i64 + start).max(0) as usize
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:139:14
    |
139 |             (arr.len() as i64 + start).max(0) as usize
    |              ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:142:13
    |
142 |             start as usize
    |             ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:146:13
    |
146 |             (arr.len() as i64 + end).max(0) as usize
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:146:14
    |
146 |             (arr.len() as i64 + end).max(0) as usize
    |              ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:149:13
    |
149 |             (end as usize).min(arr.len())
    |             ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:161:5
    |
161 | /     pub fn apply_union_selector(
162 | |         &self,
163 | |         arr: &[Value],
164 | |         selector: &str,
165 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:175:37
    |
175 |                     let abs_index = (-index) as usize;
    |                                     ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:183:21
    |
183 |                     index as usize
    |                     ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:196:5
    |
196 |     pub fn evaluate_wildcard(&self, json: &Value) -> JsonPathResult<Vec<Value>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: parameter is only used in recursion
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:213:42
    |
213 |     pub fn collect_all_values_recursive(&self, json: &Value, results: &mut Vec<Value>) {
    |                                          ^^^^
    |
note: parameter used here
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:218:21
    |
218 |                     self.collect_all_values_recursive(value, results);
    |                     ^^^^
...
224 |                     self.collect_all_values_recursive(value, results);
    |                     ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion
    = note: `#[warn(clippy::only_used_in_recursion)]` implied by `#[warn(clippy::all)]`

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:232:5
    |
232 | /     pub fn evaluate_property_with_array_wildcards(
233 | |         &self,
234 | |         json: &Value,
235 | |         expr: &str,
236 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: stripping a prefix manually
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:252:41
    |
252 |             let path_parts: Vec<&str> = before_wildcard[2..].split('.').collect();
    |                                         ^^^^^^^^^^^^^^^^^^^^
    |
note: the prefix was tested here
   --> packages/client/src/jsonpath/core_evaluator/array_ops.rs:251:16
    |
251 |         } else if before_wildcard.starts_with("$.") {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip
help: try using the `strip_prefix` method
    |
251 ~         } else if let Some(<stripped>) = before_wildcard.strip_prefix("$.") {
252 ~             let path_parts: Vec<&str> = <stripped>.split('.').collect();
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/core.rs:43:5
   |
43 |     pub fn new(expression: &str) -> JsonPathResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/core.rs:55:5
   |
55 |     pub fn evaluate(&self, json: &Value) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/core.rs:73:5
   |
73 | /     pub fn evaluate_with_custom_timeout(
74 | |         &self,
75 | |         json: &Value,
76 | |         timeout_ms: u64,
77 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/engine.rs:25:5
   |
25 |     pub fn new(expression: &str) -> JsonPathResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/engine.rs:37:5
   |
37 |     pub fn evaluate(&self, json: &Value) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: parameter is only used in recursion
  --> packages/client/src/jsonpath/core_evaluator/descendant_operations.rs:19:34
   |
19 |     fn collect_descendants_impl(&self, json: &Value, descendants: &mut Vec<Value>) {
   |                                  ^^^^
   |
note: parameter used here
  --> packages/client/src/jsonpath/core_evaluator/descendant_operations.rs:27:21
   |
27 |                     self.collect_descendants_impl(value, descendants);
   |                     ^^^^
...
32 |                     self.collect_descendants_impl(value, descendants);
   |                     ^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/descendant_operations.rs:42:5
   |
42 | /     pub fn apply_selector_to_descendants(
43 | |         &self,
44 | |         json: &Value,
45 | |         selector: &JsonSelector,
46 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/descendant_operations.rs:59:5
   |
59 | /     pub fn apply_selectors_recursively(
60 | |         &self,
61 | |         json: &Value,
62 | |         selectors: &[JsonSelector],
63 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/core_types.rs:27:5
   |
27 |     pub fn new(expression: &str) -> JsonPathResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/core_evaluator/evaluator/descendant_operations/collection.rs:72:23
   |
72 |         current_path: String,
   |                       ^^^^^^ help: consider changing the type to: `&str`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/descendant_operations/core.rs:16:5
   |
16 | /     pub fn apply_descendant_segment_recursive(
17 | |         node: &Value,
18 | |         remaining_selectors: &[JsonSelector],
19 | |         results: &mut Vec<Value>,
20 | |     ) -> JsonPathResult<()> {
   | |___________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/evaluation_engine.rs:17:5
   |
17 | /     pub fn evaluate_expression(
18 | |         evaluator: &CoreJsonPathEvaluator,
19 | |         json: &Value,
20 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/evaluator/evaluation_engine.rs:99:5
    |
 99 | /     pub fn apply_selector_to_value(
100 | |         value: &Value,
101 | |         selector: &JsonSelector,
102 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/evaluator/evaluation_engine.rs:108:5
    |
108 | /     pub fn evaluate_multiple(
109 | |         expressions: &[&str],
110 | |         json: &Value,
111 | |     ) -> JsonPathResult<Vec<Vec<Value>>> {
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/property_operations/core.rs:14:5
   |
14 |     pub fn evaluate_property_path(json: &Value, path: &str) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/property_operations/extensions.rs:13:5
   |
13 |     pub fn evaluate_property_path(&self, json: &Value, path: &str) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:36:5
   |
36 | /     pub fn evaluate_with_timeout(
37 | |         evaluator: &CoreJsonPathEvaluator,
38 | |         json: &Value,
39 | |         config: Option<TimeoutConfig>,
40 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: returning the result of a `let` binding from a block
  --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:82:9
   |
55 | /         let runtime_result = if let Ok(handle) = tokio::runtime::Handle::try_current() {
56 | |             handle.block_on(Self::evaluate_with_timeout_async(
57 | |                 expression_clone,
58 | |                 json_clone,
...  |
79 | |             ))
80 | |         };
   | |__________- unnecessary `let` binding
81 |
82 |           runtime_result
   |           ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
   = note: `#[warn(clippy::let_and_return)]` implied by `#[warn(clippy::all)]`
help: return the expression directly
   |
55 ~         
56 |
57 ~         if let Ok(handle) = tokio::runtime::Handle::try_current() {
58 +             handle.block_on(Self::evaluate_with_timeout_async(
59 +                 expression_clone,
60 +                 json_clone,
61 +                 config,
62 +                 start_time,
63 +                 cancel_flag,
64 +                 cancel_clone,
65 +             ))
66 +         } else {
67 +             // Create minimal runtime only if needed
68 +             let rt = tokio::runtime::Runtime::new()
69 +                 .map_err(|e| crate::jsonpath::error::invalid_expression_error(
70 +                     evaluator.expression(),
71 +                     &format!("Failed to create async runtime for timeout handling: {e}"),
72 +                     None,
73 +                 ))?;
74 +             rt.block_on(Self::evaluate_with_timeout_async(
75 +                 expression.clone(),
76 +                 json_clone,
77 +                 config,
78 +                 start_time,
79 +                 cancel_flag,
80 +                 cancel_clone,
81 +             ))
82 +         }
   |

warning: the borrowed expression implements the required traits
  --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:69:21
   |
69 |                     &format!("Failed to create async runtime for timeout handling: {e}"),
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `format!("Failed to create async runtime for timeout handling: {e}")`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args
   = note: `#[warn(clippy::needless_borrows_for_generic_args)]` implied by `#[warn(clippy::all)]`

warning: the borrowed expression implements the required traits
   --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:126:21
    |
126 |                     &format!("evaluation task panicked: {join_error}"),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `format!("evaluation task panicked: {join_error}")`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:151:22
    |
151 |         cancel_flag: Arc<AtomicBool>
    |                      ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
151 |         cancel_flag: &Arc<AtomicBool>
    |                      +

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/jsonpath/core_evaluator/evaluator/timeout_handler.rs:201:9
    |
201 |         use std::convert::TryFrom;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/mod.rs:22:5
   |
22 |     pub fn evaluate(&self, json: &serde_json::Value) -> JsonPathResult<Vec<serde_json::Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/evaluator/mod.rs:28:5
   |
28 | /     pub fn evaluate_with_config(
29 | |         &self,
30 | |         json: &serde_json::Value,
31 | |         config: TimeoutConfig,
32 | |     ) -> JsonPathResult<Vec<serde_json::Value>> {
   | |_______________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: unused `self` argument
  --> packages/client/src/jsonpath/core_evaluator/filter_evaluation.rs:42:9
   |
42 |         &self,
   |         ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self
   = note: `#[warn(clippy::unused_self)]` implied by `#[warn(clippy::pedantic)]`

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/core_evaluator/filter_evaluation.rs:41:5
   |
41 | /     fn evaluate_filter_on_item(
42 | |         &self,
43 | |         item: &Value,
44 | |         filter_expr: &str,
45 | |         _index: usize,
46 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
   = note: `#[warn(clippy::unnecessary_wraps)]` implied by `#[warn(clippy::pedantic)]`
help: remove `Result` from the return type...
   |
46 -     ) -> JsonPathResult<bool> {
46 +     ) -> bool {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
52 ~                 return obj.contains_key(property_name);
53 |             }
...
62 |                     // Compare entire item
63 ~                     return item.as_str() == Some(right);
64 |                 } else if left.starts_with("@.") {
...
68 |                         && let Some(prop_value) = obj.get(prop_name) {
69 ~                             return prop_value.as_str() == Some(right);
70 |                         }
...
75 |         // Default: no match
76 ~         false
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/property_operations.rs:11:5
   |
11 |     pub fn evaluate_property_path(&self, json: &Value, path: &str) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: parameter is only used in recursion
  --> packages/client/src/jsonpath/core_evaluator/property_operations.rs:42:38
   |
42 |     fn find_property_recursive_impl(&self, json: &Value, property: &str, results: &mut Vec<Value>) {
   |                                      ^^^^
   |
note: parameter used here
  --> packages/client/src/jsonpath/core_evaluator/property_operations.rs:51:21
   |
51 |                     self.find_property_recursive_impl(value, property, results);
   |                     ^^^^
...
57 |                     self.find_property_recursive_impl(value, property, results);
   |                     ^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/recursive_descent.rs:18:5
   |
18 | /     pub fn apply_recursive_descent(
19 | |         value: &Value,
20 | |         remaining_selectors: &[crate::jsonpath::ast::JsonSelector],
21 | |         max_depth: usize,
22 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:13:5
   |
13 | /     pub fn apply_selector_to_value(
14 | |         &self,
15 | |         value: &Value,
16 | |         selector: &JsonSelector,
17 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:40:35
   |
40 |                         let len = arr.len() as i64;
   |                                   ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:48:49
   |
48 |                         if actual_index >= 0 && (actual_index as usize) < arr.len() {
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:50:41
   |
50 | ...                   Ok(vec![arr[actual_index as usize].clone()])
   |                                   ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:62:35
   |
62 |                         let len = arr.len() as i64;
   |                                   ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:82:48
   |
82 | ...                   if current >= 0 && (current as usize) < arr.len() {
   |                                          ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selector_application.rs:83:50
   |
83 | ...                   results.push(arr[current as usize].clone());
   |                                        ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selector_engine.rs:21:5
   |
21 |     pub fn apply_selector(value: &Value, selector: &JsonSelector) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/selector_engine.rs:146:5
    |
146 | /     pub fn apply_selectors(
147 | |         initial_value: &Value,
148 | |         selectors: &[JsonSelector],
149 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: match expression looks like `matches!` macro
   --> packages/client/src/jsonpath/core_evaluator/selector_engine.rs:183:9
    |
183 | /         match selector {
184 | |             JsonSelector::RecursiveDescent => true,
185 | |             JsonSelector::Wildcard => true,
186 | |             JsonSelector::Filter { .. } => true,
...   |
189 | |             _ => false,
190 | |         }
    | |_________^ help: try: `matches!(selector, JsonSelector::RecursiveDescent | JsonSelector::Wildcard | JsonSelector::Filter { .. } | JsonSelector::Slice { .. } | JsonSelector::Union { .. })`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
    = note: `#[warn(clippy::match_like_matches_macro)]` implied by `#[warn(clippy::all)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:15:1
   |
15 | / pub fn apply_slice_to_array(
16 | |     array: &Value,
17 | |     start: Option<i64>,
18 | |     end: Option<i64>,
19 | |     step: Option<i64>,
20 | | ) -> JsonPathResult<Vec<Value>> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:23:23
   |
23 |             let len = arr.len() as i64;
   |                       ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:53:42
   |
53 |                         results.push(arr[i as usize].clone());
   |                                          ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:61:42
   |
61 |                         results.push(arr[i as usize].clone());
   |                                          ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:85:29
   |
85 |             let abs_index = (-index) as usize;
   |                             ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:93:16
   |
93 |             if (index as usize) <= arr.len() {
   |                ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:94:29
   |
94 |                 arr.len() - (index as usize)
   |                             ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:100:13
    |
100 |             index as usize
    |             ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:112:5
    |
112 | /     pub fn apply_slice_to_array(
113 | |         &self,
114 | |         arr: &[Value],
115 | |         start: Option<i64>,
116 | |         end: Option<i64>,
117 | |         step: Option<i64>,
118 | |     ) -> JsonPathResult<Vec<Value>> {
    | |___________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:119:19
    |
119 |         let len = arr.len() as i64;
    |                   ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:146:30
    |
146 |                 if i >= 0 && (i as usize) < arr.len() {
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:147:38
    |
147 |                     results.push(arr[i as usize].clone());
    |                                      ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:154:30
    |
154 |                 if i >= 0 && (i as usize) < arr.len() {
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:155:38
    |
155 |                     results.push(arr[i as usize].clone());
    |                                      ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:176:33
    |
176 |                 let abs_index = (-index) as usize;
    |                                 ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:184:20
    |
184 |                 if (index as usize) <= arr.len() {
    |                    ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:185:33
    |
185 |                     arr.len() - (index as usize)
    |                                 ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:191:17
    |
191 |                 index as usize
    |                 ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:211:23
    |
211 |             let len = arr.len() as i64;
    |                       ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:236:34
    |
236 |                     if i >= 0 && (i as usize) < arr.len() {
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:237:43
    |
237 |                         results.push(&arr[i as usize]);
    |                                           ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:244:34
    |
244 |                     if i >= 0 && (i as usize) < arr.len() {
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/core_evaluator/selectors/arrays.rs:245:43
    |
245 |                         results.push(&arr[i as usize]);
    |                                           ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selectors/core.rs:16:5
   |
16 | /     pub fn apply_selector_to_value(
17 | |         &self,
18 | |         value: &Value,
19 | |         selector: &JsonSelector,
20 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: parameter is only used in recursion
  --> packages/client/src/jsonpath/core_evaluator/selectors/core.rs:70:43
   |
70 |     pub fn collect_all_descendants_owned(&self, node: &Value, results: &mut Vec<Value>) {
   |                                           ^^^^
   |
note: parameter used here
  --> packages/client/src/jsonpath/core_evaluator/selectors/core.rs:75:21
   |
75 |                     self.collect_all_descendants_owned(value, results);
   |                     ^^^^
...
81 |                     self.collect_all_descendants_owned(value, results);
   |                     ^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion

warning: parameter is only used in recursion
   --> packages/client/src/jsonpath/core_evaluator/selectors/core.rs:102:41
    |
102 |     pub fn collect_all_descendants<'a>(&self, node: &'a Value, results: &mut Vec<&'a Value>) {
    |                                         ^^^^
    |
note: parameter used here
   --> packages/client/src/jsonpath/core_evaluator/selectors/core.rs:107:21
    |
107 |                     self.collect_all_descendants(value, results);
    |                     ^^^^
...
113 |                     self.collect_all_descendants(value, results);
    |                     ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selectors/filters.rs:16:1
   |
16 | / pub fn apply_filter_selector_owned(
17 | |     evaluator: &CoreJsonPathEvaluator,
18 | |     node: &Value,
19 | |     expression: &FilterExpression,
20 | |     results: &mut Vec<Value>,
21 | | ) -> JsonPathResult<()> {
   | |_______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/selectors/filters.rs:79:5
   |
79 | /     pub fn apply_filter_selector<'a>(
80 | |         &self,
81 | |         node: &'a Value,
82 | |         expression: &FilterExpression,
83 | |         results: &mut Vec<&'a Value>,
84 | |     ) -> JsonPathResult<()> {
   | |___________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/timeout_protection.rs:20:5
   |
20 |     pub fn evaluate_with_timeout(expression: &str, json: &Value) -> JsonPathResult<Vec<Value>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/core_evaluator/timeout_protection.rs:25:5
   |
25 | /     pub fn evaluate_with_custom_timeout(
26 | |         expression: &str,
27 | |         json: &Value,
28 | |         timeout_ms: u64,
29 | |     ) -> JsonPathResult<Vec<Value>> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/byte_processor/trait_impl.rs:26:5
   |
26 |     fn read_next_byte(&mut self) -> JsonPathResult<Option<u8>>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/byte_processor/trait_impl.rs:27:5
   |
27 |     fn process_json_byte(&mut self, byte: u8) -> JsonPathResult<JsonProcessResult>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/byte_processor/trait_impl.rs:28:5
   |
28 |     fn skip_whitespace(&mut self) -> JsonPathResult<()>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/byte_processor/trait_impl.rs:29:5
   |
29 |     fn read_string(&mut self) -> JsonPathResult<String>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/byte_processor/trait_impl.rs:30:5
   |
30 |     fn read_number(&mut self) -> JsonPathResult<f64>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/core/byte_processing.rs:11:5
   |
11 |     pub fn read_next_byte(&mut self) -> crate::jsonpath::error::JsonPathResult<Option<u8>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/core/deserialization.rs:11:5
   |
11 | /     pub fn deserialize_current_object(
12 | |         &mut self,
13 | |     ) -> crate::jsonpath::error::JsonPathResult<Option<T>> {
   | |__________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/core/processing.rs:16:5
   |
16 | /     pub fn process_json_byte(
17 | |         &mut self,
18 | |         byte: u8,
19 | |     ) -> crate::jsonpath::error::JsonPathResult<super::super::processor::JsonProcessResult> {
   | |___________________________________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function's return value is unnecessarily wrapped by `Result`
   --> packages/client/src/jsonpath/deserializer/core/processing.rs:164:5
    |
164 | /     pub(super) fn process_array_byte(
165 | |         &mut self,
166 | |         byte: u8,
167 | |     ) -> crate::jsonpath::error::JsonPathResult<super::super::processor::JsonProcessResult> {
    | |___________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
167 -     ) -> crate::jsonpath::error::JsonPathResult<super::super::processor::JsonProcessResult> {
167 +     ) -> jsonpath::deserializer::processor::core::JsonProcessResult {
    |
help: ...and then remove the surrounding `Ok()` from returning expressions
    |
170 ~                 super::super::processor::JsonProcessResult::Continue
171 |             }
...
177 |                     self.object_nesting = 1;
178 ~                     super::super::processor::JsonProcessResult::Continue
179 |                 } else {
180 ~                     super::super::processor::JsonProcessResult::Continue
181 |                 }
...
187 |                 self.current_array_index = 0;
188 ~                 super::super::processor::JsonProcessResult::Continue
189 |             }
...
199 |                     }
200 ~                     return result;
201 |                 }
...
211 |                     self.transition_to_complete();
212 ~                     super::super::processor::JsonProcessResult::Complete
213 |                 } else {
214 ~                     super::super::processor::JsonProcessResult::Continue
215 |                 }
...
219 |                     // Don't add the comma to the object buffer - it's a separator, not part of the object
220 ~                     super::super::processor::JsonProcessResult::ObjectFound
221 |                 } else {
222 |                     self.current_array_index = self.current_array_index.saturating_add(1);
223 ~                     super::super::processor::JsonProcessResult::Continue
224 |                 }
...
229 |                 }
230 ~                 super::super::processor::JsonProcessResult::Continue
    |

warning: clamp-like pattern without using clamp function
   --> packages/client/src/jsonpath/deserializer/core/types.rs:251:9
    |
251 |         (match_rate * backtrack_penalty).max(0.1).min(1.0)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with clamp: `(match_rate * backtrack_penalty).clamp(0.1, 1.0)`
    |
    = note: clamp will panic if max < min, min.is_nan(), or max.is_nan()
    = note: clamp returns NaN if the input is NaN
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp
    = note: `#[warn(clippy::manual_clamp)]` implied by `#[warn(clippy::all)]`

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/deserializer/core/types.rs:265:5
    |
265 | /     pub fn enter_recursive_descent(
266 | |         &mut self, 
267 | |         origin_path: String, 
268 | |         triggering_selector: usize
269 | |     ) -> Result<(), JsonPathError> {
    | |__________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:339:47
    |
339 |                 PathSegment::Property(key) => path.push_str(&format!(".{key}")),
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string
    = note: `#[warn(clippy::format_push_string)]` implied by `#[warn(clippy::pedantic)]`

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:340:49
    |
340 |                 PathSegment::ArrayIndex(idx) => path.push_str(&format!("[{idx}]")),
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:343:53
    |
343 |                 PathSegment::FilterMatch(filter) => path.push_str(&format!("[?{filter}]")),
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:349:43
    |
349 |             PathSegment::Property(key) => path.push_str(&format!(".{key}")),
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:350:45
    |
350 |             PathSegment::ArrayIndex(idx) => path.push_str(&format!("[{idx}]")),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: `format!(..)` appended to existing `String`
   --> packages/client/src/jsonpath/deserializer/core/types.rs:353:49
    |
353 |             PathSegment::FilterMatch(filter) => path.push_str(&format!("[?{filter}]")),
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `write!` to avoid the extra allocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/deserializer/core/types.rs:436:5
    |
436 |     pub fn optimize_buffer_capacity(&mut self) -> Result<(), JsonPathError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/jsonpath/deserializer/core/types.rs:795:56
    |
795 |     fn process_json_chunk_owned(&mut self, chunk_data: Vec<u8>) -> Result<ProcessingResult, JsonPathError> {
    |                                                        ^^^^^^^ help: consider changing the type to: `&[u8]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/jsonpath/deserializer/core/types.rs:879:51
    |
879 |     fn apply_processing_result(&mut self, result: ProcessingResult) {
    |                                                   ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
879 |     fn apply_processing_result(&mut self, result: &ProcessingResult) {
    |                                                   +

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/deserializer/core/types.rs:945:82
    |
945 |                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
    |                                                                                  ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1016:82
     |
1016 |                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
     |                                                                                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1103:21
     |
1103 |                     array_index as i64 == *index
     |                     ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1136:82
     |
1136 |                     matches!(&frame.segment, PathSegment::ArrayIndex(i) if *i == *index as usize)
     |                                                                                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unused `self` argument
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1169:28
     |
1169 |     fn index_matches_slice(&self, index: usize, start: Option<i64>, end: Option<i64>, step: Option<i64>) -> bool {
     |                            ^^^^^
     |
     = help: consider refactoring to an associated function
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casting `i64` to `usize` may lose the sign of the value
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1170:20
     |
1170 |         let step = step.unwrap_or(1).max(1) as usize; // Ensure positive step
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1171:21
     |
1171 |         let index = index as i64;
     |                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
    --> packages/client/src/jsonpath/deserializer/core/types.rs:1187:13
     |
1187 |             ((index - start_bound) as usize).is_multiple_of(step)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be rewritten as `let...else`
  --> packages/client/src/jsonpath/deserializer/iterator.rs:74:13
   |
74 | /             let byte = match self.deserializer.read_next_byte()? {
75 | |                 Some(b) => b,
76 | |                 None => return Ok(None), // No more data available
77 | |             };
   | |______________^ help: consider writing: `let Some(byte) = self.deserializer.read_next_byte()? else { return Ok(None) };`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: match expression looks like `matches!` macro
  --> packages/client/src/jsonpath/deserializer/path_evaluator.rs:18:9
   |
18 | /         match self.deserializer.path_expression.root_selector() {
19 | |             Some(crate::jsonpath::parser::JsonSelector::Child { .. }) => true,
20 | |             Some(crate::jsonpath::parser::JsonSelector::Filter { .. }) => true,
21 | |             _ => false,
22 | |         }
   | |_________^ help: try: `matches!(self.deserializer.path_expression.root_selector(), Some(crate::jsonpath::parser::JsonSelector::Child { .. }) | Some(crate::jsonpath::parser::JsonSelector::Filter { .. }))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: adding items after statements is confusing, since items exist from the start of the scope
  --> packages/client/src/jsonpath/deserializer/processor/core.rs:60:9
   |
60 |         const MAX_STRING_BYTES: usize = 1024 * 1024; // 1MB limit for JSON strings
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/deserializer/processor/path_evaluation.rs:22:1
   |
22 | / pub fn evaluate_path_step(
23 | |     expression: &JsonPathExpression,
24 | |     current_path: &[String],
25 | |     property_name: Option<&str>,
26 | |     is_array: bool,
27 | |     _array_index: Option<usize>,
28 | | ) -> JsonPathResult<PathEvaluationResult> {
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/deserializer/processor/state_processors.rs:47:5
   |
47 | /     pub(super) fn process_navigating_byte(
48 | |         &mut self,
49 | |         byte: u8,
50 | |     ) -> JsonPathResult<JsonProcessResult> {
   | |__________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
50 -     ) -> JsonPathResult<JsonProcessResult> {
50 +     ) -> jsonpath::deserializer::processor::core::JsonProcessResult {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
70 ~                     JsonProcessResult::Continue
71 |                 } else {
72 ~                     JsonProcessResult::Continue
73 |                 }
...
91 |                 }
92 ~                 JsonProcessResult::Continue
93 |             }
...
104|                     self.deserializer.transition_to_complete();
105~                     JsonProcessResult::Complete
106|                 } else {
107~                     JsonProcessResult::Continue
108|                 }
...
114|                     self.deserializer.transition_to_complete();
115~                     JsonProcessResult::Complete
116|                 } else {
117~                     JsonProcessResult::Continue
118|                 }
119|             }
120~             _ => JsonProcessResult::Continue, // Skip whitespace, separators, and other characters
   |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/deserializer/recursive.rs:103:58
    |
103 | ...   segment: PathSegment::ArrayIndex(self.deserializer.current_array_index.max(0) as usize), // PRODUCTION-GRADE: Use actual array inde...
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/error/conversions/helpers.rs:50:16
   |
50 |         error: serde_json::Error,
   |                ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
50 |         error: &serde_json::Error,
   |                +

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/error/conversions/helpers.rs:64:40
   |
64 |     pub fn from_io_with_context(error: std::io::Error, state: &str) -> Self {
   |                                        ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
64 |     pub fn from_io_with_context(error: &std::io::Error, state: &str) -> Self {
   |                                        +

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/comparison.rs:21:5
   |
21 | /     pub fn compare_values(
22 | |         left: &FilterValue,
23 | |         op: ComparisonOp,
24 | |         right: &FilterValue,
25 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/comparison.rs:32:5
   |
32 | /     pub fn compare_values_with_context(
33 | |         left: &FilterValue,
34 | |         op: ComparisonOp,
35 | |         right: &FilterValue,
36 | |         _existing_properties: &HashSet<String>,
37 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function has too many lines (130/100)
  --> packages/client/src/jsonpath/filter/comparison.rs:32:5
   |
32 | /     pub fn compare_values_with_context(
33 | |         left: &FilterValue,
34 | |         op: ComparisonOp,
35 | |         right: &FilterValue,
36 | |         _existing_properties: &HashSet<String>,
37 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:123:13
    |
123 |             (FilterValue::Missing, _) => Ok(false),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
124 |             (_, FilterValue::Missing) => Ok(false),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
    = note: `#[warn(clippy::match_same_arms)]` implied by `#[warn(clippy::pedantic)]`
help: otherwise merge the patterns into a single arm
    |
123 -             (FilterValue::Missing, _) => Ok(false),
124 -             (_, FilterValue::Missing) => Ok(false),
123 +             (FilterValue::Missing, _) | (_, FilterValue::Missing) => Ok(false),
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:131:13
    |
131 | /             (FilterValue::Null, _) => Ok(match op {
132 | |                 ComparisonOp::Equal => false,
133 | |                 ComparisonOp::NotEqual => true,
134 | |                 _ => false,
135 | |             }),
    | |______________^
136 | /             (_, FilterValue::Null) => Ok(match op {
137 | |                 ComparisonOp::Equal => false,
138 | |                 ComparisonOp::NotEqual => true,
139 | |                 _ => false,
140 | |             }),
    | |______________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
131 -             (FilterValue::Null, _) => Ok(match op {
132 -                 ComparisonOp::Equal => false,
133 -                 ComparisonOp::NotEqual => true,
134 -                 _ => false,
135 -             }),
136 -             (_, FilterValue::Null) => Ok(match op {
131 +             (FilterValue::Null, _) | (_, FilterValue::Null) => Ok(match op {
    |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter/comparison.rs:84:29
   |
84 | ...                   ComparisonOp::Equal => false, // missing is never equal to null
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
85 | ...                   ComparisonOp::NotEqual => exists_in_context, /* missing != null only if property exists somewhere */
86 | ...                   _ => false,
   |                       ^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
84 -                             ComparisonOp::Equal => false, // missing is never equal to null
84 +                             // missing is never equal to null
   |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:112:29
    |
112 | ...                   ComparisonOp::Equal => false, // null is never equal to missing
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
113 | ...                   ComparisonOp::NotEqual => exists_in_context, /* null != missing only if property exists somewhere */
114 | ...                   _ => false,
    |                       ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
112 -                             ComparisonOp::Equal => false, // null is never equal to missing
112 +                             // null is never equal to missing
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:128:17
    |
128 |                 ComparisonOp::NotEqual => false,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
129 |                 _ => false,
    |                 ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
128 -                 ComparisonOp::NotEqual => false,
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:132:17
    |
132 |                 ComparisonOp::Equal => false,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
133 |                 ComparisonOp::NotEqual => true,
134 |                 _ => false,
    |                 ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
132 -                 ComparisonOp::Equal => false,
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparison.rs:137:17
    |
137 |                 ComparisonOp::Equal => false,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
138 |                 ComparisonOp::NotEqual => true,
139 |                 _ => false,
    |                 ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
137 -                 ComparisonOp::Equal => false,
    |

warning: this function has too many lines (121/100)
  --> packages/client/src/jsonpath/filter/comparisons.rs:28:1
   |
28 | / pub fn compare_values_with_context(
29 | |     left: &FilterValue,
30 | |     op: ComparisonOp,
31 | |     right: &FilterValue,
32 | |     _existing_properties: &HashSet<String>,
33 | | ) -> JsonPathResult<bool> {
   | |_________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:120:9
    |
120 |         (FilterValue::Missing, _) => Ok(false),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
121 |         (_, FilterValue::Missing) => Ok(false),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
120 -         (FilterValue::Missing, _) => Ok(false),
121 -         (_, FilterValue::Missing) => Ok(false),
120 +         (FilterValue::Missing, _) | (_, FilterValue::Missing) => Ok(false),
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:128:9
    |
128 | /         (FilterValue::Null, _) => Ok(match op {
129 | |             ComparisonOp::Equal => false,
130 | |             ComparisonOp::NotEqual => true,
131 | |             _ => false,
132 | |         }),
    | |__________^
133 | /         (_, FilterValue::Null) => Ok(match op {
134 | |             ComparisonOp::Equal => false,
135 | |             ComparisonOp::NotEqual => true,
136 | |             _ => false,
137 | |         }),
    | |__________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
128 -         (FilterValue::Null, _) => Ok(match op {
129 -             ComparisonOp::Equal => false,
130 -             ComparisonOp::NotEqual => true,
131 -             _ => false,
132 -         }),
133 -         (_, FilterValue::Null) => Ok(match op {
128 +         (FilterValue::Null, _) | (_, FilterValue::Null) => Ok(match op {
    |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter/comparisons.rs:81:25
   |
81 |                         ComparisonOp::Equal => false, // missing is never equal to null
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |                         ComparisonOp::NotEqual => exists_in_context, // missing != null only if property exists somewhere
83 |                         _ => false,
   |                         ^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
81 -                         ComparisonOp::Equal => false, // missing is never equal to null
81 +                         // missing is never equal to null
   |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:109:25
    |
109 |                         ComparisonOp::Equal => false, // null is never equal to missing
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
110 |                         ComparisonOp::NotEqual => exists_in_context, // null != missing only if property exists somewhere
111 |                         _ => false,
    |                         ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
109 -                         ComparisonOp::Equal => false, // null is never equal to missing
109 +                         // null is never equal to missing
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:125:13
    |
125 |             ComparisonOp::NotEqual => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
126 |             _ => false,
    |             ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
125 -             ComparisonOp::NotEqual => false,
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:129:13
    |
129 |             ComparisonOp::Equal => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
130 |             ComparisonOp::NotEqual => true,
131 |             _ => false,
    |             ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
129 -             ComparisonOp::Equal => false,
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/comparisons.rs:134:13
    |
134 |             ComparisonOp::Equal => false,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
135 |             ComparisonOp::NotEqual => true,
136 |             _ => false,
    |             ^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
134 -             ComparisonOp::Equal => false,
    |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter/conversions.rs:30:9
   |
30 |         serde_json::Value::Array(_) => FilterValue::Boolean(true), // Arrays are truthy
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
31 |         serde_json::Value::Object(_) => FilterValue::Boolean(true), // Objects are truthy
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
30 ~         serde_json::Value::Array(_) | serde_json::Value::Object(_) => FilterValue::Boolean(true), // Arrays are truthy
31 ~         // Objects are truthy
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/core.rs:54:5
   |
54 | /     pub fn evaluate_predicate(
55 | |         context: &serde_json::Value,
56 | |         expr: &FilterExpression,
57 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/core.rs:65:5
   |
65 | /     pub fn evaluate_predicate_with_context(
66 | |         context: &serde_json::Value,
67 | |         expr: &FilterExpression,
68 | |         existing_properties: &HashSet<String>,
69 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/filter/core.rs:136:5
    |
136 | /     pub fn evaluate_expression(
137 | |         context: &serde_json::Value,
138 | |         expr: &FilterExpression,
139 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/filter/core.rs:146:5
    |
146 | /     pub fn evaluate_expression_with_context(
147 | |         context: &serde_json::Value,
148 | |         expr: &FilterExpression,
149 | |         existing_properties: &HashSet<String>,
150 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/filter/properties.rs:15:1
   |
15 | / pub(super) fn property_exists_and_truthy(
16 | |     context: &serde_json::Value,
17 | |     path: &[String],
18 | | ) -> JsonPathResult<bool> {
   | |_________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
18 - ) -> JsonPathResult<bool> {
18 + ) -> bool {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
50 ~                 return false;
51 |             }
...
57 |             );
58 ~             return false;
59 |         }
...
69 |     );
70 ~     result
   |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/filter/properties.rs:75:1
   |
75 | / pub(super) fn resolve_property_path_with_context(
76 | |     context: &serde_json::Value,
77 | |     path: &[String],
78 | |     existing_properties: &HashSet<String>,
79 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
79 - ) -> JsonPathResult<FilterValue> {
79 + ) -> jsonpath::ast::FilterValue {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
102~                 return FilterValue::Missing;
103|             }
104|         } else {
105~             return FilterValue::Missing;
106|         }
107|     }
108|
109~     super::conversions::json_value_to_filter_value(current)
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/property.rs:25:5
   |
25 | /     pub fn property_exists_and_truthy(
26 | |         context: &serde_json::Value,
27 | |         path: &[String],
28 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/property.rs:84:5
   |
84 | /     pub fn resolve_property_path_with_context(
85 | |         context: &serde_json::Value,
86 | |         path: &[String],
87 | |         existing_properties: &HashSet<String>,
88 | |     ) -> JsonPathResult<FilterValue> {
   | |____________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/filter/property.rs:140:13
    |
140 |             serde_json::Value::Array(_) => FilterValue::Boolean(true), // Arrays are truthy
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
141 |             serde_json::Value::Object(_) => FilterValue::Boolean(true), // Objects are truthy
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
140 ~             serde_json::Value::Array(_) | serde_json::Value::Object(_) => FilterValue::Boolean(true), // Arrays are truthy
141 ~             // Objects are truthy
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter/selectors.rs:17:5
   |
17 | /     pub fn evaluate_jsonpath_selectors(
18 | |         context: &serde_json::Value,
19 | |         selectors: &[JsonSelector],
20 | |     ) -> JsonPathResult<FilterValue> {
   | |____________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/filter/selectors.rs:48:29
   |
48 | ...                   *index as usize
   |                       ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter/utils.rs:21:13
   |
21 |             FilterValue::Null => false,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |             FilterValue::Missing => false,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
21 ~             FilterValue::Null | FilterValue::Missing => false,
22 ~             }
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/core.rs:15:5
   |
15 | /     pub fn evaluate_function_value(
16 | |         context: &serde_json::Value,
17 | |         name: &str,
18 | |         args: &[FilterExpression],
...  |
22 | |         ) -> JsonPathResult<FilterValue>,
23 | |     ) -> JsonPathResult<FilterValue> {
   | |____________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/functions/function_evaluator/core.rs:51:13
   |
51 |             serde_json::Value::Null => FilterValue::Null,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
63 |             _ => FilterValue::Null, // Arrays and objects cannot be converted to FilterValue
   |             ^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
51 -             serde_json::Value::Null => FilterValue::Null,
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/count.rs:11:1
   |
11 | / pub fn evaluate_count_function(
12 | |     context: &serde_json::Value,
13 | |     args: &[FilterExpression],
14 | |     expression_evaluator: &dyn Fn(
...  |
17 | |     ) -> JsonPathResult<FilterValue>,
18 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/count.rs:40:50
   |
40 |                 serde_json::Value::Array(arr) => arr.len() as i64,
   |                                                  ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/count.rs:41:51
   |
41 |                 serde_json::Value::Object(obj) => obj.len() as i64,
   |                                                   ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/integration_tests/mock_evaluator.rs:9:1
   |
 9 | / pub fn mock_evaluator(
10 | |     _context: &serde_json::Value,
11 | |     expr: &FilterExpression,
12 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:11:1
   |
11 | / pub fn evaluate_length_function(
12 | |     context: &serde_json::Value,
13 | |     args: &[FilterExpression],
14 | |     expression_evaluator: &dyn Fn(
...  |
17 | |     ) -> JsonPathResult<FilterValue>,
18 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:42:13
   |
42 |             serde_json::Value::Null => return Ok(FilterValue::Null),
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 |             _ => return Ok(FilterValue::Null), // Primitives return null per RFC
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
42 -             serde_json::Value::Null => return Ok(FilterValue::Null),
   |

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:39:46
   |
39 |             serde_json::Value::Array(arr) => arr.len() as i64,
   |                                              ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:40:47
   |
40 |             serde_json::Value::Object(obj) => obj.len() as i64,
   |                                               ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:41:45
   |
41 |             serde_json::Value::String(s) => s.chars().count() as i64, // Unicode-aware
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:53:13
   |
53 |             FilterValue::Null => Ok(FilterValue::Null),
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |             FilterValue::Missing => Ok(FilterValue::Null), /* Missing properties have no length */
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
53 ~             FilterValue::Null | FilterValue::Missing => Ok(FilterValue::Null),
54 ~             /* Missing properties have no length */
   |

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/function_evaluator/length.rs:49:63
   |
49 |             FilterValue::String(s) => Ok(FilterValue::Integer(s.chars().count() as i64)),
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/regex_functions/core.rs:14:1
   |
14 | / pub fn evaluate_match_function(
15 | |     context: &serde_json::Value,
16 | |     args: &[FilterExpression],
17 | |     expression_evaluator: &dyn Fn(
...  |
20 | |     ) -> JsonPathResult<FilterValue>,
21 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/regex_functions/core.rs:56:1
   |
56 | / pub fn evaluate_search_function(
57 | |     context: &serde_json::Value,
58 | |     args: &[FilterExpression],
59 | |     expression_evaluator: &dyn Fn(
...  |
62 | |     ) -> JsonPathResult<FilterValue>,
63 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/string_counting/mod.rs:10:1
   |
10 | pub fn evaluate_length_function(value: &Value) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/string_counting/mod.rs:20:1
   |
20 | pub fn evaluate_count_function(value: &Value) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value/core.rs:13:1
   |
13 | / pub fn evaluate_value_function(
14 | |     context: &serde_json::Value,
15 | |     args: &[FilterExpression],
16 | |     expression_evaluator: &dyn Fn(
...  |
19 | |     ) -> JsonPathResult<FilterValue>,
20 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/functions/function_evaluator/value/core.rs:72:1
   |
72 | / fn evaluate_property_expression(
73 | |     context: &serde_json::Value,
74 | |     path: &[String],
75 | | ) -> JsonPathResult<FilterValue> {
   | |________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
75 - ) -> JsonPathResult<FilterValue> {
75 + ) -> jsonpath::ast::FilterValue {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
83 ~             _ => return FilterValue::Null,
84 |         }
85 |     }
86 ~     FunctionEvaluator::json_value_to_filter_value(current)
   |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/functions/function_evaluator/value/core.rs:90:1
   |
90 | fn evaluate_current_expression(context: &serde_json::Value) -> JsonPathResult<FilterValue> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
90 - fn evaluate_current_expression(context: &serde_json::Value) -> JsonPathResult<FilterValue> {
90 + fn evaluate_current_expression(context: &serde_json::Value) -> jsonpath::ast::FilterValue {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
92 -     Ok(FunctionEvaluator::json_value_to_filter_value(context))
92 +     FunctionEvaluator::json_value_to_filter_value(context)
   |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/functions/function_evaluator/value/core.rs:96:1
   |
96 | fn evaluate_literal_expression(value: &FilterValue) -> JsonPathResult<FilterValue> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
96 - fn evaluate_literal_expression(value: &FilterValue) -> JsonPathResult<FilterValue> {
96 + fn evaluate_literal_expression(value: &FilterValue) -> jsonpath::ast::FilterValue {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
98 -     Ok(value.clone())
98 +     value.clone()
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value/property_access.rs:11:5
   |
11 | /     pub fn evaluate_property_path(
12 | |         context: &serde_json::Value,
13 | |         path: &[String],
14 | |     ) -> crate::jsonpath::error::JsonPathResult<FilterValue> {
   | |____________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value_conversion/mod.rs:10:1
   |
10 | pub fn to_string_value(value: &Value) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value_conversion/mod.rs:21:1
   |
21 | pub fn to_number_value(value: &Value) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/functions/function_evaluator/value_conversion/mod.rs:34:9
   |
34 |         Value::Bool(false) => Ok(Value::Number(serde_json::Number::from(0))),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 |         _ => Ok(Value::Number(serde_json::Number::from(0))),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
34 -         Value::Bool(false) => Ok(Value::Number(serde_json::Number::from(0))),
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value_conversion/mod.rs:40:1
   |
40 | pub fn to_boolean_value(value: &Value) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/function_evaluator/value_conversion/mod.rs:52:1
   |
52 | pub fn evaluate_value_function(function_name: &str, args: &[Value]) -> JsonPathResult<Value> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:13:5
   |
13 | /     pub fn evaluate_jsonpath_nodelist(
14 | |         context: &serde_json::Value,
15 | |         selectors: &[crate::jsonpath::parser::JsonSelector],
16 | |     ) -> JsonPathResult<Vec<serde_json::Value>> {
   | |_______________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:41:33
   |
41 | ...                   *index as usize
   |                       ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:62:39
   |
62 | ...                   let len = arr.len() as i64;
   |                                 ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:69:45
   |
69 |   ...                   let start_idx = start
   |  _______________________________________^
70 | | ...                       .map_or(0, |s| if s < 0 { len + s } else { s })
71 | | ...                       .max(0) as usize;
   | |__________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:72:43
   |
72 |   ...                   let end_idx = end
   |  _____________________________________^
73 | | ...                       .map_or(len, |e| if e < 0 { len + e } else { e })
74 | | ...                       .min(len) as usize;
   | |____________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:80:42
   |
80 | ...                   i += step_val as usize;
   |                            ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this call to `clone` can be replaced with `std::slice::from_ref`
  --> packages/client/src/jsonpath/functions/jsonpath_nodelist.rs:90:72
   |
90 | ...                   Self::evaluate_jsonpath_nodelist(node, &[union_selector.clone()])?;
   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::slice::from_ref(union_selector)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cloned_ref_to_slice_refs
   = note: `#[warn(clippy::cloned_ref_to_slice_refs)]` implied by `#[warn(clippy::all)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/regex_cache.rs:27:5
   |
27 |     pub fn get_or_compile(&self, pattern: &str) -> Result<regex::Regex, regex::Error> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/regex_cache.rs:52:1
   |
52 | / pub fn execute_regex_with_timeout<F>(regex_operation: F) -> Result<bool, String>
53 | | where
54 | |     F: FnOnce() -> bool + Send + 'static,
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this macro has been superseded by `std::sync::LazyLock`
  --> packages/client/src/jsonpath/functions/types.rs:43:1
   |
43 | / lazy_static::lazy_static! {
44 | |     pub(super) static ref REGEX_CACHE: RegexCache = RegexCache::new();
45 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_std_lazy_statics
   = note: `#[warn(clippy::non_std_lazy_statics)]` implied by `#[warn(clippy::pedantic)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/types.rs:53:5
   |
53 | /     pub fn evaluate_function_value(
54 | |         context: &serde_json::Value,
55 | |         name: &str,
56 | |         args: &[FilterExpression],
...  |
60 | |         ) -> JsonPathResult<FilterValue>,
61 | |     ) -> JsonPathResult<FilterValue> {
   | |____________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/functions/types.rs:78:5
   |
78 | /     pub fn evaluate_length_function(
79 | |         context: &serde_json::Value,
80 | |         args: &[FilterExpression],
81 | |         expression_evaluator: &dyn Fn(
...  |
84 | |         ) -> JsonPathResult<FilterValue>,
85 | |     ) -> JsonPathResult<FilterValue> {
   | |____________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/functions/types.rs:95:5
    |
 95 | /     pub fn evaluate_count_function(
 96 | |         context: &serde_json::Value,
 97 | |         args: &[FilterExpression],
 98 | |         expression_evaluator: &dyn Fn(
...   |
101 | |         ) -> JsonPathResult<FilterValue>,
102 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/functions/types.rs:112:5
    |
112 | /     pub fn evaluate_match_function(
113 | |         context: &serde_json::Value,
114 | |         args: &[FilterExpression],
115 | |         expression_evaluator: &dyn Fn(
...   |
118 | |         ) -> JsonPathResult<FilterValue>,
119 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/functions/types.rs:129:5
    |
129 | /     pub fn evaluate_search_function(
130 | |         context: &serde_json::Value,
131 | |         args: &[FilterExpression],
132 | |         expression_evaluator: &dyn Fn(
...   |
135 | |         ) -> JsonPathResult<FilterValue>,
136 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/functions/types.rs:146:5
    |
146 | /     pub fn evaluate_value_function(
147 | |         context: &serde_json::Value,
148 | |         args: &[FilterExpression],
149 | |         expression_evaluator: &dyn Fn(
...   |
152 | |         ) -> JsonPathResult<FilterValue>,
153 | |     ) -> JsonPathResult<FilterValue> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/functions/types.rs:165:13
    |
165 |             serde_json::Value::Null => FilterValue::Null,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
177 |             _ => FilterValue::Null, // Arrays and objects cannot be converted to FilterValue
    |             ^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
165 -             serde_json::Value::Null => FilterValue::Null,
    |

warning: this function has too many lines (117/100)
  --> packages/client/src/jsonpath/json_array_stream/streaming.rs:36:5
   |
36 | /     pub fn process_chunk(&mut self, chunk: Bytes) -> AsyncStream<T, 1024>
37 | |     where
38 | |         T: MessageChunk + MessageChunk + Default + Send + 'static,
   | |__________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/normalized_paths/generator.rs:71:34
   |
71 | ...                   Some((*index).wrapping_abs() as usize),
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/normalized_paths/operations.rs:12:5
   |
12 |     pub fn child_member(&self, member_name: &str) -> JsonPathResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/normalized_paths/operations.rs:28:5
   |
28 |     pub fn child_index(&self, index: i64) -> JsonPathResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/normalized_paths/parser.rs:15:5
   |
15 |     pub fn parse_normalized_path(path: &str) -> JsonPathResult<NormalizedPath> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: possible intra-doc link using quotes instead of backticks
  --> packages/client/src/jsonpath/normalized_paths/types.rs:28:32
   |
28 |     /// Object member access (['`member_name`'])
   |                                ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_link_with_quotes
   = note: `#[warn(clippy::doc_link_with_quotes)]` implied by `#[warn(clippy::pedantic)]`

warning: possible intra-doc link using quotes instead of backticks
  --> packages/client/src/jsonpath/normalized_paths/types.rs:28:46
   |
28 |     /// Object member access (['`member_name`'])
   |                                              ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_link_with_quotes

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/null_semantics/array_access.rs:32:27
   |
32 |                 let len = arr.len() as i64;
   |                           ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/null_semantics/array_access.rs:38:37
   |
38 |             if actual_index >= 0 && (actual_index as usize) < arr.len() {
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may lose the sign of the value
  --> packages/client/src/jsonpath/null_semantics/array_access.rs:39:34
   |
39 |                 let value = &arr[actual_index as usize];
   |                                  ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/null_semantics/comparison.rs:17:5
   |
17 | /     pub fn evaluate_existence_filter(
18 | |         context: &JsonValue,
19 | |         property_path: &[String],
20 | |     ) -> JsonPathResult<bool> {
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
20 -     ) -> JsonPathResult<bool> {
20 +     ) -> bool {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
21 -         Ok(evaluate_existence_filter(context, property_path))
21 +         evaluate_existence_filter(context, property_path)
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/null_semantics/comparison.rs:41:9
   |
41 |         PropertyAccessResult::NullValue => true, // null is present
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |         PropertyAccessResult::Value(_) => true,  // non-null values are present
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
41 ~         // null is present
42 ~         PropertyAccessResult::NullValue | PropertyAccessResult::Value(_) => true,  // non-null values are present
   |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/null_semantics/comparison.rs:62:1
   |
62 | / pub fn compare_with_null_semantics(
63 | |     left: &PropertyAccessResult,
64 | |     right: &PropertyAccessResult,
65 | | ) -> JsonPathResult<bool> {
   | |_________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
65 - ) -> JsonPathResult<bool> {
65 + ) -> bool {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
68 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::NullValue) => true,
69 |
70 |         // Both missing
71 ~         (PropertyAccessResult::Missing, PropertyAccessResult::Missing) => true,
72 |
73 |         // Null vs missing (different)
74 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::Missing) => false,
75 ~         (PropertyAccessResult::Missing, PropertyAccessResult::NullValue) => false,
76 |
77 |         // Value comparisons
78 ~         (PropertyAccessResult::Value(a), PropertyAccessResult::Value(b)) => a == b,
79 |
80 |         // Value vs null (different unless value is explicitly null)
81 ~         (PropertyAccessResult::Value(JsonValue::Null), PropertyAccessResult::NullValue) => true,
82 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::Value(JsonValue::Null)) => true,
83 ~         (PropertyAccessResult::Value(_), PropertyAccessResult::NullValue) => false,
84 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::Value(_)) => false,
85 |
86 |         // Value vs missing (different)
87 ~         (PropertyAccessResult::Value(_), PropertyAccessResult::Missing) => false,
88 ~         (PropertyAccessResult::Missing, PropertyAccessResult::Value(_)) => false,
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/null_semantics/comparison.rs:68:9
   |
68 |         (PropertyAccessResult::NullValue, PropertyAccessResult::NullValue) => Ok(true),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
71 |         (PropertyAccessResult::Missing, PropertyAccessResult::Missing) => Ok(true),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
81 |         (PropertyAccessResult::Value(JsonValue::Null), PropertyAccessResult::NullValue) => Ok(true),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |         (PropertyAccessResult::NullValue, PropertyAccessResult::Value(JsonValue::Null)) => Ok(true),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
68 ~         // Both missing
69 ~         // Null vs missing (different)
70 |         (PropertyAccessResult::NullValue, PropertyAccessResult::Missing) => Ok(false),
...
76 |         // Value vs null (different unless value is explicitly null)
77 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::NullValue) | (PropertyAccessResult::Missing, PropertyAccessResult::Missing) | (PropertyAccessResult::Value(JsonValue::Null), PropertyAccessResult::NullValue) | (PropertyAccessResult::NullValue, PropertyAccessResult::Value(JsonValue::Null)) => Ok(true),
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/null_semantics/comparison.rs:74:9
   |
74 |         (PropertyAccessResult::NullValue, PropertyAccessResult::Missing) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
75 |         (PropertyAccessResult::Missing, PropertyAccessResult::NullValue) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
83 |         (PropertyAccessResult::Value(_), PropertyAccessResult::NullValue) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
84 |         (PropertyAccessResult::NullValue, PropertyAccessResult::Value(_)) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
87 |         (PropertyAccessResult::Value(_), PropertyAccessResult::Missing) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
88 |         (PropertyAccessResult::Missing, PropertyAccessResult::Value(_)) => Ok(false),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
74 ~         (PropertyAccessResult::NullValue, PropertyAccessResult::Missing) | (PropertyAccessResult::Missing, PropertyAccessResult::NullValue) | (PropertyAccessResult::Value(_), PropertyAccessResult::NullValue) | (PropertyAccessResult::NullValue, PropertyAccessResult::Value(_)) | (PropertyAccessResult::Value(_), PropertyAccessResult::Missing) | (PropertyAccessResult::Missing, PropertyAccessResult::Value(_)) => Ok(false),
75 ~         // Value comparisons
76 |         (PropertyAccessResult::Value(a), PropertyAccessResult::Value(b)) => Ok(a == b),
...
80 |         (PropertyAccessResult::NullValue, PropertyAccessResult::Value(JsonValue::Null)) => Ok(true),
81 ~         // Value vs missing (different)
82 ~         }
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/null_semantics/property_access.rs:85:13
   |
85 |             PropertyAccessResult::NullValue => true, // null is present
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
86 |             PropertyAccessResult::Value(_) => true,  // non-null values are present
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
85 ~             // null is present
86 ~             PropertyAccessResult::NullValue | PropertyAccessResult::Value(_) => true,  // non-null values are present
   |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/null_semantics/property_access.rs:111:13
    |
111 |             PropertyAccessResult::NullValue => None, // Explicitly null
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
112 |             PropertyAccessResult::Missing => None,   // Missing
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
111 ~             PropertyAccessResult::NullValue | PropertyAccessResult::Missing => None, // Explicitly null
112 ~             // Missing
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/null_semantics/mod.rs:65:5
   |
65 | /     pub fn compare_with_null_semantics(
66 | |         left: &PropertyAccessResult,
67 | |         right: &PropertyAccessResult,
68 | |     ) -> crate::jsonpath::error::JsonPathResult<bool> {
   | |_____________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/null_semantics/mod.rs:102:5
    |
102 |     pub fn validate_implementation() -> crate::jsonpath::error::JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/safe_parsing/buffer.rs:28:5
   |
28 |     pub fn append(&mut self, data: &[u8]) -> JsonPathResult<()> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/safe_parsing/buffer.rs:43:5
   |
43 |     pub fn to_string(&self, strategy: Utf8RecoveryStrategy) -> JsonPathResult<String> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/safe_parsing/context.rs:89:5
   |
89 |     pub fn enter_nesting(&mut self) -> JsonPathResult<()> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:115:5
    |
115 |     pub fn allocate_memory(&mut self, size: usize) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:144:5
    |
144 |     pub fn check_timeout(&self) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:157:5
    |
157 |     pub fn validate_complexity(&self, complexity_score: u32) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:186:5
    |
186 |     pub fn validate_utf8_basic(&self, chunk: &[u8]) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:199:5
    |
199 |     pub fn validate_utf8_strict(&self, chunk: &[u8]) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/safe_parsing/context.rs:213:5
    |
213 |     pub fn validate_utf8_paranoid(&self, chunk: &[u8]) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: unused `self` argument
   --> packages/client/src/jsonpath/safe_parsing/context.rs:246:19
    |
246 |     fn utf8_error(&self, message: &str, position: usize, error_len: Option<usize>) -> crate::jsonpath::error::JsonPathError {
    |                   ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/safe_parsing/utf8.rs:19:5
   |
19 | /     pub fn validate_utf8_with_recovery(
20 | |         input: &[u8],
21 | |         strategy: Utf8RecoveryStrategy,
22 | |     ) -> JsonPathResult<String> {
   | |_______________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/safe_parsing/utf8.rs:77:5
   |
77 |     pub fn validate_jsonpath_string(input: &str, allow_escapes: bool) -> JsonPathResult<String> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function's return value is unnecessarily wrapped by `Result`
   --> packages/client/src/jsonpath/state_machine/engine.rs:151:5
    |
151 |     fn process_initial_byte(&mut self, byte: u8) -> Result<ProcessResult, JsonPathError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
151 -     fn process_initial_byte(&mut self, byte: u8) -> Result<ProcessResult, JsonPathError> {
151 +     fn process_initial_byte(&mut self, byte: u8) -> jsonpath::state_machine::types::ProcessResult {
    |
help: ...and then remove the surrounding `Ok()` from returning expressions
    |
153 ~             b' ' | b'\t' | b'\n' | b'\r' => ProcessResult::Continue, // Skip whitespace
154 |             b'{' => {
155 |                 super::transitions::transition_to_navigating(self);
156 |                 self.enter_object();
157 ~                 ProcessResult::Continue
158 |             }
...
161 |                 self.enter_array();
162 ~                 ProcessResult::Continue
163 |             }
...
169 |                 );
170 ~                 ProcessResult::Error(err)
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/state_machine/engine.rs:251:5
    |
251 | /     pub fn process_chunk_with_jsonpath_state(
252 | |         &mut self,
253 | |         chunk: &[u8],
254 | |         jsonpath_state: &mut StreamingJsonPathState,
255 | |     ) -> Result<Vec<MatchedValue>, JsonPathError> {
    | |_________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:277:17
    |
277 |                 Ok(ProcessResult::NeedMoreData) => break,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
278 |                 Ok(ProcessResult::Complete) => break,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
277 ~                 Ok(ProcessResult::NeedMoreData) | Ok(ProcessResult::Complete) => break,
278 ~                 Ok(ProcessResult::Error(err)) => {
    |

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/state_machine/engine.rs:334:126
    |
334 | ...   matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
    |                                                                                                                ^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
    = note: `#[warn(clippy::cast_possible_truncation)]` implied by `#[warn(clippy::pedantic)]`
help: ... or use `try_from` and handle the error accordingly
    |
334 -                     matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
334 +                     matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == usize::try_from(*index))
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/state_machine/engine.rs:334:126
    |
334 | ...   matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
    |                                                                                                                ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:362:42
    |
362 |     fn should_activate_recursive_descent(&self, jsonpath_state: &StreamingJsonPathState) -> bool {
    |                                          ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:372:28
    |
372 |     fn index_matches_slice(&self, index: usize, start: Option<i64>, end: Option<i64>, step: Option<i64>) -> bool {
    |                            ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/state_machine/engine.rs:373:20
    |
373 |         let step = step.unwrap_or(1).max(1) as usize; // Ensure positive step
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
373 -         let step = step.unwrap_or(1).max(1) as usize; // Ensure positive step
373 +         let step = usize::try_from(step.unwrap_or(1).max(1)); // Ensure positive step
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/state_machine/engine.rs:373:20
    |
373 |         let step = step.unwrap_or(1).max(1) as usize; // Ensure positive step
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/state_machine/engine.rs:374:21
    |
374 |         let index = index as i64;
    |                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/state_machine/engine.rs:390:13
    |
390 |             ((index - start_bound) as usize).is_multiple_of(step)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
390 -             ((index - start_bound) as usize).is_multiple_of(step)
390 +             usize::try_from(index - start_bound).is_multiple_of(step)
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/state_machine/engine.rs:390:13
    |
390 |             ((index - start_bound) as usize).is_multiple_of(step)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:397:33
    |
397 |     fn evaluate_single_selector(&self, selector: &crate::jsonpath::ast::JsonSelector, jsonpath_state: &StreamingJsonPathState) -> bool {
    |                                 ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/jsonpath/state_machine/engine.rs:406:126
    |
406 | ...   matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
    |                                                                                                                ^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
406 -                     matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
406 +                     matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == usize::try_from(*index))
    |

warning: casting `i64` to `usize` may lose the sign of the value
   --> packages/client/src/jsonpath/state_machine/engine.rs:406:126
    |
406 | ...   matches!(&frame.segment, crate::jsonpath::deserializer::core::types::PathSegment::ArrayIndex(i) if *i == *index as usize)
    |                                                                                                                ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:451:9
    |
451 |         &mut self,
    |         ^^^^^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:480:29
    |
480 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
481 | | ...                       // Successfully advanced to next selector
482 | | ...                   }
    | |_______________________^
483 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
484 | | ...                       // Expression is complete
485 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
480 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
481 -                                 // Successfully advanced to next selector
482 -                             }
483 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
480 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:497:25
    |
497 | /                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
498 | |                             // Successfully advanced to next selector
499 | |                         }
    | |_________________________^
500 | /                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
501 | |                             // Expression is complete
502 | |                         }
    | |_________________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
497 -                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
498 -                             // Successfully advanced to next selector
499 -                         }
500 -                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
497 +                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:532:29
    |
532 | / ...                   crate::jsonpath::ast::JsonSelector::Child { .. } => {
533 | | ...                       // Will be evaluated when property names are encountered
534 | | ...                   }
    | |_______________________^
535 |   ...                   _ => {},
    |                         ^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
532 -                             crate::jsonpath::ast::JsonSelector::Child { .. } => {
533 -                                 // Will be evaluated when property names are encountered
534 -                             }
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:546:29
    |
546 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
547 | | ...                       // Successfully advanced to next selector
548 | | ...                   }
    | |_______________________^
549 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
550 | | ...                       // Expression is complete
551 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
546 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
547 -                                 // Successfully advanced to next selector
548 -                             }
549 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
546 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:580:9
    |
580 |         &mut self,
    |         ^^^^^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function's return value is unnecessary
   --> packages/client/src/jsonpath/state_machine/engine.rs:579:5
    |
579 | /     fn handle_object_end_for_jsonpath(
580 | |         &mut self,
581 | |         jsonpath_state: &mut StreamingJsonPathState,
582 | |     ) -> Result<(), JsonPathError> {
    | |__________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove the return type...
    |
582 -     ) -> Result<(), JsonPathError> {
582 +     ) -> () {
    |
help: ...and then remove returned values
    |
585 -         Ok(())
    |

warning: this function has too many lines (128/100)
   --> packages/client/src/jsonpath/state_machine/engine.rs:589:5
    |
589 | /     fn handle_array_start_for_jsonpath(
590 | |         &mut self,
591 | |         jsonpath_state: &mut StreamingJsonPathState,
592 | |     ) -> Result<(), JsonPathError> {
    | |__________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: wildcard matches only a single variant and will also match any future added variants
   --> packages/client/src/jsonpath/state_machine/engine.rs:740:17
    |
740 |                 _ => {
    |                 ^ help: try: `crate::jsonpath::ast::JsonSelector::Child { .. }`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants
    = note: `#[warn(clippy::match_wildcard_for_single_variants)]` implied by `#[warn(clippy::pedantic)]`

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:624:25
    |
624 | /                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
625 | |                             // Successfully advanced to next selector
626 | |                         }
    | |_________________________^
627 | /                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
628 | |                             // Expression is complete
629 | |                         }
    | |_________________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
624 -                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
625 -                             // Successfully advanced to next selector
626 -                         }
627 -                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
624 +                         crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:643:29
    |
643 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
644 | | ...                       // Successfully advanced to next selector
645 | | ...                   }
    | |_______________________^
646 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
647 | | ...                       // Expression is complete
648 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
643 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
644 -                                 // Successfully advanced to next selector
645 -                             }
646 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
643 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:663:29
    |
663 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
664 | | ...                       // Successfully advanced to next selector
665 | | ...                   }
    | |_______________________^
666 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
667 | | ...                       // Expression is complete
668 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
663 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
664 -                                 // Successfully advanced to next selector
665 -                             }
666 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
663 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:713:29
    |
713 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
714 | | ...                       // Successfully advanced to next selector
715 | | ...                   }
    | |_______________________^
716 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
717 | | ...                       // Expression is complete
718 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
713 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
714 -                                 // Successfully advanced to next selector
715 -                             }
716 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
713 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/state_machine/engine.rs:731:29
    |
731 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
732 | | ...                       // Successfully advanced to next selector
733 | | ...                   }
    | |_______________________^
734 | / ...                   crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
735 | | ...                       // Expression is complete
736 | | ...                   }
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
731 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) => {
732 -                                 // Successfully advanced to next selector
733 -                             }
734 -                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
731 +                             crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::Advanced(_) | crate::jsonpath::deserializer::core::types::SelectorAdvanceResult::ExpressionComplete => {
    |

warning: unused `self` argument
   --> packages/client/src/jsonpath/state_machine/engine.rs:765:9
    |
765 |         &mut self,
    |         ^^^^^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function's return value is unnecessary
   --> packages/client/src/jsonpath/state_machine/engine.rs:764:5
    |
764 | /     fn handle_array_end_for_jsonpath(
765 | |         &mut self,
766 | |         jsonpath_state: &mut StreamingJsonPathState,
767 | |     ) -> Result<(), JsonPathError> {
    | |__________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove the return type...
    |
767 -     ) -> Result<(), JsonPathError> {
767 +     ) -> () {
    |
help: ...and then remove returned values
    |
770 -         Ok(())
    |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/state_machine/processors.rs:10:1
   |
10 | / pub fn process_navigating_byte(
11 | |     machine: &mut StreamStateMachine,
12 | |     byte: u8,
13 | | ) -> Result<ProcessResult, JsonPathError> {
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
13 - ) -> Result<ProcessResult, JsonPathError> {
13 + ) -> jsonpath::state_machine::types::ProcessResult {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
15 ~         b' ' | b'\t' | b'\n' | b'\r' => ProcessResult::Continue, // Skip whitespace
16 |         b'{' => {
17 |             machine.enter_object();
18 ~             ProcessResult::Continue
19 |         }
...
24 |             }
25 ~             ProcessResult::Continue
26 |         }
...
32 |             }
33 ~             ProcessResult::Continue
34 |         }
35 ~         _ => ProcessResult::Continue, // Continue navigating
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/state_machine/processors.rs:15:9
   |
15 |         b' ' | b'\t' | b'\n' | b'\r' => Ok(ProcessResult::Continue), // Skip whitespace
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
35 |         _ => Ok(ProcessResult::Continue), // Continue navigating
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
15 -         b' ' | b'\t' | b'\n' | b'\r' => Ok(ProcessResult::Continue), // Skip whitespace
15 +         // Skip whitespace
   |

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/state_machine/processors.rs:40:1
   |
40 | / pub fn process_streaming_byte(
41 | |     machine: &mut StreamStateMachine,
42 | |     byte: u8,
43 | |     absolute_offset: usize,
44 | | ) -> Result<ProcessResult, JsonPathError> {
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
44 - ) -> Result<ProcessResult, JsonPathError> {
44 + ) -> jsonpath::state_machine::types::ProcessResult {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
51 ~             ProcessResult::Continue
52 |         }
53 |         b'[' => {
54 |             machine.enter_array();
55 ~             ProcessResult::Continue
56 |         }
...
61 |             }
62 ~             ProcessResult::Continue
63 |         }
64 |         b',' => {
65 |             // Array element separator
66 ~             ProcessResult::Continue
67 |         }
68 ~         b' ' | b'\t' | b'\n' | b'\r' => ProcessResult::Continue, // Skip whitespace
69 ~         _ => ProcessResult::Continue,
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/state_machine/processors.rs:68:9
   |
68 |         b' ' | b'\t' | b'\n' | b'\r' => Ok(ProcessResult::Continue), // Skip whitespace
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
69 |         _ => Ok(ProcessResult::Continue),
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
   |
68 -         b' ' | b'\t' | b'\n' | b'\r' => Ok(ProcessResult::Continue), // Skip whitespace
68 +         // Skip whitespace
   |

warning: this function has too many lines (106/100)
  --> packages/client/src/jsonpath/state_machine/processors.rs:74:1
   |
74 | / pub fn process_object_byte(
75 | |     machine: &mut StreamStateMachine,
76 | |     byte: u8,
77 | |     absolute_offset: usize,
78 | | ) -> Result<ProcessResult, JsonPathError> {
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/state_machine/processors.rs:74:1
   |
74 | / pub fn process_object_byte(
75 | |     machine: &mut StreamStateMachine,
76 | |     byte: u8,
77 | |     absolute_offset: usize,
78 | | ) -> Result<ProcessResult, JsonPathError> {
   | |_________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
78 - ) -> Result<ProcessResult, JsonPathError> {
78 + ) -> jsonpath::state_machine::types::ProcessResult {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
93 ~             ProcessResult::Continue
94 |         }
...
116|                     machine.stats.object_start_offset = None; // Reset for next object
117~                     return ProcessResult::ObjectBoundary {
118+                         start: start_offset,
119+                         end: absolute_offset + 1,
120~                     };
121|                 }
122|             }
123~             ProcessResult::Continue
124|         }
...
134|             }
135~             ProcessResult::Continue
136|         }
...
141|             }
142~             ProcessResult::Continue
143|         }
...
148|             }
149~             ProcessResult::Continue
150|         }
151~         b' ' | b'\t' | b'\n' | b'\r' => ProcessResult::Continue, // Skip whitespace
152|         b'\\' => {
...
159|                     // Backslash outside string - invalid JSON
160~                     return ProcessResult::Error(stream_error(
161+                         "unexpected escape character outside string",
162+                         "object_processing",
163+                         false,
164~                     ));
165|                 }
166|             }
167~             ProcessResult::Continue
168|         }
...
177|                             *escaped = false;
178~                             ProcessResult::Continue
179|                         }
...
183|                             *escaped = false;
184~                             ProcessResult::Continue
185|                         }
...
188|                             *escaped = false;
189~                             ProcessResult::Error(stream_error(
190+                                 format!("invalid escape sequence '\\{}'", byte as char),
191+                                 "object_processing",
192+                                 false,
193+                             ))
194|                         }
...
198|                     *escaped = false;
199~                     ProcessResult::Continue
200|                 }
201|             } else {
202~                 ProcessResult::Continue
   |

warning: this function's return value is unnecessarily wrapped by `Result`
   --> packages/client/src/jsonpath/state_machine/processors.rs:209:1
    |
209 | / pub fn process_finishing_byte(
210 | |     _machine: &mut StreamStateMachine,
211 | |     byte: u8,
212 | | ) -> Result<ProcessResult, JsonPathError> {
    | |_________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
212 - ) -> Result<ProcessResult, JsonPathError> {
212 + ) -> jsonpath::state_machine::types::ProcessResult {
    |
help: ...and then remove the surrounding `Ok()` from returning expressions
    |
214 ~         b' ' | b'\t' | b'\n' | b'\r' => ProcessResult::Continue, // Skip whitespace
215 |         b'}' | b']' => {
216 |             // Handle closing brackets/braces
217 ~             ProcessResult::Continue
218 |         }
...
224 |             );
225 ~             ProcessResult::Error(err)
    |

warning: match expression looks like `matches!` macro
  --> packages/client/src/jsonpath/state_machine/transitions.rs:89:5
   |
89 | /     match (current, target_state) {
90 | |         (JsonStreamState::Initial, StateType::Navigating) => true,
91 | |         (JsonStreamState::Navigating { .. }, StateType::Streaming) => true,
92 | |         (JsonStreamState::Navigating { .. }, StateType::ProcessingObject) => true,
...  |
98 | |         _ => false,
99 | |     }
   | |_____^ help: try: `matches!((current, target_state), (JsonStreamState::Initial, StateType::Navigating) | (JsonStreamState::Navigating { .. }, StateType::Streaming) | (JsonStreamState::Navigating { .. }, StateType::ProcessingObject) | (JsonStreamState::StreamingArray { .. }, StateType::ProcessingObject) | (JsonStreamState::ProcessingObject { .. }, StateType::Streaming) | (_, StateType::Finishing) | (_, StateType::Complete) | (_, StateType::Error))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/stream_processor/error_recovery.rs:44:9
   |
44 |         crate::jsonpath::error::ErrorKind::InvalidPath => RecoveryStrategy::ContinuePartial,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |         crate::jsonpath::error::ErrorKind::ProcessingError => RecoveryStrategy::ResetArray,
46 |         crate::jsonpath::error::ErrorKind::IoError => RecoveryStrategy::ContinuePartial,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
44 ~         crate::jsonpath::error::ErrorKind::InvalidPath | crate::jsonpath::error::ErrorKind::IoError => RecoveryStrategy::ContinuePartial,
45 |         crate::jsonpath::error::ErrorKind::ProcessingError => RecoveryStrategy::ResetArray,
46 ~         _ => RecoveryStrategy::Abort,
   |

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/stream_processor/error_recovery.rs:53:15
   |
53 |     strategy: RecoveryStrategy,
   |               ^^^^^^^^^^^^^^^^
   |
help: or consider marking this type as `Copy`
  --> packages/client/src/jsonpath/stream_processor/error_recovery.rs:10:1
   |
10 | pub enum RecoveryStrategy {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
53 |     strategy: &RecoveryStrategy,
   |               +

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/stream_processor/error_recovery.rs:57:9
   |
57 | /         RecoveryStrategy::SkipObject => {
58 | |             // Skip to next object boundary
59 | |             true
60 | |         }
   | |_________^
...
66 | /         RecoveryStrategy::ContinuePartial => {
67 | |             // Continue with what we have
68 | |             true
69 | |         }
   | |_________^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
57 ~         RecoveryStrategy::ResetArray => {
58 |             // Reset array processing state
...
61 |         }
62 ~         RecoveryStrategy::SkipObject | RecoveryStrategy::ContinuePartial => {
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/stream_processor/types.rs:64:13
   |
64 |             0 => true, // Closed - allow all requests
   |             ^^^^^^^^^
...
81 |             2 => true,  // HalfOpen - allow limited requests
   |             ^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
64 ~             // Closed - allow all requests
65 |             1 => {
...
80 |             }
81 ~             0 | 2 => true,  // HalfOpen - allow limited requests
   |

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/jsonpath/stream_processor/types.rs:67:27
   |
67 |                   let now = std::time::SystemTime::now()
   |  ___________________________^
68 | |                     .duration_since(std::time::UNIX_EPOCH)
69 | |                     .unwrap_or_default()
70 | |                     .as_micros() as u64;
   | |_______________________________________^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
67 ~                 let now = u64::try_from(std::time::SystemTime::now()
68 +                     .duration_since(std::time::UNIX_EPOCH)
69 +                     .unwrap_or_default()
70 ~                     .as_micros());
   |

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/jsonpath/stream_processor/types.rs:91:19
   |
91 |           let now = std::time::SystemTime::now()
   |  ___________________^
92 | |             .duration_since(std::time::UNIX_EPOCH)
93 | |             .unwrap_or_default()
94 | |             .as_micros() as u64;
   | |_______________________________^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
91 ~         let now = u64::try_from(std::time::SystemTime::now()
92 +             .duration_since(std::time::UNIX_EPOCH)
93 +             .unwrap_or_default()
94 ~             .as_micros());
   |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/stream_processor/types.rs:119:13
    |
119 |             0 => CircuitState::Closed,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
...
122 |             _ => CircuitState::Closed, // Default to closed for unknown states
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
119 -             0 => CircuitState::Closed,
    |

warning: very complex type used. Consider factoring parts into `type` definitions
   --> packages/client/src/jsonpath/stream_processor/types.rs:177:32
    |
177 |       pub(super) chunk_handlers: Vec<
    |  ________________________________^
178 | |         Box<
179 | |             dyn FnMut(
180 | |                     Result<T, super::super::JsonPathError>,
...   |
183 | |         >,
184 | |     >,
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity
    = note: `#[warn(clippy::type_complexity)]` implied by `#[warn(clippy::all)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/type_system/conversions.rs:19:5
   |
19 | /     pub fn convert_type(
20 | |         value: TypedValue,
21 | |         target_type: FunctionType,
22 | |     ) -> JsonPathResult<TypedValue> {
   | |___________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/type_system/conversions.rs:95:5
   |
95 | /     pub fn validate_function_expression(
96 | |         function_name: &str,
97 | |         arguments: &[FilterExpression],
98 | |     ) -> JsonPathResult<super::core::FunctionSignature> {
   | |_______________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/type_system/conversions.rs:146:13
    |
146 |             (FunctionType::ValueType, FunctionType::LogicalType) => Ok(()),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
147 |             // NodesType can be converted to ValueType (runtime check needed)
148 |             (FunctionType::NodesType, FunctionType::ValueType) => Ok(()),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
146 ~             // NodesType can be converted to ValueType (runtime check needed)
147 ~             (FunctionType::ValueType, FunctionType::LogicalType) | (FunctionType::NodesType, FunctionType::ValueType) => Ok(()),
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/type_system/conversions.rs:166:13
    |
166 |             FilterExpression::Current => Ok(FunctionType::ValueType),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
167 |             FilterExpression::Property { .. } => Ok(FunctionType::ValueType),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
166 -             FilterExpression::Current => Ok(FunctionType::ValueType),
167 -             FilterExpression::Property { .. } => Ok(FunctionType::ValueType),
166 +             FilterExpression::Current | FilterExpression::Property { .. } => Ok(FunctionType::ValueType),
    |

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/type_system/conversions.rs:173:13
    |
173 |             FilterExpression::Comparison { .. } => Ok(FunctionType::LogicalType),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
174 |             FilterExpression::Logical { .. } => Ok(FunctionType::LogicalType),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
175 |             FilterExpression::Regex { .. } => Ok(FunctionType::LogicalType),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
173 ~             FilterExpression::Comparison { .. } | FilterExpression::Logical { .. } | FilterExpression::Regex { .. } => Ok(FunctionType::LogicalType),
174 ~             FilterExpression::Function { name, args } => {
    |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/type_system/utilities.rs:25:13
   |
25 |             FilterValue::Null => TypedValue::Value(serde_json::Value::Null),
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
26 |             FilterValue::Missing => TypedValue::Value(serde_json::Value::Null), /* Missing converts to null */
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
25 ~             FilterValue::Null | FilterValue::Missing => TypedValue::Value(serde_json::Value::Null),
26 ~             /* Missing converts to null */
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/type_system/utilities.rs:35:5
   |
35 |     pub fn typed_value_to_filter_value(value: &TypedValue) -> JsonPathResult<FilterValue> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/type_system/utilities.rs:79:5
   |
79 |     pub fn extract_nodes(value: &TypedValue) -> JsonPathResult<&[serde_json::Value]> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/type_system/utilities.rs:126:13
    |
126 |             serde_json::Value::Array(_) => true, // Always true, even if empty
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
127 |             serde_json::Value::Object(_) => true, // Always true, even if empty
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
126 ~             serde_json::Value::Array(_) | serde_json::Value::Object(_) => true, // Always true, even if empty
127 ~             // Always true, even if empty
    |

warning: possible intra-doc link using quotes instead of backticks
  --> packages/client/src/jsonpath/ast.rs:12:46
   |
12 |     /// Child property access (.property or ['property'])
   |                                              ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_link_with_quotes

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/ast.rs:238:13
    |
238 |             FilterExpression::Current => 1,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
239 |             FilterExpression::Property { path } => path.len() as u32,
240 |             FilterExpression::Literal { .. } => 1,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
238 ~             FilterExpression::Property { path } => path.len() as u32,
239 ~             FilterExpression::Current | FilterExpression::Literal { .. } => 1,
    |

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/ast.rs:239:52
    |
239 |             FilterExpression::Property { path } => path.len() as u32,
    |                                                    ^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
239 -             FilterExpression::Property { path } => path.len() as u32,
239 +             FilterExpression::Property { path } => u32::try_from(path.len()),
    |

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> packages/client/src/jsonpath/ast.rs:254:17
    |
254 |                 selectors.len() as u32 * 2 // Complex JSONPath expressions are more expensive
    |                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
254 -                 selectors.len() as u32 * 2 // Complex JSONPath expressions are more expensive
254 +                 u32::try_from(selectors.len()) * 2 // Complex JSONPath expressions are more expensive
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/compiler.rs:147:5
    |
147 |     pub fn validate(expression: &str) -> JsonPathResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `u64` to `u32` may truncate the value
  --> packages/client/src/jsonpath/expression/complexity.rs:34:37
   |
34 |                         let range = e.saturating_sub(*s).unsigned_abs() as u32;
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
34 -                         let range = e.saturating_sub(*s).unsigned_abs() as u32;
34 +                         let range = u32::try_from(e.saturating_sub(*s).unsigned_abs());
   |

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
  --> packages/client/src/jsonpath/expression/complexity.rs:44:41
   |
44 |                         .saturating_add(selectors.len() as u32);
   |                                         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
44 -                         .saturating_add(selectors.len() as u32);
44 +                         .saturating_add(u32::try_from(selectors.len()));
   |

warning: parameter is only used in recursion
   --> packages/client/src/jsonpath/expression/evaluation.rs:143:10
    |
143 |         &self,
    |          ^^^^
    |
note: parameter used here
   --> packages/client/src/jsonpath/expression/evaluation.rs:157:26
    |
157 |                 .any(|s| self.evaluate_single_selector_at_depth(s, depth)),
    |                          ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter_parser/core.rs:62:5
   |
62 |     pub fn expect_token(&mut self, expected: Token) -> JsonPathResult<()> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/filter_parser/core.rs:62:46
   |
62 |     pub fn expect_token(&mut self, expected: Token) -> JsonPathResult<()> {
   |                                              ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
62 |     pub fn expect_token(&mut self, expected: &Token) -> JsonPathResult<()> {
   |                                              +

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/filter_parser/core.rs:80:5
   |
80 |     pub fn parse_filter_expression(&mut self) -> JsonPathResult<FilterExpression> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `f64` to `i64` may truncate the value
  --> packages/client/src/jsonpath/filter_parser/expressions.rs:98:53
   |
98 |                         value: FilterValue::Integer(value as i64),
   |                                                     ^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/jsonpath/filter_parser/expressions.rs:200:9
    |
200 |         use crate::jsonpath::ast::JsonSelector;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter_parser/functions.rs:43:13
   |
43 |             "count" => 1,
   |             ^^^^^^^^^^^^
44 |             "length" => 1,
   |             ^^^^^^^^^^^^^
45 |             "value" => 1,
   |             ^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
43 -             "count" => 1,
44 -             "length" => 1,
43 +             "count" | "length" | "value" => 1,
   |

warning: these match arms have identical bodies
  --> packages/client/src/jsonpath/filter_parser/functions.rs:46:13
   |
46 |             "match" => 2,
   |             ^^^^^^^^^^^^
47 |             "search" => 2,
   |             ^^^^^^^^^^^^^
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
   |
46 ~             "match" | "search" => 2,
47 ~             _ => {
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/selector_parser/bracket.rs:15:1
   |
15 | pub fn parse_bracket_selector(parser: &mut SelectorParser) -> JsonPathResult<JsonSelector> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/selector_parser/core.rs:33:5
   |
33 |     pub fn parse_selector(&mut self) -> JsonPathResult<JsonSelector> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/jsonpath/selector_parser/core.rs:90:53
   |
90 |     pub(super) fn expect_token(&mut self, expected: Token) -> JsonPathResult<()> {
   |                                                     ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
90 |     pub(super) fn expect_token(&mut self, expected: &Token) -> JsonPathResult<()> {
   |                                                     +

warning: unused `self` argument
   --> packages/client/src/jsonpath/selector_parser/core.rs:109:21
    |
109 |     fn tokens_match(&self, actual: &Token, expected: &Token) -> bool {
    |                     ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/selector_parser/dot.rs:14:1
   |
14 | pub fn parse_dot_selector(parser: &mut SelectorParser) -> JsonPathResult<JsonSelector> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/selector_parser/slice.rs:14:1
   |
14 | / pub fn parse_index_or_slice(
15 | |     parser: &mut SelectorParser,
16 | |     start: i64,
17 | | ) -> JsonPathResult<JsonSelector> {
   | |_________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/selector_parser/slice.rs:85:1
   |
85 | / pub fn parse_slice_from_start(
86 | |     parser: &mut SelectorParser,
87 | |     start: i64,
88 | | ) -> JsonPathResult<JsonSelector> {
   | |_________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this `if` has identical blocks
   --> packages/client/src/jsonpath/selector_parser/slice.rs:96:72
    |
 96 |       } else if matches!(parser.peek_token(), Some(Token::RightBracket)) {
    |  ________________________________________________________________________^
 97 | |         None // Open-ended slice like [1:]
 98 | |     } else if matches!(parser.peek_token(), Some(Token::Colon)) {
    | |_____^
    |
note: same as this
   --> packages/client/src/jsonpath/selector_parser/slice.rs:98:65
    |
 98 |       } else if matches!(parser.peek_token(), Some(Token::Colon)) {
    |  _________________________________________________________________^
 99 | |         None // Empty end in patterns like [1::2]
100 | |     } else {
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else
    = note: `#[warn(clippy::if_same_then_else)]` implied by `#[warn(clippy::all)]`

warning: this `if` has identical blocks
   --> packages/client/src/jsonpath/selector_parser/slice.rs:98:65
    |
 98 |       } else if matches!(parser.peek_token(), Some(Token::Colon)) {
    |  _________________________________________________________________^
 99 | |         None // Empty end in patterns like [1::2]
100 | |     } else {
    | |_____^
    |
note: same as this
   --> packages/client/src/jsonpath/selector_parser/slice.rs:100:12
    |
100 |       } else {
    |  ____________^
101 | |         None
102 | |     };
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/jsonpath/selector_parser/slice.rs:116:1
    |
116 | pub fn parse_slice_from_colon(parser: &mut SelectorParser) -> JsonPathResult<JsonSelector> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this `if` has identical blocks
   --> packages/client/src/jsonpath/selector_parser/slice.rs:124:65
    |
124 |       } else if matches!(parser.peek_token(), Some(Token::Colon)) {
    |  _________________________________________________________________^
125 | |         None // Empty end in patterns like [::2]
126 | |     } else {
    | |_____^
    |
note: same as this
   --> packages/client/src/jsonpath/selector_parser/slice.rs:126:12
    |
126 |       } else {
    |  ____________^
127 | |         None
128 | |     };
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/jsonpath/tokenizer/characters.rs:87:1
   |
87 | / fn parse_identifier(
88 | |     parser: &mut ExpressionParser,
89 | |     chars: &[char],
90 | |     mut i: usize,
91 | | ) -> JsonPathResult<usize> {
   | |__________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
91 - ) -> JsonPathResult<usize> {
91 + ) -> usize {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
107-     Ok(i.saturating_sub(1)) // Adjust for loop increment
107+     i.saturating_sub(1) // Adjust for loop increment
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/jsonpath/tokenizer/core.rs:35:5
   |
35 |     pub fn parse(&mut self) -> JsonPathResult<Vec<JsonSelector>> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/jsonpath/tokens.rs:180:13
    |
180 |             (Token::RightBracket, Token::RightBracket) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
181 |             (Token::RightParen, Token::RightParen) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
182 |             (Token::LeftParen, Token::LeftParen) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
183 |             (Token::LeftBracket, Token::LeftBracket) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
184 |             (Token::Dot, Token::Dot) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
185 |             (Token::DoubleDot, Token::DoubleDot) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
186 |             (Token::Comma, Token::Comma) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
187 |             (Token::Colon, Token::Colon) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
188 |             (Token::Question, Token::Question) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
189 |             (Token::At, Token::At) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
190 |             (Token::Star, Token::Star) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
191 |             (Token::Equal, Token::Equal) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
192 |             (Token::NotEqual, Token::NotEqual) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
193 |             (Token::Less, Token::Less) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
194 |             (Token::LessEq, Token::LessEq) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
195 |             (Token::Greater, Token::Greater) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
196 |             (Token::GreaterEq, Token::GreaterEq) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
197 |             (Token::LogicalAnd, Token::LogicalAnd) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
198 |             (Token::LogicalOr, Token::LogicalOr) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
199 |             (Token::True, Token::True) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
200 |             (Token::False, Token::False) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
201 |             (Token::Null, Token::Null) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
202 |             (Token::Root, Token::Root) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
203 |             (Token::EOF, Token::EOF) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
204 |             // For tokens with data, we only check the discriminant
205 |             (Token::String(_), Token::String(_)) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
206 |             (Token::Integer(_), Token::Integer(_)) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
207 |             (Token::Number(_), Token::Number(_)) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
208 |             (Token::Identifier(_), Token::Identifier(_)) => true,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
180 ~             // For tokens with data, we only check the discriminant
181 ~             (Token::RightBracket, Token::RightBracket) | (Token::RightParen, Token::RightParen) | (Token::LeftParen, Token::LeftParen) | (Token::LeftBracket, Token::LeftBracket) | (Token::Dot, Token::Dot) | (Token::DoubleDot, Token::DoubleDot) | (Token::Comma, Token::Comma) | (Token::Colon, Token::Colon) | (Token::Question, Token::Question) | (Token::At, Token::At) | (Token::Star, Token::Star) | (Token::Equal, Token::Equal) | (Token::NotEqual, Token::NotEqual) | (Token::Less, Token::Less) | (Token::LessEq, Token::LessEq) | (Token::Greater, Token::Greater) | (Token::GreaterEq, Token::GreaterEq) | (Token::LogicalAnd, Token::LogicalAnd) | (Token::LogicalOr, Token::LogicalOr) | (Token::True, Token::True) | (Token::False, Token::False) | (Token::Null, Token::Null) | (Token::Root, Token::Root) | (Token::EOF, Token::EOF) | (Token::String(_), Token::String(_)) | (Token::Integer(_), Token::Integer(_)) | (Token::Number(_), Token::Number(_)) | (Token::Identifier(_), Token::Identifier(_)) => true,
    |

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/middleware/mod.rs:13:5
   |
13 |     fn process_request(&self, request: HttpRequest) -> crate::error::Result<HttpRequest> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/middleware/mod.rs:18:5
   |
18 |     fn process_response(&self, response: HttpResponse) -> crate::error::Result<HttpResponse> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/middleware/mod.rs:23:5
   |
23 |     fn handle_error(&self, error: HttpError) -> crate::error::Result<HttpError> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: method `add` can be confused for the standard trait method `std::ops::Add::add`
  --> packages/client/src/middleware/mod.rs:41:5
   |
41 | /     pub fn add<M: Middleware + 'static>(mut self, middleware: M) -> Self {
42 | |         self.middlewares.push(Arc::new(middleware));
43 | |         self
44 | |     }
   | |_____^
   |
   = help: consider implementing the trait `std::ops::Add` or choosing a less ambiguous method name
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait
   = note: `#[warn(clippy::should_implement_trait)]` implied by `#[warn(clippy::all)]`

warning: this function has too many lines (119/100)
   --> packages/client/src/middleware/cache.rs:136:5
    |
136 |     fn process_response(&self, response: HttpResponse) -> crate::error::Result<HttpResponse> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this could be rewritten as `let...else`
   --> packages/client/src/middleware/cache.rs:155:9
    |
155 | /         let context = if let Some(ctx) = context { ctx } else {
156 | |             tracing::warn!(
157 | |                 target: "quyc::middleware::cache",
158 | |                 "No request context available for response caching, skipping cache"
159 | |             );
160 | |             return Ok(response);
161 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
155 ~         let Some(context) = context else {
156 +             tracing::warn!(
157 +                 target: "quyc::middleware::cache",
158 +                 "No request context available for response caching, skipping cache"
159 +             );
160 +             return Ok(response);
161 +         };
    |

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/middleware/cache.rs:194:13
    |
194 |             const MAX_CACHEABLE_SIZE: usize = 10 * 1024 * 1024; // 10MB limit for cacheable responses
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
  --> packages/client/src/operations/delete.rs:81:9
   |
81 |         use ystream::AsyncStream;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/operations/get.rs:134:9
    |
134 |         use ystream::AsyncStream;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/operations/patch.rs:153:9
    |
153 |         use ystream::AsyncStream;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/operations/post.rs:150:9
    |
150 |         use ystream::AsyncStream;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/operations/put.rs:169:9
    |
169 |         use ystream::AsyncStream;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/protocols/core.rs:75:5
   |
75 |     fn validate(&self) -> Result<(), String>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/protocols/h2/adapter.rs:48:1
   |
48 | / fn create_h2_connection_stream(
49 | |     _request: HttpRequest,
50 | |     _config: H2Config,
51 | | ) -> Result<AsyncStream<HttpChunk, 1024>, HttpError> {
   | |____________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
51 - ) -> Result<AsyncStream<HttpChunk, 1024>, HttpError> {
51 + ) -> ystream::AsyncStream<http::response::HttpChunk> {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
58 ~     AsyncStream::with_channel(move |sender| {
59 +         // In production, this would:
60 +         // 1. Establish TCP connection
61 +         // 2. Do TLS handshake if needed
62 +         // 3. Perform h2::client::handshake()
63 +         // 4. Send request through h2
64 +         // 5. Stream response chunks
65 +         
66 +         // For now, emit test response
67 +         emit!(sender, HttpChunk::Headers(
68 +             http::StatusCode::OK,
69 +             http::HeaderMap::new()
70 +         ));
71 +         
72 +         emit!(sender, HttpChunk::Body(
73 +             bytes::Bytes::from("H2 adapter response")
74 +         ));
75 +         
76 +         emit!(sender, HttpChunk::End);
77 +     })
   |

warning: wildcard matches only a single variant and will also match any future added variants
  --> packages/client/src/protocols/h2/chunks.rs:36:13
   |
36 |             _ => None,
   |             ^ help: try: `H2ConnectionChunk::Ready`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants

warning: wildcard matches only a single variant and will also match any future added variants
  --> packages/client/src/protocols/h2/chunks.rs:78:13
   |
78 |             _ => None,
   |             ^ help: try: `H2RequestChunk::Sent { .. }`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants

warning: this function has too many lines (104/100)
   --> packages/client/src/protocols/h2/connection.rs:144:5
    |
144 | /     pub fn send_request_stream<T>(
145 | |         &self,
146 | |         io: T,
147 | |         request: Request<()>,
...   |
150 | |     where
151 | |         T: std::io::Read + std::io::Write + tokio::io::AsyncRead + tokio::io::AsyncWrite + Unpin + Send + 'static,
    | |__________________________________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: non-binding `let` on a future
  --> packages/client/src/protocols/h2/implementation.rs:86:25
   |
86 |                         let _ = connection;
   |                         ^^^^^^^^^^^^^^^^^^^
   |
   = help: consider awaiting the future or dropping explicitly with `std::mem::drop`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_future
   = note: `#[warn(clippy::let_underscore_future)]` implied by `#[warn(clippy::all)]`

warning: this loop never actually loops
   --> packages/client/src/protocols/h2/implementation.rs:90:21
    |
 90 | /                     loop {
 91 | |                         match rt.block_on(h2.ready()) {
 92 | |                             Ok(mut ready_h2) => {
...   |
155 | |                     }
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#never_loop
    = note: `#[warn(clippy::never_loop)]` implied by `#[warn(clippy::all)]`

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h2/streaming.rs:186:13
    |
186 |             use futures::task::noop_waker_ref;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h2/streaming.rs:187:13
    |
187 |             use std::task::Context;
    |             ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: item in documentation is missing backticks
  --> packages/client/src/protocols/h2/strategy.rs:19:18
   |
19 | /// for internal execute_with_runtime function.
   |                  ^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
19 - /// for internal execute_with_runtime function.
19 + /// for internal `execute_with_runtime` function.
   |

warning: large size difference between variants
  --> packages/client/src/protocols/h2/strategy.rs:32:1
   |
32 | / enum H2Stream {
33 | |     Tls(tokio_rustls::client::TlsStream<TcpStream>),
   | |     ----------------------------------------------- the largest variant contains at least 1104 bytes
34 | |     Plain(TcpStream),
   | |     ---------------- the second-largest variant contains at least 40 bytes
35 | | }
   | |_^ the entire enum is at least 1104 bytes
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant
   = note: `#[warn(clippy::large_enum_variant)]` implied by `#[warn(clippy::all)]`
help: consider boxing the large fields or introducing indirection in some other way to reduce the total size of the enum
   |
33 -     Tls(tokio_rustls::client::TlsStream<TcpStream>),
33 +     Tls(Box<tokio_rustls::client::TlsStream<TcpStream>>),
   |

warning: this function has too many lines (125/100)
   --> packages/client/src/protocols/h2/strategy.rs:198:5
    |
198 |     fn execute(&self, request: HttpRequest) -> HttpResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: these match arms have identical bodies
   --> packages/client/src/protocols/h2/strategy.rs:208:17
    |
208 |                 "http" => 80,
    |                 ^^^^^^^^^^^^
209 |                 _ => 80,
    |                 ^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
208 -                 "http" => 80,
    |

warning: these match arms have identical bodies
   --> packages/client/src/protocols/h3/adapter.rs:137:13
    |
137 | /             H3AdapterError::ConnectionFailed { .. } => {
138 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
139 | |             }
    | |_____________^
140 | /             H3AdapterError::SerializationFailed { .. } => {
141 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
142 | |             }
    | |_____________^
143 | /             H3AdapterError::InvalidRequest { .. } => {
144 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
145 | |             }
    | |_____________^
146 | /             H3AdapterError::ProtocolError { .. } => {
147 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
148 | |             }
    | |_____________^
...
152 | /             H3AdapterError::ResourceLimitExceeded { .. } => {
153 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
154 | |             }
    | |_____________^
155 | /             H3AdapterError::StreamError { .. } => {
156 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
157 | |             }
    | |_____________^
158 | /             H3AdapterError::SecurityError { .. } => {
159 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
160 | |             }
    | |_____________^
161 | /             H3AdapterError::DnsError { .. } => {
162 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
163 | |             }
    | |_____________^
164 | /             H3AdapterError::IoError { .. } => {
165 | |                 HttpError::new(crate::error::types::Kind::Request).with(err)
166 | |             }
    | |_____________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
137 ~             H3AdapterError::Timeout { .. } => {
138 |                 HttpError::new(crate::error::types::Kind::Timeout).with(err)
139 |             }
140 ~             H3AdapterError::ConnectionFailed { .. } | H3AdapterError::SerializationFailed { .. } | H3AdapterError::InvalidRequest { .. } | H3AdapterError::ProtocolError { .. } | H3AdapterError::ResourceLimitExceeded { .. } | H3AdapterError::StreamError { .. } | H3AdapterError::SecurityError { .. } | H3AdapterError::DnsError { .. } | H3AdapterError::IoError { .. } => {
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/h3/adapter.rs:175:1
    |
175 | / pub fn execute_h3_request(
176 | |     request: HttpRequest,
177 | |     config: H3Config,
178 | | ) -> Result<HttpResponse, HttpError> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function has too many lines (141/100)
   --> packages/client/src/protocols/h3/adapter.rs:175:1
    |
175 | / pub fn execute_h3_request(
176 | |     request: HttpRequest,
177 | |     config: H3Config,
178 | | ) -> Result<HttpResponse, HttpError> {
    | |____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/adapter.rs:176:14
    |
176 |     request: HttpRequest,
    |              ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
176 |     request: &HttpRequest,
    |              +

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/adapter.rs:177:13
    |
177 |     config: H3Config,
    |             ^^^^^^^^
    |
help: or consider marking this type as `Copy`
   --> packages/client/src/protocols/strategy.rs:208:1
    |
208 | pub struct H3Config {
    | ^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
177 |     config: &H3Config,
    |             +

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h3/adapter.rs:378:5
    |
378 |     use std::convert::TryFrom;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h3/adapter.rs:401:5
    |
401 |     use crate::protocols::strategy::CongestionControl;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/protocols/h3/adapter.rs:503:21
    |
503 |       let timestamp = SystemTime::now()
    |  _____________________^
504 | |         .duration_since(SystemTime::UNIX_EPOCH)
505 | |         .unwrap_or_default()
506 | |         .as_nanos() as u64;
    | |__________________________^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
503 ~     let timestamp = u64::try_from(SystemTime::now()
504 +         .duration_since(SystemTime::UNIX_EPOCH)
505 +         .unwrap_or_default()
506 ~         .as_nanos());
    |

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/adapter.rs:512:36
    |
512 | fn serialize_http_request(request: HttpRequest, config: &H3Config) -> Result<Vec<u8>, HttpError> {
    |                                    ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
512 | fn serialize_http_request(request: &HttpRequest, config: &H3Config) -> Result<Vec<u8>, HttpError> {
    |                                    +

warning: this function's return value is unnecessarily wrapped by `Result`
   --> packages/client/src/protocols/h3/adapter.rs:607:1
    |
607 | / fn convert_streaming_body_to_bytes_lock_free(
608 | |     stream: AsyncStream<HttpChunk, 1024>,
609 | |     config: &H3Config,
610 | | ) -> Result<Bytes, HttpError> {
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
610 - ) -> Result<Bytes, HttpError> {
610 + ) -> bytes::Bytes {
    |
help: ...and then remove the surrounding `Ok()` from returning expressions
    |
612 -     Ok(serialize_streaming_body_bridge(stream, config))
612 +     serialize_streaming_body_bridge(stream, config)
    |

warning: manual `Debug` impl does not include all fields
  --> packages/client/src/protocols/h3/connection.rs:64:1
   |
64 | / impl std::fmt::Debug for H3Connection {
65 | |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
66 | |         f.debug_struct("H3Connection")
67 | |             .field("config", &self.config)
...  |
71 | | }
   | |_^
   |
note: this field is unused
  --> packages/client/src/protocols/h3/connection.rs:60:5
   |
60 |     h3_conn: Arc<std::sync::Mutex<Option<quiche::h3::Connection>>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider including all fields in this `Debug` impl
   = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/h3/connection.rs:213:43
    |
213 |                     let mut recv_buffer = [0; 65535];
    |                                           ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays
    = note: `#[warn(clippy::large_stack_arrays)]` implied by `#[warn(clippy::pedantic)]`

warning: these match arms have identical bodies
   --> packages/client/src/protocols/h3/connection.rs:264:29
    |
264 | / ...                   Ok((_, quiche::h3::Event::Reset { .. })) => {
265 | | ...                       // Stream was reset
266 | | ...                   },
    | |_______________________^
267 |   ...                   
268 | / ...                   Ok((_, quiche::h3::Event::PriorityUpdate)) => {
269 | | ...                       // Priority update - continue polling
270 | | ...                   },
    | |_______________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
264 ~                             Ok((_, quiche::h3::Event::Reset { .. })) | Ok((_, quiche::h3::Event::PriorityUpdate)) => {
265 |                                 // Stream was reset
266 |                             },
267 |                             
268 ~                             Ok((_, quiche::h3::Event::GoAway)) => {
    |

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/h3/connection.rs:392:30
    |
392 |             let mut buffer = [0; 65535];
    |                              ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> packages/client/src/protocols/h3/connection.rs:740:13
    |
740 | /             match name_str.as_ref() {
741 | |                 ":status" => {
742 | |                     if let Ok(status_code) = value_str.parse::<u16>()
743 | |                         && let Ok(parsed_status) = http::StatusCode::from_u16(status_code) {
...   |
748 | |                 _ => {},
749 | |             }
    | |_____________^
    |
    = note: you might want to preserve the comments from inside the `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
    = note: `#[warn(clippy::single_match)]` implied by `#[warn(clippy::all)]`
help: try
    |
740 ~             if name_str.as_ref() == ":status" {
741 +                 if let Ok(status_code) = value_str.parse::<u16>()
742 +                     && let Ok(parsed_status) = http::StatusCode::from_u16(status_code) {
743 +                         status = parsed_status;
744 +                     }
745 +             }
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/h3/connection.rs:814:5
    |
814 | /     pub fn send_request_separated(
815 | |         &self,
816 | |         method: &http::Method,
817 | |         uri: &url::Url, 
...   |
820 | |         _stream_id: u64
821 | |     ) -> Result<(http::StatusCode, http::HeaderMap, AsyncStream<crate::http::HttpChunk, 1024>), String> {
    | |_______________________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: it is more concise to loop over references to containers instead of using explicit iteration methods
   --> packages/client/src/protocols/h3/connection.rs:856:38
    |
856 | ...                   for h in list.iter() {
    |                                ^^^^^^^^^^^ help: to write this more concisely, try: `&list`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop
    = note: `#[warn(clippy::explicit_iter_loop)]` implied by `#[warn(clippy::pedantic)]`

warning: this `if` statement can be collapsed
   --> packages/client/src/protocols/h3/connection.rs:861:37
    |
861 | / ...                   if let Ok(status_str) = std::str::from_utf8(value_bytes) {
862 | | ...                       if let Ok(status_u16) = status_str.parse::<u16>() {
863 | | ...                           if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
864 | | ...                               status_code = parsed_status;
...   |
867 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
861 ~                                     if let Ok(status_str) = std::str::from_utf8(value_bytes)
862 ~                                         && let Ok(status_u16) = status_str.parse::<u16>() {
863 |                                             if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
864 |                                                 status_code = parsed_status;
865 |                                             }
866 ~                                         }
    |

warning: this `if` statement can be collapsed
   --> packages/client/src/protocols/h3/connection.rs:862:41
    |
862 | / ...                   if let Ok(status_u16) = status_str.parse::<u16>() {
863 | | ...                       if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
864 | | ...                           status_code = parsed_status;
865 | | ...                       }
866 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
862 ~                                         if let Ok(status_u16) = status_str.parse::<u16>()
863 ~                                             && let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
864 |                                                 status_code = parsed_status;
865 ~                                             }
    |

warning: this `if` statement can be collapsed
   --> packages/client/src/protocols/h3/connection.rs:868:40
    |
868 |   ...                   } else if !name_bytes.starts_with(b":") {
    |  ______________________________^
869 | | ...                       if let (Ok(name), Ok(value)) = (
870 | | ...                           http::HeaderName::from_bytes(name_bytes),
871 | | ...                           http::HeaderValue::from_bytes(value_bytes)
...   |
875 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
868 ~                                 } else if !name_bytes.starts_with(b":")
869 ~                                     && let (Ok(name), Ok(value)) = (
870 |                                         http::HeaderName::from_bytes(name_bytes),
...
873 |                                         headers_map.insert(name, value);
874 ~                                     }
    |

warning: this `if` statement can be collapsed
   --> packages/client/src/protocols/h3/connection.rs:883:33
    |
883 | / ...                   if let (Ok(mut conn), Ok(mut h3_opt)) = (conn_clone.lock(), h3_conn_clone.lock()) {
884 | | ...                       if let Some(ref mut h3) = h3_opt.as_mut() {
885 | | ...                           loop {
886 | | ...                               match h3.poll(&mut conn) {
...   |
916 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
883 ~                                 if let (Ok(mut conn), Ok(mut h3_opt)) = (conn_clone.lock(), h3_conn_clone.lock())
884 ~                                     && let Some(ref mut h3) = h3_opt.as_mut() {
885 |                                         loop {
...
914 |                                         }
915 ~                                     }
    |

warning: this function has too many lines (140/100)
   --> packages/client/src/protocols/h3/connection.rs:937:5
    |
937 | /     pub fn send_request(
938 | |         &self, 
939 | |         request_data: &[u8], 
940 | |         _stream_id: u64
941 | |     ) -> AsyncStream<crate::http::HttpChunk, 1024> {
    | |__________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: it is more concise to loop over references to containers instead of using explicit iteration methods
    --> packages/client/src/protocols/h3/connection.rs:1019:54
     |
1019 | ...                   for h in list.iter() {
     |                                ^^^^^^^^^^^ help: to write this more concisely, try: `&list`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop

warning: this `if` statement can be collapsed
    --> packages/client/src/protocols/h3/connection.rs:1025:53
     |
1025 | / ...                   if let Ok(status_str) = std::str::from_utf8(value_bytes) {
1026 | | ...                       if let Ok(status_u16) = status_str.parse::<u16>() {
1027 | | ...                           if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
1028 | | ...                               status_code = parsed_status;
...    |
1031 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
1025 ~                                                     if let Ok(status_str) = std::str::from_utf8(value_bytes)
1026 ~                                                         && let Ok(status_u16) = status_str.parse::<u16>() {
1027 |                                                             if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
1028 |                                                                 status_code = parsed_status;
1029 |                                                             }
1030 ~                                                         }
     |

warning: this `if` statement can be collapsed
    --> packages/client/src/protocols/h3/connection.rs:1026:57
     |
1026 | / ...                   if let Ok(status_u16) = status_str.parse::<u16>() {
1027 | | ...                       if let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
1028 | | ...                           status_code = parsed_status;
1029 | | ...                       }
1030 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
1026 ~                                                         if let Ok(status_u16) = status_str.parse::<u16>()
1027 ~                                                             && let Ok(parsed_status) = http::StatusCode::from_u16(status_u16) {
1028 |                                                                 status_code = parsed_status;
1029 ~                                                             }
     |

warning: this `if` statement can be collapsed
    --> packages/client/src/protocols/h3/connection.rs:1034:53
     |
1034 | / ...                   if !name_bytes.starts_with(b":") {
1035 | | ...                       if let (Ok(name), Ok(value)) = (
1036 | | ...                           http::HeaderName::from_bytes(name_bytes),
1037 | | ...                           http::HeaderValue::from_bytes(value_bytes)
...    |
1041 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
1034 ~                                                     if !name_bytes.starts_with(b":")
1035 ~                                                         && let (Ok(name), Ok(value)) = (
1036 |                                                             http::HeaderName::from_bytes(name_bytes),
 ...
1039 |                                                             headers_map.insert(name, value);
1040 ~                                                         }
     |

warning: this function's return value is unnecessarily wrapped by `Result`
    --> packages/client/src/protocols/h3/connection.rs:1102:1
     |
1102 | fn extract_headers_from_data(data: &[u8]) -> Result<Vec<quiche::h3::Header>, String> {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
     |
1102 - fn extract_headers_from_data(data: &[u8]) -> Result<Vec<quiche::h3::Header>, String> {
1102 + fn extract_headers_from_data(data: &[u8]) -> std::vec::Vec<quiche::h3::Header> {
     |
help: ...and then remove the surrounding `Ok()` from returning expressions
     |
1116 -     Ok(default_headers)
1116 +     default_headers
     |

warning: item in documentation is missing backticks
  --> packages/client/src/protocols/h3/strategy/core.rs:20:18
   |
20 | /// for internal execute_with_runtime function.
   |                  ^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
   |
20 - /// for internal execute_with_runtime function.
20 + /// for internal `execute_with_runtime` function.
   |

warning: adding items after statements is confusing, since items exist from the start of the scope
  --> packages/client/src/protocols/h3/strategy/core.rs:81:9
   |
81 |         use std::convert::TryFrom;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h3/strategy/core.rs:110:9
    |
110 |         use crate::protocols::strategy::CongestionControl;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: use of a fallible conversion when an infallible one could be used
  --> packages/client/src/protocols/h3/strategy/core.rs:92:13
   |
92 |             usize::try_from(self.config.max_udp_payload_size).unwrap_or_else(|_| {
   |             ^^^^^^^^^^^^^^^ help: use: `From::from`
   |
   = note: converting `u16` to `usize` cannot fail
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions
   = note: `#[warn(clippy::unnecessary_fallible_conversions)]` implied by `#[warn(clippy::all)]`

warning: use of a fallible conversion when an infallible one could be used
  --> packages/client/src/protocols/h3/strategy/core.rs:98:13
   |
98 |             usize::try_from(self.config.max_udp_payload_size).unwrap_or_else(|_| {
   |             ^^^^^^^^^^^^^^^ help: use: `From::from`
   |
   = note: converting `u16` to `usize` cannot fail
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions

warning: item in documentation is missing backticks
   --> packages/client/src/protocols/h3/strategy/core.rs:154:22
    |
154 |     /// - Configured local_bind_address (if specified)
    |                      ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
154 -     /// - Configured local_bind_address (if specified)
154 +     /// - Configured `local_bind_address` (if specified)
    |

warning: item in documentation is missing backticks
   --> packages/client/src/protocols/h3/strategy/core.rs:158:19
    |
158 |     /// Returns a SocketAddr suitable for binding the UDP socket.
    |                   ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
158 -     /// Returns a SocketAddr suitable for binding the UDP socket.
158 +     /// Returns a `SocketAddr` suitable for binding the UDP socket.
    |

warning: this function's return value is unnecessarily wrapped by `Result`
   --> packages/client/src/protocols/h3/strategy/core.rs:159:5
    |
159 |     fn resolve_local_address(config: &crate::protocols::strategy::H3Config, remote_addr: &SocketAddr) -> Result<SocketAddr, String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
159 -     fn resolve_local_address(config: &crate::protocols::strategy::H3Config, remote_addr: &SocketAddr) -> Result<SocketAddr, String> {
159 +     fn resolve_local_address(config: &crate::protocols::strategy::H3Config, remote_addr: &SocketAddr) -> std::net::SocketAddr {
    |
help: ...and then remove the surrounding `Ok()` from returning expressions
    |
164 ~             return addr;
165 |         }
...
188 |         // Use port 0 for automatic port assignment
189 ~         SocketAddr::new(local_ip, 0)
    |

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> packages/client/src/protocols/h3/strategy/core.rs:319:58
    |
319 |             let local_addr = Self::resolve_local_address(&h3_config, &peer_addr)?;
    |                                                          ^^^^^^^^^^ help: change this to: `h3_config`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow
    = note: `#[warn(clippy::needless_borrow)]` implied by `#[warn(clippy::all)]`

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/protocols/h3/strategy/core.rs:368:21
    |
368 |       let timestamp = SystemTime::now()
    |  _____________________^
369 | |         .duration_since(SystemTime::UNIX_EPOCH)
370 | |         .unwrap_or_default()
371 | |         .as_nanos() as u64;
    | |__________________________^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
368 ~     let timestamp = u64::try_from(SystemTime::now()
369 +         .duration_since(SystemTime::UNIX_EPOCH)
370 +         .unwrap_or_default()
371 ~         .as_nanos());
    |

warning: these match arms have identical bodies
   --> packages/client/src/protocols/h3/strategy/core.rs:513:13
    |
513 | /             crate::http::HttpChunk::Data(data) => {
514 | |                 body_bytes.extend_from_slice(&data);
515 | |             },
    | |_____________^
516 | /             crate::http::HttpChunk::Body(data) => {
517 | |                 body_bytes.extend_from_slice(&data);
518 | |             },
    | |_____________^
519 | /             crate::http::HttpChunk::Chunk(data) => {
520 | |                 body_bytes.extend_from_slice(&data);
521 | |             },
    | |_____________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
513 -             crate::http::HttpChunk::Data(data) => {
514 -                 body_bytes.extend_from_slice(&data);
515 -             },
516 -             crate::http::HttpChunk::Body(data) => {
513 +             crate::http::HttpChunk::Data(data) | crate::http::HttpChunk::Body(data) | crate::http::HttpChunk::Chunk(data) => {
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/h3/strategy/core.rs:535:1
    |
535 | / pub fn serialize_multipart_form_data_public(
536 | |     fields: &[crate::http::request::MultipartField],
537 | |     headers: &mut http::HeaderMap,
538 | | ) -> Result<Vec<u8>, String> {
    | |____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/h3/strategy/core.rs:542:1
    |
542 | / pub fn serialize_http_request_for_h3_public(
543 | |     method: &http::Method,
544 | |     uri: &str,
545 | |     headers: &mut http::HeaderMap,
546 | |     body_data: Option<&crate::http::request::RequestBody>,
547 | | ) -> Result<Vec<u8>, String> {
    | |____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: unused `self` argument
  --> packages/client/src/protocols/h3/strategy/connection.rs:27:33
   |
27 |     fn send_error_and_return<T>(&self, body_tx: &AsyncStreamSender<HttpBodyChunk>, message: String) -> Result<T, ()> {
   |                                 ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
  --> packages/client/src/protocols/h3/strategy/connection.rs:90:9
   |
90 |         &self,
   |         ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/connection.rs:133:9
    |
133 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function has too many lines (109/100)
   --> packages/client/src/protocols/h3/strategy/connection.rs:237:5
    |
237 | /     fn perform_handshake(
238 | |         &self,
239 | |         quic_conn: &mut quiche::Connection,
240 | |         socket: &UdpSocket,
241 | |         body_tx: &AsyncStreamSender<HttpBodyChunk>,
242 | |     ) -> Result<(), ()> {
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/h3/strategy/connection.rs:269:23
    |
269 |         let mut buf = [0; 65535];
    |                       ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/protocols/h3/strategy/processing.rs:56:17
   |
56 |         method: Method,
   |                 ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
56 |         method: &Method,
   |                 +

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/protocols/h3/strategy/processing.rs:57:17
   |
57 |         scheme: String,
   |                 ^^^^^^ help: consider changing the type to: `&str`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/protocols/h3/strategy/processing.rs:58:15
   |
58 |         host: String,
   |               ^^^^^^ help: consider changing the type to: `&str`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/protocols/h3/strategy/processing.rs:59:15
   |
59 |         path: String,
   |               ^^^^^^ help: consider changing the type to: `&str`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/strategy/processing.rs:62:17
    |
 62 |         config: H3Config,
    |                 ^^^^^^^^
    |
help: or consider marking this type as `Copy`
   --> packages/client/src/protocols/strategy.rs:208:1
    |
208 | pub struct H3Config {
    | ^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
 62 |         config: &H3Config,
    |                 +

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h3/strategy/processing.rs:216:9
    |
216 |         const MAX_MULTIPART_SIZE: usize = 100 * 1024 * 1024; // 100MB hard limit
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:277:9
    |
277 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:323:9
    |
323 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:363:9
    |
363 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/h3/strategy/processing.rs:372:9
    |
372 |         const MAX_BODY_SIZE: usize = 100 * 1024 * 1024; // 100MB hard limit
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:416:9
    |
416 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/strategy/processing.rs:442:21
    |
442 |         headers_tx: AsyncStreamSender<HttpHeader, 256>,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
442 |         headers_tx: &AsyncStreamSender<HttpHeader, 256>,
    |                     +

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/h3/strategy/processing.rs:443:18
    |
443 |         body_tx: AsyncStreamSender<HttpBodyChunk, 1024>,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
443 |         body_tx: &AsyncStreamSender<HttpBodyChunk, 1024>,
    |                  +

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/h3/strategy/processing.rs:446:23
    |
446 |         let mut buf = [0; 65535];
    |                       ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:612:9
    |
612 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:678:28
    |
678 |     fn detect_content_type(&self, body_data: &crate::http::request::RequestBody) -> Option<&str> {
    |                            ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:689:37
    |
689 |     fn select_compression_algorithm(&self, config: &crate::config::HttpConfig) -> crate::http::headers::CompressionAlgorithm {
    |                                     ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
   --> packages/client/src/protocols/h3/strategy/processing.rs:702:30
    |
702 |     fn get_compression_level(&self, algorithm: crate::http::headers::CompressionAlgorithm, config: &crate::config::HttpConfig) -> Option<...
    |                              ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: these match arms have identical bodies
  --> packages/client/src/protocols/h3/strategy/security.rs:15:17
   |
15 |                 [127, _, _, _] => Ok(()),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^
16 |                 // Allow private networks for legitimate internal API calls
17 |                 [10, _, _, _] => Ok(()),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^
18 |                 [172, 16..=31, _, _] => Ok(()),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19 |                 [192, 168, _, _] => Ok(()),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
25 |                 _ => Ok(()),
   |                 ^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arms
   |
15 ~                 // Allow private networks for legitimate internal API calls
16 ~                 // Block reserved addresses
   |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/intelligence.rs:337:5
    |
337 |     pub fn update_alt_svc_endpoints(&self, alt_svc_header: &str) -> Result<(), String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/intelligence.rs:718:5
    |
718 |     pub fn update_alt_svc_for_domain(&self, domain: &str, alt_svc_header: &str) -> Result<(), String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/intelligence.rs:739:5
    |
739 | /     pub fn update_alt_svc_endpoint_validation_status(
740 | |         &self, 
741 | |         domain: &str, 
742 | |         protocol: &str, 
743 | |         port: u16, 
744 | |         status: AltSvcValidationStatus
745 | |     ) -> Result<(), String> {
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/protocols/intelligence.rs:809:5
    |
809 | /     SystemTime::now()
810 | |         .duration_since(UNIX_EPOCH)
811 | |         .unwrap_or_default()
812 | |         .as_nanos() as u64
    | |__________________________^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
809 ~     u64::try_from(SystemTime::now()
810 +         .duration_since(UNIX_EPOCH)
811 +         .unwrap_or_default()
812 +         .as_nanos())
    |

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/quiche/chunks.rs:299:48
    |
299 |     pub fn streams_available(readable_streams: Vec<u64>, writable_streams: Vec<u64>) -> Self {
    |                                                ^^^^^^^^ help: consider changing the type to: `&[u64]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/quiche/chunks.rs:299:76
    |
299 |     pub fn streams_available(readable_streams: Vec<u64>, writable_streams: Vec<u64>) -> Self {
    |                                                                            ^^^^^^^^ help: consider changing the type to: `&[u64]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value

warning: this function has too many lines (188/100)
   --> packages/client/src/protocols/quiche/h3_adapter.rs:109:5
    |
109 | /     pub fn send_request(
110 | |         &self,
111 | |         method: &Method,
112 | |         path: &str,
113 | |         headers: &HeaderMap,
114 | |         body: Option<&[u8]>,
115 | |     ) -> AsyncStream<Http3Chunk> {
    | |________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:127:17
    |
127 | /                 let _conn_guard = if let Ok(guard) = conn.lock() { guard } else {
128 | |                     emit!(
129 | |                         sender,
130 | |                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
131 | |                     );
132 | |                     return;
133 | |                 };
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
127 ~                 let Ok(_conn_guard) = conn.lock() else {
128 +                     emit!(
129 +                         sender,
130 +                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
131 +                     );
132 +                     return;
133 +                 };
    |

warning: calls to `push` immediately after creation
   --> packages/client/src/protocols/quiche/h3_adapter.rs:140:13
    |
140 | /             let mut http3_headers = Vec::new();
141 | |             http3_headers.push((b":method".to_vec(), method.as_str().as_bytes().to_vec()));
142 | |             http3_headers.push((b":path".to_vec(), path.as_bytes().to_vec()));
143 | |             http3_headers.push((b":scheme".to_vec(), b"https".to_vec()));
144 | |             http3_headers.push((b":authority".to_vec(), b"localhost".to_vec()));
    | |________________________________________________________________________________^ help: consider using the `vec![]` macro: `let mut http3_headers = vec![..];`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#vec_init_then_push
    = note: `#[warn(clippy::vec_init_then_push)]` implied by `#[warn(clippy::all)]`

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:156:17
    |
156 | /                 let mut conn_guard = if let Ok(guard) = conn.lock() { guard } else {
157 | |                     emit!(
158 | |                         sender,
159 | |                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
160 | |                     );
161 | |                     return;
162 | |                 };
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
156 ~                 let Ok(mut conn_guard) = conn.lock() else {
157 +                     emit!(
158 +                         sender,
159 +                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
160 +                     );
161 +                     return;
162 +                 };
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:176:17
    |
176 | /                 let mut conn_guard = if let Ok(guard) = conn.lock() { guard } else {
177 | |                     emit!(
178 | |                         sender,
179 | |                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
180 | |                     );
181 | |                     return;
182 | |                 };
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
176 ~                 let Ok(mut conn_guard) = conn.lock() else {
177 +                     emit!(
178 +                         sender,
179 +                         Http3Chunk::bad_chunk("Failed to lock connection".to_string())
180 +                     );
181 +                     return;
182 +                 };
    |

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/quiche/h3_adapter.rs:194:27
    |
194 |             let mut buf = [0; 65535];
    |                           ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays

warning: allocating a local array larger than 16384 bytes
   --> packages/client/src/protocols/quiche/h3_adapter.rs:195:36
    |
195 |             let mut response_buf = [0; 65535];
    |                                    ^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 65535].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:201:25
    |
201 | /                         let mut conn_guard = if let Ok(guard) = conn.lock() { guard } else {
202 | |                             emit!(
203 | |                                 sender,
204 | |                                 Http3Chunk::bad_chunk("Failed to lock connection".to_string())
205 | |                             );
206 | |                             return;
207 | |                         };
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
201 ~                         let Ok(mut conn_guard) = conn.lock() else {
202 +                             emit!(
203 +                                 sender,
204 +                                 Http3Chunk::bad_chunk("Failed to lock connection".to_string())
205 +                             );
206 +                             return;
207 +                         };
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:240:25
    |
240 | /                         let mut conn_guard = if let Ok(guard) = conn.lock() { guard } else {
241 | |                             emit!(
242 | |                                 sender,
243 | |                                 Http3Chunk::bad_chunk("Failed to lock connection".to_string())
244 | |                             );
245 | |                             return;
246 | |                         };
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
240 ~                         let Ok(mut conn_guard) = conn.lock() else {
241 +                             emit!(
242 +                                 sender,
243 +                                 Http3Chunk::bad_chunk("Failed to lock connection".to_string())
244 +                             );
245 +                             return;
246 +                         };
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:273:21
    |
273 | /                     let conn_guard = if let Ok(guard) = conn.lock() { guard } else {
274 | |                         emit!(
275 | |                             sender,
276 | |                             Http3Chunk::bad_chunk("Failed to lock connection".to_string())
277 | |                         );
278 | |                         return;
279 | |                     };
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
273 ~                     let Ok(conn_guard) = conn.lock() else {
274 +                         emit!(
275 +                             sender,
276 +                             Http3Chunk::bad_chunk("Failed to lock connection".to_string())
277 +                         );
278 +                         return;
279 +                     };
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:286:29
    |
286 | / ...                   let mut conn_guard = if let Ok(guard) = conn.lock() { guard } else {
287 | | ...                       emit!(
288 | | ...                           sender,
289 | | ...                           Http3Chunk::bad_chunk(
...   |
293 | | ...                       return;
294 | | ...                   };
    | |________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
286 ~                             let Ok(mut conn_guard) = conn.lock() else {
287 +                                 emit!(
288 +                                     sender,
289 +                                     Http3Chunk::bad_chunk(
290 +                                         "Failed to lock connection".to_string()
291 +                                     )
292 +                                 );
293 +                                 return;
294 +                             };
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/quiche/h3_adapter.rs:326:21
    |
326 | /                     let conn_guard = if let Ok(guard) = conn.lock() { guard } else {
327 | |                         emit!(
328 | |                             sender,
329 | |                             Http3Chunk::bad_chunk("Failed to lock connection".to_string())
330 | |                         );
331 | |                         return;
332 | |                     };
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
326 ~                     let Ok(conn_guard) = conn.lock() else {
327 +                         emit!(
328 +                             sender,
329 +                             Http3Chunk::bad_chunk("Failed to lock connection".to_string())
330 +                         );
331 +                         return;
332 +                     };
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:365:27
    |
365 |         headers_data.push(name.len() as u8);
    |                           ^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
365 -         headers_data.push(name.len() as u8);
365 +         headers_data.push(u8::try_from(name.len()));
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:376:27
    |
376 |         headers_data.push(value.len() as u8);
    |                           ^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
376 -         headers_data.push(value.len() as u8);
376 +         headers_data.push(u8::try_from(value.len()));
    |

warning: casting `usize` to `u8` may truncate the value
   --> packages/client/src/protocols/quiche/h3_adapter.rs:383:22
    |
383 |         encoded.push(headers_data.len() as u8);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
383 -         encoded.push(headers_data.len() as u8);
383 +         encoded.push(u8::try_from(headers_data.len()));
    |

warning: this argument is passed by value, but not consumed in the function body
   --> packages/client/src/protocols/quiche/streaming.rs:678:36
    |
678 |     pub fn write_bytes(self, data: Bytes, fin: bool) -> AsyncStream<QuicheWriteResult, 1024> {
    |                                    ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
    |
678 |     pub fn write_bytes(self, data: &Bytes, fin: bool) -> AsyncStream<QuicheWriteResult, 1024> {
    |                                    +

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/response_converter.rs:184:5
    |
184 | /     let header_str = match std::str::from_utf8(header_data) {
185 | |         Ok(s) => s,
186 | |         Err(_) => return (status, headers), // Return defaults on invalid UTF-8
187 | |     };
    | |______^ help: consider writing: `let Ok(header_str) = std::str::from_utf8(header_data) else { return (status, headers) };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/protocols/strategy.rs:468:5
    |
468 |     use std::convert::TryFrom;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: use of a fallible conversion when an infallible one could be used
   --> packages/client/src/protocols/strategy.rs:479:9
    |
479 |         usize::try_from(h3_config.max_udp_payload_size).unwrap_or_else(|_| {
    |         ^^^^^^^^^^^^^^^ help: use: `From::from`
    |
    = note: converting `u16` to `usize` cannot fail
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions

warning: use of a fallible conversion when an infallible one could be used
   --> packages/client/src/protocols/strategy.rs:485:9
    |
485 |         usize::try_from(h3_config.max_udp_payload_size).unwrap_or_else(|_| {
    |         ^^^^^^^^^^^^^^^ help: use: `From::from`
    |
    = note: converting `u16` to `usize` cannot fail
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions

warning: use of a fallible conversion when an infallible one could be used
   --> packages/client/src/protocols/strategy.rs:535:9
    |
535 |         usize::try_from(quiche_config.max_udp_payload_size).unwrap_or_else(|_| {
    |         ^^^^^^^^^^^^^^^ help: use: `From::from`
    |
    = note: converting `u16` to `usize` cannot fail
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions

warning: use of a fallible conversion when an infallible one could be used
   --> packages/client/src/protocols/strategy.rs:541:9
    |
541 |         usize::try_from(quiche_config.max_udp_payload_size).unwrap_or_else(|_| {
    |         ^^^^^^^^^^^^^^^ help: use: `From::from`
    |
    = note: converting `u16` to `usize` cannot fail
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions

warning: this argument is passed by value, but not consumed in the function body
  --> packages/client/src/protocols/auto_strategy.rs:34:51
   |
34 |     pub fn new(prefer: Vec<HttpVersion>, configs: ProtocolConfigs) -> Self {
   |                                                   ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
help: consider taking a reference instead
   |
34 |     pub fn new(prefer: Vec<HttpVersion>, configs: &ProtocolConfigs) -> Self {
   |                                                   +

warning: unused `self` argument
  --> packages/client/src/protocols/auto_strategy.rs:44:23
   |
44 |     fn extract_domain(&self, request: &HttpRequest) -> String {
   |                       ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
  --> packages/client/src/protocols/auto_strategy.rs:57:34
   |
57 |     fn verify_connection_success(&self, response: &HttpResponse) -> bool {
   |                                  ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: unused `self` argument
  --> packages/client/src/protocols/auto_strategy.rs:88:26
   |
88 |     fn should_skip_http3(&self, request: &HttpRequest) -> bool {
   |                          ^^^^^
   |
   = help: consider refactoring to an associated function
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: this function has too many lines (130/100)
   --> packages/client/src/protocols/auto_strategy.rs:304:5
    |
304 |     fn try_single_alt_svc_endpoint(&self, endpoint: &AltSvcEndpoint, original_request: &HttpRequest) -> Option<HttpResponse> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/auto_strategy.rs:339:9
    |
339 | /         let domain = if let Some(host) = original_request.url().host_str() { host } else {
340 | |             tracing::error!(
341 | |                 target: "quyc::protocols::auto",
342 | |                 "Failed to extract domain from Alt-Svc request URL: {}",
...   |
345 | |             return None; // Fail fast - don't corrupt intelligence tracking with invalid domain
346 | |         };
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
339 ~         let Some(domain) = original_request.url().host_str() else {
340 +             tracing::error!(
341 +                 target: "quyc::protocols::auto",
342 +                 "Failed to extract domain from Alt-Svc request URL: {}",
343 +                 original_request.url()
344 +             );
345 +             return None; // Fail fast - don't corrupt intelligence tracking with invalid domain
346 +         };
    |

warning: unused `self` argument
   --> packages/client/src/protocols/auto_strategy.rs:464:31
    |
464 |     fn create_alt_svc_request(&self, endpoint: &AltSvcEndpoint, original_request: &HttpRequest) -> Result<HttpRequest, String> {
    |                               ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: assigning the result of `Clone::clone()` may be inefficient
   --> packages/client/src/protocols/auto_strategy.rs:497:9
    |
497 |         request.auth = original_request.auth.clone();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `request.auth.clone_from(&original_request.auth)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones
    = note: `#[warn(clippy::assigning_clones)]` implied by `#[warn(clippy::pedantic)]`

warning: assigning the result of `Clone::clone()` may be inefficient
   --> packages/client/src/protocols/auto_strategy.rs:500:9
    |
500 |         request.cache_control = original_request.cache_control.clone();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `request.cache_control.clone_from(&original_request.cache_control)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: assigning the result of `Clone::clone()` may be inefficient
   --> packages/client/src/protocols/auto_strategy.rs:501:9
    |
501 |         request.etag = original_request.etag.clone();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `request.etag.clone_from(&original_request.etag)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: assigning the result of `Clone::clone()` may be inefficient
   --> packages/client/src/protocols/auto_strategy.rs:504:9
    |
504 |         request.user_agent = original_request.user_agent.clone();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `request.user_agent.clone_from(&original_request.user_agent)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: assigning the result of `Clone::clone()` may be inefficient
   --> packages/client/src/protocols/auto_strategy.rs:505:9
    |
505 |         request.referer = original_request.referer.clone();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `request.referer.clone_from(&original_request.referer)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones

warning: unused `self` argument
   --> packages/client/src/protocols/transport.rs:118:9
    |
118 |         &mut self,
    |         ^^^^^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/protocols/transport.rs:338:5
    |
338 |     pub fn default_quiche_config() -> Result<Config, String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: these match arms have identical bodies
   --> packages/client/src/protocols/transport.rs:396:17
    |
396 | /                 TransportType::H3 => match ("127.0.0.1:0".parse(), "127.0.0.1:0".parse()) {
397 | |                     (Ok(local_addr), Ok(remote_addr)) => Connection::new_h3_with_addr(local_addr, remote_addr),
398 | |                     _ => Connection::Error("Failed to parse localhost address".to_string()),
399 | |                 },
    | |_________________^
400 | /                 TransportType::Auto => match ("127.0.0.1:0".parse(), "127.0.0.1:0".parse()) {
401 | |                     (Ok(local_addr), Ok(remote_addr)) => Connection::new_h3_with_addr(local_addr, remote_addr),
402 | |                     _ => Connection::Error("Failed to parse localhost address".to_string()),
403 | |                 }, // Default to H3
    | |_________________^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
396 ~                 TransportType::H3 | TransportType::Auto => match ("127.0.0.1:0".parse(), "127.0.0.1:0".parse()) {
397 |                     (Ok(local_addr), Ok(remote_addr)) => Connection::new_h3_with_addr(local_addr, remote_addr),
398 |                     _ => Connection::Error("Failed to parse localhost address".to_string()),
399 |                 },
400 ~                 // Default to H3
    |

warning: this function has too many lines (138/100)
  --> packages/client/src/protocols/wire.rs:48:5
   |
48 |     pub fn parse_frames_streaming(data: Vec<u8>) -> AsyncStream<FrameChunk, 1024> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:309:17
    |
309 | /                 let (index, bytes_read) = match Self::decode_hpack_integer(payload, offset, 7) {
310 | |                     Ok(result) => result,
311 | |                     Err(_) => break,
312 | |                 };
    | |__________________^ help: consider writing: `let Ok((index, bytes_read)) = Self::decode_hpack_integer(payload, offset, 7) else { break };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:321:17
    |
321 | /                 let (name_index, bytes_read) = match Self::decode_hpack_integer(payload, offset, 6) {
322 | |                     Ok(result) => result,
323 | |                     Err(_) => break,
324 | |                 };
    | |__________________^ help: consider writing: `let Ok((name_index, bytes_read)) = Self::decode_hpack_integer(payload, offset, 6) else { break };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value
   --> packages/client/src/protocols/wire.rs:338:21
    |
338 | /                     static_table.get(&(name_index as usize))
339 | |                         .map(|(n, _)| n.clone())
340 | |                         .unwrap_or_else(|| "unknown".to_string())
    | |_________________________________________________________________^ help: try: `static_table.get(&(name_index as usize)).map_or_else(|| "unknown".to_string(), |(n, _)| n.clone())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or
    = note: `#[warn(clippy::map_unwrap_or)]` implied by `#[warn(clippy::pedantic)]`

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/protocols/wire.rs:338:39
    |
338 |                     static_table.get(&(name_index as usize))
    |                                       ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
338 -                     static_table.get(&(name_index as usize))
338 +                     static_table.get(&usize::try_from(name_index))
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:353:17
    |
353 | /                 let (_, bytes_read) = match Self::decode_hpack_integer(payload, offset, 5) {
354 | |                     Ok(result) => result,
355 | |                     Err(_) => break,
356 | |                 };
    | |__________________^ help: consider writing: `let Ok((_, bytes_read)) = Self::decode_hpack_integer(payload, offset, 5) else { break };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this `if` has identical blocks
   --> packages/client/src/protocols/wire.rs:361:63
    |
361 |                 let prefix_len = if first_byte & 0x10 == 0x10 { 4 } else { 4 };
    |                                                               ^^^^^
    |
note: same as this
   --> packages/client/src/protocols/wire.rs:361:74
    |
361 |                 let prefix_len = if first_byte & 0x10 == 0x10 { 4 } else { 4 };
    |                                                                          ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:362:17
    |
362 | /                 let (name_index, bytes_read) = match Self::decode_hpack_integer(payload, offset, prefix_len) {
363 | |                     Ok(result) => result,
364 | |                     Err(_) => break,
365 | |                 };
    | |__________________^ help: consider writing: `let Ok((name_index, bytes_read)) = Self::decode_hpack_integer(payload, offset, prefix_len) else { break };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value
   --> packages/client/src/protocols/wire.rs:379:21
    |
379 | /                     static_table.get(&(name_index as usize))
380 | |                         .map(|(n, _)| n.clone())
381 | |                         .unwrap_or_else(|| "unknown".to_string())
    | |_________________________________________________________________^ help: try: `static_table.get(&(name_index as usize)).map_or_else(|| "unknown".to_string(), |(n, _)| n.clone())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> packages/client/src/protocols/wire.rs:379:39
    |
379 |                     static_table.get(&(name_index as usize))
    |                                       ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
379 -                     static_table.get(&(name_index as usize))
379 +                     static_table.get(&usize::try_from(name_index))
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:405:50
    |
405 |         let mut value = u64::from(data[offset] & mask as u8);
    |                                                  ^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
405 -         let mut value = u64::from(data[offset] & mask as u8);
405 +         let mut value = u64::from(data[offset] & u8::try_from(mask));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:577:38
    |
577 |             buffer.push(first_byte | value as u8);
    |                                      ^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
577 -             buffer.push(first_byte | value as u8);
577 +             buffer.push(first_byte | u8::try_from(value));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:581:34
    |
581 |         buffer.push(first_byte | mask as u8);
    |                                  ^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
581 -         buffer.push(first_byte | mask as u8);
581 +         buffer.push(first_byte | u8::try_from(mask));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:585:32
    |
585 |             buffer.push(0x80 | (value as u8));
    |                                ^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
585 -             buffer.push(0x80 | (value as u8));
585 +             buffer.push(0x80 | u8::try_from(value));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:589:21
    |
589 |         buffer.push(value as u8);
    |                     ^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
589 -         buffer.push(value as u8);
589 +         buffer.push(u8::try_from(value));
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:658:17
    |
658 | /                 let (frame_len, len_len) = if let Ok(result) = Self::read_varint(&data[offset..]) { result } else {
659 | |                     emit!(
660 | |                         sender,
661 | |                         FrameChunk::H3(H3Frame::bad_chunk("Invalid frame length varint".to_string()))
662 | |                     );
663 | |                     break;
664 | |                 };
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
658 ~                 let Ok((frame_len, len_len)) = Self::read_varint(&data[offset..]) else {
659 +                     emit!(
660 +                         sender,
661 +                         FrameChunk::H3(H3Frame::bad_chunk("Invalid frame length varint".to_string()))
662 +                     );
663 +                     break;
664 +                 };
    |

warning: the variable `_bytes_read` is used as a loop counter
   --> packages/client/src/protocols/wire.rs:800:13
    |
800 |             for &byte in &data {
    |             ^^^^^^^^^^^^^^^^^^ help: consider using: `for (_bytes_read, &byte) in data.iter().enumerate()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop
    = note: `#[warn(clippy::explicit_counter_loop)]` implied by `#[warn(clippy::all)]`

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:857:25
    |
857 |             buffer.push((value as u8) | 0x80);
    |                         ^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
857 -             buffer.push((value as u8) | 0x80);
857 +             buffer.push(u8::try_from(value) | 0x80);
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:860:21
    |
860 |         buffer.push(value as u8);
    |                     ^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
860 -         buffer.push(value as u8);
860 +         buffer.push(u8::try_from(value));
    |

warning: unnecessary boolean `not` operation
   --> packages/client/src/protocols/wire.rs:912:13
    |
912 | /             if !value.is_empty() {
913 | |                 exact_match_map.insert((name.clone(), value.clone()), *index);
914 | |             } else {
915 | |                 name_index_map.insert(name.clone(), *index);
916 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
    = note: `#[warn(clippy::if_not_else)]` implied by `#[warn(clippy::pedantic)]`
help: try
    |
912 ~             if value.is_empty() {
913 +                 name_index_map.insert(name.clone(), *index);
914 +             } else {
915 +                 exact_match_map.insert((name.clone(), value.clone()), *index);
916 +             }
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:944:38
    |
944 |             buffer.push(first_byte | value as u8);
    |                                      ^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
944 -             buffer.push(first_byte | value as u8);
944 +             buffer.push(first_byte | u8::try_from(value));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:948:34
    |
948 |         buffer.push(first_byte | mask as u8);
    |                                  ^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
948 -         buffer.push(first_byte | mask as u8);
948 +         buffer.push(first_byte | u8::try_from(mask));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:952:32
    |
952 |             buffer.push(0x80 | (value as u8));
    |                                ^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
952 -             buffer.push(0x80 | (value as u8));
952 +             buffer.push(0x80 | u8::try_from(value));
    |

warning: casting `u64` to `u8` may truncate the value
   --> packages/client/src/protocols/wire.rs:956:21
    |
956 |         buffer.push(value as u8);
    |                     ^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
956 -         buffer.push(value as u8);
956 +         buffer.push(u8::try_from(value));
    |

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:978:9
    |
978 | /         let (_required_insert_count, ric_bytes) = match Self::decode_qpack_integer(payload, offset, 8) {
979 | |             Ok(result) => result,
980 | |             Err(_) => return headers,
981 | |         };
    | |__________^ help: consider writing: `let Ok((_required_insert_count, ric_bytes)) = Self::decode_qpack_integer(payload, offset, 8) else { return headers };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
   --> packages/client/src/protocols/wire.rs:985:9
    |
985 | /         let (_base, base_bytes) = match Self::decode_qpack_integer(payload, offset, 7) {
986 | |             Ok(result) => result,
987 | |             Err(_) => return headers,
988 | |         };
    | |__________^ help: consider writing: `let Ok((_base, base_bytes)) = Self::decode_qpack_integer(payload, offset, 7) else { return headers };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
    --> packages/client/src/protocols/wire.rs:1001:17
     |
1001 | /                 let (index, bytes_read) = match Self::decode_qpack_integer(payload, offset, 6) {
1002 | |                     Ok(result) => result,
1003 | |                     Err(_) => break,
1004 | |                 };
     | |__________________^ help: consider writing: `let Ok((index, bytes_read)) = Self::decode_qpack_integer(payload, offset, 6) else { break };`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/protocols/wire.rs:1009:68
     |
1009 |                     if let Some((name, value)) = static_table.get(&(index as usize)) {
     |                                                                    ^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1009 -                     if let Some((name, value)) = static_table.get(&(index as usize)) {
1009 +                     if let Some((name, value)) = static_table.get(&usize::try_from(index)) {
     |

warning: this could be rewritten as `let...else`
    --> packages/client/src/protocols/wire.rs:1019:17
     |
1019 | /                 let (name_index, bytes_read) = match Self::decode_qpack_integer(payload, offset, 4) {
1020 | |                     Ok(result) => result,
1021 | |                     Err(_) => break,
1022 | |                 };
     | |__________________^ help: consider writing: `let Ok((name_index, bytes_read)) = Self::decode_qpack_integer(payload, offset, 4) else { break };`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value
    --> packages/client/src/protocols/wire.rs:1027:21
     |
1027 | /                     static_table.get(&(name_index as usize))
1028 | |                         .map(|(n, _)| n.clone())
1029 | |                         .unwrap_or_else(|| "unknown".to_string())
     | |_________________________________________________________________^ help: try: `static_table.get(&(name_index as usize)).map_or_else(|| "unknown".to_string(), |(n, _)| n.clone())`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/protocols/wire.rs:1027:39
     |
1027 |                     static_table.get(&(name_index as usize))
     |                                       ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1027 -                     static_table.get(&(name_index as usize))
1027 +                     static_table.get(&usize::try_from(name_index))
     |

warning: casting `u64` to `u8` may truncate the value
    --> packages/client/src/protocols/wire.rs:1085:50
     |
1085 |         let mut value = u64::from(data[offset] & mask as u8);
     |                                                  ^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1085 -         let mut value = u64::from(data[offset] & mask as u8);
1085 +         let mut value = u64::from(data[offset] & u8::try_from(mask));
     |

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/protocols/wire.rs:1126:27
     |
1126 |         if length_bytes + length as usize > data.len() {
     |                           ^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1126 -         if length_bytes + length as usize > data.len() {
1126 +         if length_bytes + usize::try_from(length) > data.len() {
     |

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/protocols/wire.rs:1130:62
     |
1130 |         let string_data = &data[length_bytes..length_bytes + length as usize];
     |                                                              ^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1130 -         let string_data = &data[length_bytes..length_bytes + length as usize];
1130 +         let string_data = &data[length_bytes..length_bytes + usize::try_from(length)];
     |

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> packages/client/src/protocols/wire.rs:1140:37
     |
1140 |         Ok((decoded, length_bytes + length as usize))
     |                                     ^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1140 -         Ok((decoded, length_bytes + length as usize))
1140 +         Ok((decoded, length_bytes + usize::try_from(length)))
     |

warning: item in documentation is missing backticks
    --> packages/client/src/protocols/wire.rs:1211:61
     |
1211 |     /// Read specified number of bits from data starting at bit_pos
     |                                                             ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
     |
1211 -     /// Read specified number of bits from data starting at bit_pos
1211 +     /// Read specified number of bits from data starting at `bit_pos`
     |

warning: casts from `u8` to `u32` can be expressed infallibly using `From`
    --> packages/client/src/protocols/wire.rs:1228:38
     |
1228 |             result = (result << 1) | (bit as u32);
     |                                      ^^^^^^^^^^^^
     |
     = help: an `as` cast can become silently lossy if the types change in the future
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
     = note: `#[warn(clippy::cast_lossless)]` implied by `#[warn(clippy::pedantic)]`
help: use `u32::from` instead
     |
1228 -             result = (result << 1) | (bit as u32);
1228 +             result = (result << 1) | u32::from(bit);
     |

warning: this method could have a `#[must_use]` attribute
    --> packages/client/src/protocols/wire.rs:1461:12
     |
1461 |     pub fn parse_hpack_headers(payload: &[u8]) -> HashMap<String, String> {
     |            ^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
     = note: `#[warn(clippy::must_use_candidate)]` implied by `#[warn(clippy::pedantic)]`
help: add the attribute
     |
1461 ~     #[must_use] 
1462 ~     pub fn parse_hpack_headers(payload: &[u8]) -> HashMap<String, String> {
     |

warning: this method could have a `#[must_use]` attribute
    --> packages/client/src/protocols/wire.rs:1466:12
     |
1466 |     pub fn parse_qpack_headers(payload: &[u8]) -> HashMap<String, String> {
     |            ^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
     |
1466 ~     #[must_use] 
1467 ~     pub fn parse_qpack_headers(payload: &[u8]) -> HashMap<String, String> {
     |

warning: this method could have a `#[must_use]` attribute
    --> packages/client/src/protocols/wire.rs:1472:12
     |
1472 |     pub fn serialize_hpack_headers(headers: &HashMap<String, String>) -> Vec<u8> {
     |            ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
     |
1472 ~     #[must_use] 
1473 ~     pub fn serialize_hpack_headers(headers: &HashMap<String, String>) -> Vec<u8> {
     |

warning: this method could have a `#[must_use]` attribute
    --> packages/client/src/protocols/wire.rs:1479:12
     |
1479 |     pub fn serialize_qpack_headers(headers: &HashMap<String, String>) -> Vec<u8> {
     |            ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
     |
1479 ~     #[must_use] 
1480 ~     pub fn serialize_qpack_headers(headers: &HashMap<String, String>) -> Vec<u8> {
     |

warning: docs for function returning `Result` missing `# Errors` section
    --> packages/client/src/protocols/wire.rs:1484:5
     |
1484 |     pub fn decode_integer(payload: &[u8], offset: usize, prefix_bits: u8) -> Result<(u64, usize), String> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
    --> packages/client/src/protocols/wire.rs:1489:5
     |
1489 |     pub fn decode_qpack_integer(payload: &[u8], offset: usize, prefix_bits: u8) -> Result<(u64, usize), String> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
    --> packages/client/src/protocols/wire.rs:1494:5
     |
1494 |     pub fn decode_string(payload: &[u8], offset: usize) -> Result<(String, usize), String> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: unnecessary map of the identity function
    --> packages/client/src/protocols/wire.rs:1495:63
     |
1495 |           H2FrameParser::decode_hpack_string(&payload[offset..])
     |  _______________________________________________________________^
1496 | |             .map(|(s, len)| (s, len))
     | |_____________________________________^ help: remove the call to `map`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_identity
     = note: `#[warn(clippy::map_identity)]` implied by `#[warn(clippy::all)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/core/constructors.rs:26:5
   |
26 | /     pub fn all<U: IntoUrlSealed>(
27 | |         proxy_url: U,
28 | |     ) -> std::result::Result<Proxy, crate::error::HttpError> {
   | |____________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/core/constructors.rs:43:5
   |
43 | /     pub fn http<U: IntoUrlSealed>(
44 | |         proxy_url: U,
45 | |     ) -> std::result::Result<Proxy, crate::error::HttpError> {
   | |____________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/core/constructors.rs:60:5
   |
60 | /     pub fn https<U: IntoUrlSealed>(
61 | |         proxy_url: U,
62 | |     ) -> std::result::Result<Proxy, crate::error::HttpError> {
   | |____________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: manual `Debug` impl does not include all fields
  --> packages/client/src/proxy/core/debug_impls.rs:10:1
   |
10 | / impl fmt::Debug for Proxy {
11 | |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
12 | |         f.debug_struct("Proxy")
13 | |             .field("intercept", &self.intercept)
...  |
16 | | }
   | |_^
   |
note: this field is unused
  --> packages/client/src/proxy/core/types.rs:47:5
   |
47 |     pub(crate) extra: Extra,
   |     ^^^^^^^^^^^^^^^^^^^^^^^
note: this field is unused
  --> packages/client/src/proxy/core/types.rs:49:5
   |
49 |     pub(crate) no_proxy: Option<NoProxy>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider including all fields in this `Debug` impl
   = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/proxy/core/matcher_integration.rs:95:5
   |
95 | /     fn apply_no_proxy_patterns_static(
96 | |         mut inner: Matcher_,
97 | |         no_proxy_str: &str,
98 | |     ) -> Result<Matcher_, crate::Error> {
   | |_______________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
98 -     ) -> Result<Matcher_, crate::Error> {
98 +     ) -> proxy::matcher::types::Matcher_ {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
131-         Ok(inner)
131+         inner
   |

warning: field name ends with the struct's name
  --> packages/client/src/proxy/core/types.rs:49:5
   |
49 |     pub(crate) no_proxy: Option<NoProxy>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_field_names
   = note: `#[warn(clippy::struct_field_names)]` implied by `#[warn(clippy::pedantic)]`

warning: manual `Debug` impl does not include all fields
  --> packages/client/src/proxy/matcher/public_interface.rs:54:1
   |
54 | / impl fmt::Debug for Matcher {
55 | |     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
56 | |         f.debug_struct("Matcher")
57 | |             .field("maybe_has_http_auth", &self.maybe_has_http_auth)
...  |
64 | | }
   | |_^
   |
note: this field is unused
  --> packages/client/src/proxy/matcher/types.rs:15:5
   |
15 |     pub(crate) inner: Matcher_,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
note: this field is unused
  --> packages/client/src/proxy/matcher/types.rs:16:5
   |
16 |     pub(crate) extra: Extra,
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider including all fields in this `Debug` impl
   = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/matcher/system_integration.rs:67:5
   |
67 |     pub fn normalize_proxy_url(url_str: &str) -> Result<Url, String> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: very complex type used. Consider factoring parts into `type` definitions
   --> packages/client/src/proxy/url_handling.rs:110:22
    |
110 |       pub(crate) func: Arc<
    |  ______________________^
111 | |         dyn Fn(&Url) -> Option<std::result::Result<Url, Box<dyn std::error::Error + Send + Sync>>>
112 | |             + Send
113 | |             + Sync
114 | |             + 'static,
115 | |     >,
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/mod.rs:20:1
   |
20 | / pub fn http<U>(proxy_url: U) -> std::result::Result<Proxy, Box<dyn std::error::Error + Send + Sync>>
21 | | where
22 | |     U: Into<crate::Url>,
   | |________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/mod.rs:28:1
   |
28 | / pub fn https<U>(
29 | |     proxy_url: U,
30 | | ) -> std::result::Result<Proxy, Box<dyn std::error::Error + Send + Sync>>
31 | | where
32 | |     U: Into<crate::Url>,
   | |________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/proxy/mod.rs:38:1
   |
38 | / pub fn all<U>(proxy_url: U) -> std::result::Result<Proxy, Box<dyn std::error::Error + Send + Sync>>
39 | | where
40 | |     U: Into<crate::Url>,
   | |________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: all fields have the same prefix: `total`
  --> packages/client/src/retry/global.rs:9:1
   |
 9 | / pub struct GlobalRetryStats {
10 | |     total_operations: AtomicU64,
11 | |     total_retries: AtomicU64,
12 | |     total_failures: AtomicU64,
13 | |     total_successes: AtomicU64,
14 | | }
   | |_^
   |
   = help: remove the prefixes
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_field_names

warning: casting `u32` to `i32` may wrap around the value
   --> packages/client/src/retry/policy.rs:124:91
    |
124 |             let base_calc = (self.initial_delay_ms as f64) * self.backoff_multiplier.powi((attempt - 1) as i32);
    |                                                                                           ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `f64` to `u64` may truncate the value
   --> packages/client/src/retry/policy.rs:136:31
    |
136 |         Duration::from_millis(final_delay as u64)
    |                               ^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `f64` to `u64` may lose the sign of the value
   --> packages/client/src/retry/policy.rs:136:31
    |
136 |         Duration::from_millis(final_delay as u64)
    |                               ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: these match arms have identical bodies
   --> packages/client/src/retry/policy.rs:148:13
    |
148 |             crate::error::types::Kind::Request => true,      // Request errors may be transient
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
153 |             crate::error::types::Kind::Connect => true, // Connection failures are retryable
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
154 |             crate::error::types::Kind::Timeout => true, // Timeout errors are retryable
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
155 |             crate::error::types::Kind::Stream => true, // Stream errors may be retryable
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
148 ~             // Request errors may be transient
149 |             crate::error::types::Kind::Status(status, _) => {
...
152 |             }
153 ~             // Connection failures are retryable
154 ~             // Timeout errors are retryable
155 ~             crate::error::types::Kind::Request | crate::error::types::Kind::Connect | crate::error::types::Kind::Timeout | crate::error::types::Kind::Stream => true, // Stream errors may be retryable
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/retry/policy.rs:171:5
    |
171 |     pub fn validate(&self) -> Result<(), String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/telemetry/jsonpath/stream.rs:12:22
   |
12 |             .map(|d| d.as_micros() as u64)
   |                      ^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
12 -             .map(|d| d.as_micros() as u64)
12 +             .map(|d| u64::try_from(d.as_micros()))
   |

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/telemetry/jsonpath/stream.rs:31:22
   |
31 |             .map(|d| d.as_micros() as u64)
   |                      ^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
31 -             .map(|d| d.as_micros() as u64)
31 +             .map(|d| u64::try_from(d.as_micros()))
   |

warning: casting `u128` to `u64` may truncate the value
   --> packages/client/src/telemetry/jsonpath/stream.rs:103:22
    |
103 |             .map(|d| d.as_micros() as u64)
    |                      ^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
103 -             .map(|d| d.as_micros() as u64)
103 +             .map(|d| u64::try_from(d.as_micros()))
    |

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/telemetry/metrics.rs:48:24
   |
48 |             .fetch_add(response_time.as_nanos() as u64, Ordering::Relaxed);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
48 -             .fetch_add(response_time.as_nanos() as u64, Ordering::Relaxed);
48 +             .fetch_add(u64::try_from(response_time.as_nanos()), Ordering::Relaxed);
   |

warning: casting `u128` to `u64` may truncate the value
  --> packages/client/src/telemetry/metrics.rs:60:24
   |
60 |             .fetch_add(response_time.as_nanos() as u64, Ordering::Relaxed);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
60 -             .fetch_add(response_time.as_nanos() as u64, Ordering::Relaxed);
60 +             .fetch_add(u64::try_from(response_time.as_nanos()), Ordering::Relaxed);
   |

warning: use of a fallible conversion when an infallible one could be used
   --> packages/client/src/tls/certificate/generation.rs:161:33
    |
161 |             .map(|s| s.as_str().try_into())
    |                                 ^^^^^^^^ help: use: `into`
    |
    = note: converting `&str` to `String` cannot fail
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions

warning: very complex type used. Consider factoring parts into `type` definitions
  --> packages/client/src/tls/certificate/parser.rs:78:6
   |
78 |   ) -> Result<
   |  ______^
79 | |     (
80 | |         Vec<String>,
81 | |         Vec<std::net::IpAddr>,
...  |
87 | |     TlsError,
88 | | > {
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity

warning: this function has too many lines (168/100)
  --> packages/client/src/tls/certificate/parser.rs:76:1
   |
76 | / pub fn extract_certificate_details(
77 | |     cert: &X509CertCert,
78 | | ) -> Result<
...  |
87 | |     TlsError,
88 | | > {
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this function's return value is unnecessarily wrapped by `Result`
  --> packages/client/src/tls/certificate/parser.rs:76:1
   |
76 | / pub fn extract_certificate_details(
77 | |     cert: &X509CertCert,
78 | | ) -> Result<
...  |
87 | |     TlsError,
88 | | > {
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
   |
78 - ) -> Result<
79 -     (
80 -         Vec<String>,
81 -         Vec<std::net::IpAddr>,
82 -         bool,
83 -         Vec<String>,
84 -         SystemTime,
85 -         SystemTime,
86 -     ),
87 -     TlsError,
88 - > {
78 + ) -> (std::vec::Vec<std::string::String>, std::vec::Vec<std::net::IpAddr>, bool, std::vec::Vec<std::string::String>, std::time::SystemTime, std::time::SystemTime) {
   |
help: ...and then remove the surrounding `Ok()` from returning expressions
   |
307~     (
308+         san_dns_names,
309+         san_ip_addresses,
310+         is_ca,
311+         key_usage,
312+         not_before,
313+         not_after,
314+     )
   |

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/certificate/parser.rs:100:5
    |
100 |     const OID_SUBJECT_ALT_NAME: &str = "2.5.29.17";
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/certificate/parser.rs:101:5
    |
101 |     const OID_BASIC_CONSTRAINTS: &str = "2.5.29.19";
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/certificate/parser.rs:102:5
    |
102 |     const OID_KEY_USAGE: &str = "2.5.29.15";
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: this could be rewritten as `let...else`
   --> packages/client/src/tls/certificate/parser.rs:123:29
    |
123 | / ...                   let mut reader = if let Ok(reader) = SliceReader::new(san_data) { reader } else {
124 | | ...                       tracing::warn!("Failed to create DER reader for SAN data");
125 | | ...                       continue;
126 | | ...                   };
    | |________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
    |
123 ~                             let Ok(mut reader) = SliceReader::new(san_data) else {
124 +                                 tracing::warn!("Failed to create DER reader for SAN data");
125 +                                 continue;
126 +                             };
    |

warning: this `if` has identical blocks
   --> packages/client/src/tls/certificate/parser.rs:506:34
    |
506 |       } else if oid_str == DSA_OID {
    |  __________________________________^
507 | |         extract_dh_like_key_size(algorithm.parameters.as_ref())
508 | |     } else if oid_str == DH_OID {
    | |_____^
    |
note: same as this
   --> packages/client/src/tls/certificate/parser.rs:508:33
    |
508 |       } else if oid_str == DH_OID {
    |  _________________________________^
509 | |         extract_dh_like_key_size(algorithm.parameters.as_ref())
510 | |     } else if oid_str == ID_EC_PUBLIC_KEY.to_string() {
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> packages/client/src/tls/certificate/parser.rs:534:21
    |
534 |     let rest_bits = ((effective.len() - 1) * 8) as u32;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
534 -     let rest_bits = ((effective.len() - 1) * 8) as u32;
534 +     let rest_bits = u32::try_from((effective.len() - 1) * 8);
    |

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:560:18
    |
560 |     let length = Length::try_from(sequence_len).ok()?;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion
    = note: `#[warn(clippy::useless_conversion)]` implied by `#[warn(clippy::all)]`

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:568:23
    |
568 |     reader.read_slice(Length::try_from(modulus_len).ok()?).ok()?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:585:18
    |
585 |     let length = der::Length::try_from(sequence_len).ok()?;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `der::Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:593:23
    |
593 |     reader.read_slice(der::Length::try_from(p_len).ok()?).ok()?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `der::Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: these match arms have identical bodies
   --> packages/client/src/tls/certificate/parser.rs:632:9
    |
632 |         Tag::Null => None, // implicitCurve
    |         ^^^^^^^^^^^^^^^^^
...
655 |         _ => None,
    |         ^^^^^^^^^ the wildcard arm
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise remove the non-wildcard arm
    |
632 -         Tag::Null => None, // implicitCurve
632 +         // implicitCurve
    |

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:609:26
    |
609 |             let length = Length::try_from(header_len).ok()?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: these match arms have identical bodies
   --> packages/client/src/tls/certificate/parser.rs:623:25
    |
623 |                         "1.2.840.10045.3.1.1" => Some(192), // SECP192R1
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
624 |                         "1.3.132.0.31" => Some(192),        // SECP192K1
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is unintentional make the arms return different values
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
help: otherwise merge the patterns into a single arm
    |
623 ~                         // SECP192R1
624 ~                         "1.2.840.10045.3.1.1" | "1.3.132.0.31" => Some(192),        // SECP192K1
    |

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:636:31
    |
636 |             reader.read_slice(Length::try_from(header_len).ok()?).ok()?;
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: useless conversion to the same type: `der::Length`
   --> packages/client/src/tls/certificate/parser.rs:651:31
    |
651 |             reader.read_slice(Length::try_from(order_len).ok()?).ok()?;
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing `Length::try_from()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: field name starts with the struct's name
   --> packages/client/src/tls/certificate/parser.rs:734:9
    |
734 |         distribution_point: Option<der::Any>,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_field_names

warning: binding to `_` prefixed variable with no side-effect
   --> packages/client/src/tls/certificate/parser.rs:763:21
    |
763 |                 let _len = dp_bytes[offset] as usize;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding
    = note: `#[warn(clippy::no_effect_underscore_binding)]` implied by `#[warn(clippy::pedantic)]`

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/crl_cache.rs:232:9
    |
232 |         const MAX_CRL_SIZE: usize = 50 * 1024 * 1024; // 50MB max CRL size
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: unused `self` argument
   --> packages/client/src/tls/crl_cache.rs:257:23
    |
257 |     fn parse_crl_data(&self, crl_bytes: &[u8]) -> Result<CrlCacheEntry, TlsError> {
    |                       ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: casting `i64` to `u64` may lose the sign of the value
   --> packages/client/src/tls/crl_cache.rs:304:68
    |
304 |             std::time::UNIX_EPOCH + std::time::Duration::from_secs(time.timestamp() as u64)
    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/ocsp.rs:306:9
    |
306 |         use x509_cert::spki::AlgorithmIdentifierOwned;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/ocsp.rs:322:9
    |
322 |         use x509_ocsp::{Request, TbsRequest};
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/ocsp.rs:322:25
    |
322 |         use x509_ocsp::{Request, TbsRequest};
    |                         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> packages/client/src/tls/ocsp.rs:322:34
    |
322 |         use x509_ocsp::{Request, TbsRequest};
    |                                  ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: unused `self` argument
   --> packages/client/src/tls/ocsp.rs:347:9
    |
347 |         &self,
    |         ^^^^^
    |
    = help: consider refactoring to an associated function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/tls/tls_manager.rs:211:5
    |
211 |     pub async fn with_cert_dir(cert_dir: std::path::PathBuf) -> Result<Self, TlsError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/tls/tls_manager.rs:236:5
    |
236 |     pub fn add_certificate_authority(&self, name: String, ca: CertificateAuthority) -> Result<(), TlsError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/tls/tls_manager.rs:250:5
    |
250 | /     pub async fn create_connection(
251 | |         &self,
252 | |         host: &str,
253 | |         port: u16,
254 | |     ) -> Result<tokio_rustls::client::TlsStream<TcpStream>, TlsError> {
    | |_____________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/tls/tls_manager.rs:416:5
    |
416 | /     pub async fn validate_certificate_ocsp(
417 | |         &self,
418 | |         cert_pem: &str,
419 | |         issuer_cert_pem: Option<&str>,
420 | |     ) -> Result<(), TlsError> {
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> packages/client/src/tls/tls_manager.rs:454:5
    |
454 |     pub async fn validate_certificate_crl(&self, cert_pem: &str) -> Result<(), TlsError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> packages/client/src/tls/builder/authority.rs:87:5
   |
87 |     pub fn expires_in(&self) -> Result<Duration, TlsError> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: this function has too many lines (111/100)
   --> packages/client/src/tls/builder/authority.rs:210:5
    |
210 |     pub async fn create(self) -> super::responses::CertificateAuthorityResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this function has too many lines (158/100)
   --> packages/client/src/tls/builder/authority.rs:442:5
    |
442 |     pub async fn load(self) -> super::responses::CertificateAuthorityResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this function has too many lines (133/100)
   --> packages/client/src/tls/builder/authority.rs:723:5
    |
723 |     pub async fn load(self) -> super::responses::CertificateAuthorityResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: the function `ystream::AsyncStream::next` doesn't need a mutable reference
   --> packages/client/src/tls/builder/authority.rs:765:68
    |
765 |                 while let Some(chunk) = ystream::AsyncStream::next(&mut body_stream_pin).await {
    |                                                                    ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed
    = note: `#[warn(clippy::unnecessary_mut_passed)]` implied by `#[warn(clippy::all)]`

warning: this function has too many lines (313/100)
   --> packages/client/src/tls/builder/certificate/validator.rs:103:5
    |
103 |     pub async fn validate(self) -> CertificateValidationResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: this function has too many lines (267/100)
   --> packages/client/src/tls/builder/certificate/generator.rs:117:5
    |
117 |     pub async fn generate(self) -> CertificateGenerationResponse {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: parameter of type `HashMap` should be generalized over different hashers
 --> packages/client/src/tls/builder/certificate/utils.rs:7:31
  |
7 | pub fn format_dn_hashmap(dn: &HashMap<String, String>) -> String {
  |                               ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher
  = note: `#[warn(clippy::implicit_hasher)]` implied by `#[warn(clippy::pedantic)]`
help: add a type parameter for `BuildHasher`
  |
7 | pub fn format_dn_hashmap<S: ::std::hash::BuildHasher>(dn: &HashMap<String, String, S>) -> String {
  |                         +++++++++++++++++++++++++++++                            +++

warning: item in documentation is missing backticks
   --> packages/client/src/lib.rs:219:51
    |
219 | /// - Global client has already been initialized (OnceLock constraint)
    |                                                   ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
219 - /// - Global client has already been initialized (OnceLock constraint)
219 + /// - Global client has already been initialized (`OnceLock` constraint)
    |

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/crl_cache.rs:85:5
    |
 85 | /     pub async fn check_certificate_status(
 86 | |         &self,
 87 | |         serial_number: &[u8],
 88 | |         crl_url: &str,
...   |
103 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async
    = note: `#[warn(clippy::unused_async)]` implied by `#[warn(clippy::pedantic)]`

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/crl_cache.rs:106:5
    |
106 | /     pub async fn check_certificate_revocation(
107 | |         &self,
108 | |         cert: &ParsedCertificate,
109 | |     ) -> Result<bool, TlsError> {
...   |
140 | |         Ok(false)
141 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/ocsp.rs:103:5
    |
103 | /     pub async fn check_certificate(
104 | |         &self,
105 | |         cert: &ParsedCertificate,
106 | |         issuer_cert: Option<&ParsedCertificate>,
...   |
136 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/tls_manager.rs:211:5
    |
211 | /     pub async fn with_cert_dir(cert_dir: std::path::PathBuf) -> Result<Self, TlsError> {
212 | |         // Create certificate directory if it doesn't exist
213 | |         if !cert_dir.exists() {
214 | |             std::fs::create_dir_all(&cert_dir)
...   |
232 | |         Ok(Self::with_config(config))
233 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/builder/authority.rs:210:5
    |
210 | /     pub async fn create(self) -> super::responses::CertificateAuthorityResponse {
211 | |         use std::time::SystemTime;
212 | |
213 | |         use rcgen::{CertificateParams, DistinguishedName, DnType, KeyPair};
...   |
342 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/builder/authority.rs:345:5
    |
345 | /     pub async fn load(self) -> super::responses::CertificateAuthorityResponse {
346 | |         use std::time::SystemTime;
347 | |
348 | |         use crate::tls::certificate::parse_certificate_from_pem;
...   |
431 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/builder/authority.rs:442:5
    |
442 | /     pub async fn load(self) -> super::responses::CertificateAuthorityResponse {
443 | |         use std::time::SystemTime;
444 | |         use crate::tls::certificate::parse_certificate_from_pem;
...   |
622 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/builder/authority.rs:625:5
    |
625 | /     pub async fn store(&self, authority: &CertificateAuthority) -> super::responses::CertificateAuthorityResponse {
626 | |         tracing::debug!("Storing CA '{}' to system keychain", authority.name);
...   |
704 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: unused `async` for function with no await statements
   --> packages/client/src/tls/builder/certificate/generator.rs:117:5
    |
117 | /     pub async fn generate(self) -> CertificateGenerationResponse {
118 | |         use rcgen::{CertificateParams, DistinguishedName, DnType, KeyPair, SanType};
119 | |
120 | |         let mut params = match CertificateParams::new(self.domains.clone()) {
...   |
414 | |     }
    | |_____^
    |
    = help: consider removing the `async` from this function
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_async

warning: casting `usize` to `u8` may truncate the value
  --> packages/client/src/protocols/wire_tests.rs:93:32
   |
93 |         let mut encoded = vec![test_string.len() as u8];
   |                                ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
   |
93 -         let mut encoded = vec![test_string.len() as u8];
93 +         let mut encoded = vec![u8::try_from(test_string.len())];
   |

warning: `quyc_client` (lib) generated 624 warnings (run `cargo clippy --fix --lib -p quyc_client` to apply 35 suggestions)
warning: `quyc_client` (lib test) generated 625 warnings (624 duplicates)
warning: this `continue` expression is redundant
   --> packages/api/src/builder/headers.rs:118:27
    |
118 |                 Err(_) => continue, // Skip invalid header names
    |                           ^^^^^^^^
    |
    = help: consider dropping the `continue` expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_continue
note: the lint level is defined here
   --> packages/api/src/lib.rs:7:22
    |
  7 | #![warn(clippy::all, clippy::pedantic)]
    |                      ^^^^^^^^^^^^^^^^
    = note: `#[warn(clippy::needless_continue)]` implied by `#[warn(clippy::pedantic)]`

warning: these match arms have identical bodies
  --> packages/api/src/builder/core.rs:55:13
   |
55 |             "application/json" => ContentType::ApplicationJson,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
61 |             _ => ContentType::ApplicationJson, // Default fallback
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the wildcard arm
   |
   = help: if this is unintentional make the arms return different values
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
   = note: `#[warn(clippy::match_same_arms)]` implied by `#[warn(clippy::pedantic)]`
help: otherwise remove the non-wildcard arm
   |
55 -             "application/json" => ContentType::ApplicationJson,
   |

warning: docs for function which may panic missing `# Panics` section
   --> packages/api/src/builder/core.rs:107:5
    |
107 |     pub fn new(client: &HttpClient) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> packages/api/src/builder/core.rs:161:57
    |
161 | ...                   Url::parse("http://127.0.0.1").expect("Basic URL parsing failed - URL crate may be corrupted")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc
    = note: `#[warn(clippy::missing_panics_doc)]` implied by `#[warn(clippy::pedantic)]`

warning: manual `Debug` impl does not include all fields
   --> packages/api/src/builder/core.rs:364:1
    |
364 | / impl<S> fmt::Debug for Http3Builder<S> {
365 | |     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
366 | |         f.debug_struct("Http3Builder")
367 | |             .field("client", &self.client)
...   |
373 | | }
    | |_^
    |
note: this field is unused
   --> packages/api/src/builder/core.rs:97:5
    |
 97 |     pub(crate) state: S,
    |     ^^^^^^^^^^^^^^^^^^^
    = help: consider including all fields in this `Debug` impl
    = help: consider calling `.finish_non_exhaustive()` if you intend to ignore fields
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug
    = note: `#[warn(clippy::missing_fields_in_debug)]` implied by `#[warn(clippy::pedantic)]`

warning: `quyc` (lib) generated 4 warnings
warning: `quyc` (lib test) generated 4 warnings (4 duplicates)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.30s
